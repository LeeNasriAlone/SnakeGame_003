
SnakeGame_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000080  08004174  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08004174  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc66  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f66  00000000  00000000  0002dd16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001750b  00000000  00000000  000314a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b59  00000000  00000000  000489b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d23d  00000000  00000000  0005250c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000df7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004058 	.word	0x08004058

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08004058 	.word	0x08004058

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 f8fc 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f832 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f93a 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f90e 	bl	8000708 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80004ec:	f000 f896 	bl	800061c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  scene_clear(scene);
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <main+0x5c>)
 80004f2:	f000 ff23 	bl	800133c <scene_clear>
  scene_mainmenu(scene);
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x5c>)
 80004f8:	f000 feee 	bl	80012d8 <scene_mainmenu>
  HAL_UART_Receive_IT( &huart2, buffer, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <main+0x60>)
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <main+0x64>)
 8000502:	f002 fe87 	bl	8003214 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x68>)
 8000508:	220d      	movs	r2, #13
 800050a:	490e      	ldr	r1, [pc, #56]	; (8000544 <main+0x6c>)
 800050c:	480b      	ldr	r0, [pc, #44]	; (800053c <main+0x64>)
 800050e:	f002 fde8 	bl	80030e2 <HAL_UART_Transmit>
	  snake_move(scene);
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x5c>)
 8000514:	f000 fc92 	bl	8000e3c <snake_move>
	  snake_newFood(scene);
 8000518:	4806      	ldr	r0, [pc, #24]	; (8000534 <main+0x5c>)
 800051a:	f000 fd95 	bl	8001048 <snake_newFood>
	  HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <main+0x68>)
 8000520:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000524:	4903      	ldr	r1, [pc, #12]	; (8000534 <main+0x5c>)
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <main+0x64>)
 8000528:	f002 fddb 	bl	80030e2 <HAL_UART_Transmit>
	  HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f001 f945 	bl	80017bc <HAL_Delay>
  {
 8000532:	e7e8      	b.n	8000506 <main+0x2e>
 8000534:	20000150 	.word	0x20000150
 8000538:	2000010c 	.word	0x2000010c
 800053c:	20000110 	.word	0x20000110
 8000540:	000186a0 	.word	0x000186a0
 8000544:	20000000 	.word	0x20000000

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fcd6 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b8:	2310      	movs	r3, #16
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fbe6 	bl	8001da0 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f9fd 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fe40 	bl	8002280 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f9e7 	bl	80009d8 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_TIM4_Init+0xe4>)
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_TIM4_Init+0xe8>)
 8000650:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_TIM4_Init+0xe4>)
 8000654:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000658:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_TIM4_Init+0xe4>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_TIM4_Init+0xe4>)
 8000662:	22c7      	movs	r2, #199	; 0xc7
 8000664:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000666:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_TIM4_Init+0xe4>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_TIM4_Init+0xe4>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000672:	4823      	ldr	r0, [pc, #140]	; (8000700 <MX_TIM4_Init+0xe4>)
 8000674:	f001 fff6 	bl	8002664 <HAL_TIM_Base_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800067e:	f000 f9ab 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068c:	4619      	mov	r1, r3
 800068e:	481c      	ldr	r0, [pc, #112]	; (8000700 <MX_TIM4_Init+0xe4>)
 8000690:	f002 f90e 	bl	80028b0 <HAL_TIM_ConfigClockSource>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800069a:	f000 f99d 	bl	80009d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_TIM4_Init+0xe4>)
 80006a0:	f002 f80b 	bl	80026ba <HAL_TIM_PWM_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006aa:	f000 f995 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4619      	mov	r1, r3
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <MX_TIM4_Init+0xe4>)
 80006be:	f002 fc55 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006c8:	f000 f986 	bl	80009d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 80006d0:	2363      	movs	r3, #99	; 0x63
 80006d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2208      	movs	r2, #8
 80006e0:	4619      	mov	r1, r3
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM4_Init+0xe4>)
 80006e4:	f002 f81e 	bl	8002724 <HAL_TIM_PWM_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80006ee:	f000 f973 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_TIM4_Init+0xe4>)
 80006f4:	f000 fec2 	bl	800147c <HAL_TIM_MspPostInit>

}
 80006f8:	bf00      	nop
 80006fa:	3738      	adds	r7, #56	; 0x38
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000cc 	.word	0x200000cc
 8000704:	40000800 	.word	0x40000800

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f002 fc82 	bl	8003048 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f945 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000110 	.word	0x20000110
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 fac0 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_GPIO_Init+0xd8>)
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_GPIO_Init+0xdc>)
 8000802:	f001 f931 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000806:	2320      	movs	r3, #32
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xd4>)
 800081e:	f001 f923 	bl	8001a68 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	10210000 	.word	0x10210000
 8000838:	40020800 	.word	0x40020800

0800083c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    /* Get character from UART. Note that does not read two byte characters like arrows. */
    switch(buffer[0]) {
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <HAL_UART_RxCpltCallback+0x17c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3b41      	subs	r3, #65	; 0x41
 800084a:	2b36      	cmp	r3, #54	; 0x36
 800084c:	f200 80aa 	bhi.w	80009a4 <HAL_UART_RxCpltCallback+0x168>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <HAL_UART_RxCpltCallback+0x1c>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	0800095d 	.word	0x0800095d
 800085c:	080009a5 	.word	0x080009a5
 8000860:	080009a5 	.word	0x080009a5
 8000864:	0800096d 	.word	0x0800096d
 8000868:	080009a5 	.word	0x080009a5
 800086c:	0800099b 	.word	0x0800099b
 8000870:	080009a5 	.word	0x080009a5
 8000874:	080009a5 	.word	0x080009a5
 8000878:	080009a5 	.word	0x080009a5
 800087c:	080009a5 	.word	0x080009a5
 8000880:	08000975 	.word	0x08000975
 8000884:	080009a5 	.word	0x080009a5
 8000888:	080009a5 	.word	0x080009a5
 800088c:	080009a5 	.word	0x080009a5
 8000890:	080009a5 	.word	0x080009a5
 8000894:	080009a5 	.word	0x080009a5
 8000898:	080009a5 	.word	0x080009a5
 800089c:	080009a5 	.word	0x080009a5
 80008a0:	0800094d 	.word	0x0800094d
 80008a4:	080009a5 	.word	0x080009a5
 80008a8:	080009a5 	.word	0x080009a5
 80008ac:	080009a5 	.word	0x080009a5
 80008b0:	0800093d 	.word	0x0800093d
 80008b4:	080009a5 	.word	0x080009a5
 80008b8:	080009a5 	.word	0x080009a5
 80008bc:	080009a5 	.word	0x080009a5
 80008c0:	080009a5 	.word	0x080009a5
 80008c4:	080009a5 	.word	0x080009a5
 80008c8:	080009a5 	.word	0x080009a5
 80008cc:	080009a5 	.word	0x080009a5
 80008d0:	080009a5 	.word	0x080009a5
 80008d4:	080009a5 	.word	0x080009a5
 80008d8:	08000955 	.word	0x08000955
 80008dc:	080009a5 	.word	0x080009a5
 80008e0:	080009a5 	.word	0x080009a5
 80008e4:	08000965 	.word	0x08000965
 80008e8:	080009a5 	.word	0x080009a5
 80008ec:	08000991 	.word	0x08000991
 80008f0:	080009a5 	.word	0x080009a5
 80008f4:	080009a5 	.word	0x080009a5
 80008f8:	080009a5 	.word	0x080009a5
 80008fc:	080009a5 	.word	0x080009a5
 8000900:	08000983 	.word	0x08000983
 8000904:	080009a5 	.word	0x080009a5
 8000908:	080009a5 	.word	0x080009a5
 800090c:	080009a5 	.word	0x080009a5
 8000910:	080009a5 	.word	0x080009a5
 8000914:	080009a5 	.word	0x080009a5
 8000918:	080009a5 	.word	0x080009a5
 800091c:	080009a5 	.word	0x080009a5
 8000920:	08000945 	.word	0x08000945
 8000924:	080009a5 	.word	0x080009a5
 8000928:	080009a5 	.word	0x080009a5
 800092c:	080009a5 	.word	0x080009a5
 8000930:	08000935 	.word	0x08000935
    case 'w' :
        snake_setDirection(UP);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fa3b 	bl	8000db0 <snake_setDirection>
        break;
 800093a:	e034      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'W' :
        snake_setDirection(UP);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fa37 	bl	8000db0 <snake_setDirection>
        break;
 8000942:	e030      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in DOWN direction if allowed */
    case 's' :
        snake_setDirection(DOWN);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 fa33 	bl	8000db0 <snake_setDirection>
        break;
 800094a:	e02c      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'S' :
        snake_setDirection(DOWN);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 fa2f 	bl	8000db0 <snake_setDirection>
        break;
 8000952:	e028      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in LEFT direction if allowed */
    case 'a' :
        snake_setDirection(LEFT);
 8000954:	2004      	movs	r0, #4
 8000956:	f000 fa2b 	bl	8000db0 <snake_setDirection>
        break;
 800095a:	e024      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'A' :
        snake_setDirection(LEFT);
 800095c:	2004      	movs	r0, #4
 800095e:	f000 fa27 	bl	8000db0 <snake_setDirection>
        break;
 8000962:	e020      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in RIGHT direction if allowed */
    case 'd' :
        snake_setDirection(RIGHT);
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fa23 	bl	8000db0 <snake_setDirection>
        break;
 800096a:	e01c      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'D' :
        snake_setDirection(RIGHT);
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fa1f 	bl	8000db0 <snake_setDirection>
        break;
 8000972:	e018      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'K' :
    	scene_clear(scene);
 8000974:	4811      	ldr	r0, [pc, #68]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 8000976:	f000 fce1 	bl	800133c <scene_clear>
    	snake_init(scene);
 800097a:	4810      	ldr	r0, [pc, #64]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 800097c:	f000 f908 	bl	8000b90 <snake_init>
    	break;
 8000980:	e011      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'k' :
    	scene_clear(scene);
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 8000984:	f000 fcda 	bl	800133c <scene_clear>
        snake_init(scene);
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 800098a:	f000 f901 	bl	8000b90 <snake_init>
        break;
 800098e:	e00a      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'f' :
    	snake_feed(1, scene);
 8000990:	490a      	ldr	r1, [pc, #40]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fb44 	bl	8001020 <snake_feed>
    	break ;
 8000998:	e005      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    case 'F' :
        snake_feed(1, scene);
 800099a:	4908      	ldr	r1, [pc, #32]	; (80009bc <HAL_UART_RxCpltCallback+0x180>)
 800099c:	2001      	movs	r0, #1
 800099e:	f000 fb3f 	bl	8001020 <snake_feed>
        break ;
 80009a2:	e000      	b.n	80009a6 <HAL_UART_RxCpltCallback+0x16a>
    default :
        break;
 80009a4:	bf00      	nop
    }
    /* Restart the interrupt reception mode */
    HAL_UART_Receive_IT( &huart2, buffer, 1);
 80009a6:	2201      	movs	r2, #1
 80009a8:	4903      	ldr	r1, [pc, #12]	; (80009b8 <HAL_UART_RxCpltCallback+0x17c>)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_UART_RxCpltCallback+0x184>)
 80009ac:	f002 fc32 	bl	8003214 <HAL_UART_Receive_IT>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000010c 	.word	0x2000010c
 80009bc:	20000150 	.word	0x20000150
 80009c0:	20000110 	.word	0x20000110

080009c4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <createQueue>:
// C program for array implementation of queue
#include "queue.h"

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity){
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b084      	sub	sp, #16
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
 80009ee:	2014      	movs	r0, #20
 80009f0:	f003 fa82 	bl	8003ef8 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	601a      	str	r2, [r3, #0]
    queue->rear = capacity - 1;  // This is important, see the enqueue
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	461a      	mov	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	605a      	str	r2, [r3, #4]
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fa6b 	bl	8003ef8 <malloc>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	611a      	str	r2, [r3, #16]
    return queue;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <isFull>:

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	bf0c      	ite	eq
 8000a4a:	2301      	moveq	r3, #1
 8000a4c:	2300      	movne	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <isEmpty>:

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf0c      	ite	eq
 8000a6c:	2301      	moveq	r3, #1
 8000a6e:	2300      	movne	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ffd3 	bl	8000a34 <isFull>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d11b      	bne.n	8000acc <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8000aa4:	fb03 f301 	mul.w	r3, r3, r1
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	691a      	ldr	r2, [r3, #16]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	e000      	b.n	8000ace <enqueue+0x50>
        return;
 8000acc:	bf00      	nop
}
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <dequeue>:

// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffbd 	bl	8000a5c <isEmpty>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <dequeue+0x1a>
        return INT_MIN;
 8000ae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000aec:	e01b      	b.n	8000b26 <dequeue+0x52>
    int item = queue->array[queue->front];
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)%queue->capacity;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	fbb2 f1f3 	udiv	r1, r2, r3
 8000b0e:	fb03 f301 	mul.w	r3, r3, r1
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	609a      	str	r2, [r3, #8]
    return item;
 8000b24:	68fb      	ldr	r3, [r7, #12]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <front>:

// Function to get front of queue
int front(struct Queue* queue)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ff90 	bl	8000a5c <isEmpty>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <front+0x1a>
        return INT_MIN;
 8000b42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b46:	e006      	b.n	8000b56 <front+0x28>
    return queue->array[queue->front];
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <rear>:

// Function to get rear of queue
int rear(struct Queue* queue)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff78 	bl	8000a5c <isEmpty>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <rear+0x1a>
        return INT_MIN;
 8000b72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b76:	e006      	b.n	8000b86 <rear+0x28>
    return queue->array[queue->rear];
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691a      	ldr	r2, [r3, #16]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	681b      	ldr	r3, [r3, #0]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <snake_init>:
static int food_constant;
static int food_time;
static int isPlay;


void snake_init(char scene[1920]){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	snake_x = createQueue(1000);
 8000b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9c:	f7ff ff23 	bl	80009e6 <createQueue>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <snake_init+0xb8>)
 8000ba4:	601a      	str	r2, [r3, #0]
	snake_y = createQueue(1000);
 8000ba6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000baa:	f7ff ff1c 	bl	80009e6 <createQueue>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <snake_init+0xbc>)
 8000bb2:	601a      	str	r2, [r3, #0]
	snake_direction = RIGHT;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <snake_init+0xc0>)
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	601a      	str	r2, [r3, #0]
	for (int x = 0; x < 20; ++x) { snake_enqueue(x, 0, scene); }
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e007      	b.n	8000bd0 <snake_init+0x40>
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f000 f855 	bl	8000c74 <snake_enqueue>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b13      	cmp	r3, #19
 8000bd4:	ddf4      	ble.n	8000bc0 <snake_init+0x30>
	score = 0;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <snake_init+0xc4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
	food_time = 0; food_constant = 30; isPlay = 1;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <snake_init+0xc8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <snake_init+0xcc>)
 8000be4:	221e      	movs	r2, #30
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <snake_init+0xd0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
	scene_setScore(scene);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 faf6 	bl	80011e0 <scene_setScore>
	snake_head_x = rear(snake_x);
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <snake_init+0xb8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ffb0 	bl	8000b5e <rear>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <snake_init+0xd4>)
 8000c02:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <snake_init+0xbc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ffa8 	bl	8000b5e <rear>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <snake_init+0xd8>)
 8000c12:	601a      	str	r2, [r3, #0]
	snake_tail_x = front(snake_x);
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <snake_init+0xb8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff88 	bl	8000b2e <front>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <snake_init+0xdc>)
 8000c22:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <snake_init+0xbc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff80 	bl	8000b2e <front>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <snake_init+0xe0>)
 8000c32:	601a      	str	r2, [r3, #0]

	scene[500] = 'O';
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c3a:	224f      	movs	r2, #79	; 0x4f
 8000c3c:	701a      	strb	r2, [r3, #0]
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200008d4 	.word	0x200008d4
 8000c4c:	200008d0 	.word	0x200008d0
 8000c50:	2000009c 	.word	0x2000009c
 8000c54:	200000a0 	.word	0x200000a0
 8000c58:	200000b8 	.word	0x200000b8
 8000c5c:	200000b4 	.word	0x200000b4
 8000c60:	200000bc 	.word	0x200000bc
 8000c64:	200000a4 	.word	0x200000a4
 8000c68:	200000a8 	.word	0x200000a8
 8000c6c:	200000ac 	.word	0x200000ac
 8000c70:	200000b0 	.word	0x200000b0

08000c74 <snake_enqueue>:

void snake_enqueue(int x, int y, char scene[1920]){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
	if ((80*y + x) >= 1760) { x = 0; y = 0;}
 8000c80:	68ba      	ldr	r2, [r7, #8]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000c94:	db04      	blt.n	8000ca0 <snake_enqueue+0x2c>
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	e00d      	b.n	8000cbc <snake_enqueue+0x48>
	else if ((80*y + x) < 0) { x = 0; y = 0;}
 8000ca0:	68ba      	ldr	r2, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	011b      	lsls	r3, r3, #4
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da03      	bge.n	8000cbc <snake_enqueue+0x48>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
	enqueue(snake_x, x);
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <snake_enqueue+0xa4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fedb 	bl	8000a7e <enqueue>
	enqueue(snake_y, y);
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <snake_enqueue+0xa8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fed5 	bl	8000a7e <enqueue>
	snake_head_x = rear(snake_x);
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <snake_enqueue+0xa4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff40 	bl	8000b5e <rear>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <snake_enqueue+0xac>)
 8000ce2:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <snake_enqueue+0xa8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff38 	bl	8000b5e <rear>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <snake_enqueue+0xb0>)
 8000cf2:	601a      	str	r2, [r3, #0]
	scene[80 * y + x] = '@';
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	701a      	strb	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200008d4 	.word	0x200008d4
 8000d1c:	200008d0 	.word	0x200008d0
 8000d20:	200000a4 	.word	0x200000a4
 8000d24:	200000a8 	.word	0x200000a8

08000d28 <snake_dequeue>:

void snake_dequeue(char scene[1920]){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	int x = front(snake_x); dequeue(snake_x);
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <snake_dequeue+0x78>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fefa 	bl	8000b2e <front>
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <snake_dequeue+0x78>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fec7 	bl	8000ad4 <dequeue>
	int y = front(snake_y); dequeue(snake_y);
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <snake_dequeue+0x7c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff feef 	bl	8000b2e <front>
 8000d50:	60b8      	str	r0, [r7, #8]
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <snake_dequeue+0x7c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff febc 	bl	8000ad4 <dequeue>
	snake_tail_x = front(snake_x);
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <snake_dequeue+0x78>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fee4 	bl	8000b2e <front>
 8000d66:	4602      	mov	r2, r0
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <snake_dequeue+0x80>)
 8000d6a:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <snake_dequeue+0x7c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fedc 	bl	8000b2e <front>
 8000d76:	4602      	mov	r2, r0
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <snake_dequeue+0x84>)
 8000d7a:	601a      	str	r2, [r3, #0]
	scene[80*y + x] = ' ';
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	011b      	lsls	r3, r3, #4
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	2220      	movs	r2, #32
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200008d4 	.word	0x200008d4
 8000da4:	200008d0 	.word	0x200008d0
 8000da8:	200000ac 	.word	0x200000ac
 8000dac:	200000b0 	.word	0x200000b0

08000db0 <snake_setDirection>:

void snake_setDirection(int direction) {
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

    /* Sets a legal direction for the snake. */
    /* Note that the snake cannot turn back on itself*/
    switch(direction) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d82b      	bhi.n	8000e18 <snake_setDirection+0x68>
 8000dc0:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <snake_setDirection+0x18>)
 8000dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc6:	bf00      	nop
 8000dc8:	08000df9 	.word	0x08000df9
 8000dcc:	08000de9 	.word	0x08000de9
 8000dd0:	08000e09 	.word	0x08000e09
 8000dd4:	08000dd9 	.word	0x08000dd9
    case LEFT :
        if(snake_direction != RIGHT) {
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <snake_setDirection+0x88>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d01d      	beq.n	8000e1c <snake_setDirection+0x6c>
            snake_direction = LEFT;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <snake_setDirection+0x88>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	601a      	str	r2, [r3, #0]
        }
        break;
 8000de6:	e019      	b.n	8000e1c <snake_setDirection+0x6c>

    case RIGHT :
        if(snake_direction != LEFT) {
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <snake_setDirection+0x88>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d017      	beq.n	8000e20 <snake_setDirection+0x70>
            snake_direction = RIGHT;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <snake_setDirection+0x88>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	601a      	str	r2, [r3, #0]
        }
        break;
 8000df6:	e013      	b.n	8000e20 <snake_setDirection+0x70>

    case UP :
        if(snake_direction != DOWN) {
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <snake_setDirection+0x88>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d011      	beq.n	8000e24 <snake_setDirection+0x74>
            snake_direction = UP;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <snake_setDirection+0x88>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
        }
        break;
 8000e06:	e00d      	b.n	8000e24 <snake_setDirection+0x74>

    case DOWN :
        if(snake_direction != UP) {
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <snake_setDirection+0x88>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d00b      	beq.n	8000e28 <snake_setDirection+0x78>
            snake_direction = DOWN;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <snake_setDirection+0x88>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	601a      	str	r2, [r3, #0]
        }
        break;
 8000e16:	e007      	b.n	8000e28 <snake_setDirection+0x78>
    default :
        break;
 8000e18:	bf00      	nop
 8000e1a:	e006      	b.n	8000e2a <snake_setDirection+0x7a>
        break;
 8000e1c:	bf00      	nop
 8000e1e:	e004      	b.n	8000e2a <snake_setDirection+0x7a>
        break;
 8000e20:	bf00      	nop
 8000e22:	e002      	b.n	8000e2a <snake_setDirection+0x7a>
        break;
 8000e24:	bf00      	nop
 8000e26:	e000      	b.n	8000e2a <snake_setDirection+0x7a>
        break;
 8000e28:	bf00      	nop
    }

}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000009c 	.word	0x2000009c

08000e3c <snake_move>:

void snake_move(char scene[1920]) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

    /* Based on the snake direction, move head one coordinate*/
	int head_x = snake_head_x;
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <snake_move+0x15c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	617b      	str	r3, [r7, #20]
	int head_y = snake_head_y;
 8000e4a:	4b54      	ldr	r3, [pc, #336]	; (8000f9c <snake_move+0x160>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
	int foodScore;

    switch(snake_direction) {
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <snake_move+0x164>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	f200 8098 	bhi.w	8000f8c <snake_move+0x150>
 8000e5c:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <snake_move+0x28>)
 8000e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e62:	bf00      	nop
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000f47 	.word	0x08000f47
 8000e6c:	08000ebb 	.word	0x08000ebb
 8000e70:	08000f01 	.word	0x08000f01
    case UP :
    	foodScore = snake_foodScore(head_x, head_y - 1, scene);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f000 f891 	bl	8000fa4 <snake_foodScore>
 8000e82:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y - 1, scene);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f7ff fef1 	bl	8000c74 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d103      	bne.n	8000ea0 <snake_move+0x64>
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff45 	bl	8000d28 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000e9e:	e076      	b.n	8000f8e <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea6:	d103      	bne.n	8000eb0 <snake_move+0x74>
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f92d 	bl	8001108 <snake_gameOver>
        break;
 8000eae:	e06e      	b.n	8000f8e <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f000 f8b4 	bl	8001020 <snake_feed>
        break;
 8000eb8:	e069      	b.n	8000f8e <snake_move+0x152>
    case DOWN :
    	foodScore = snake_foodScore(head_x, head_y + 1, scene);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f000 f86e 	bl	8000fa4 <snake_foodScore>
 8000ec8:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y+1, scene);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff fece 	bl	8000c74 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d103      	bne.n	8000ee6 <snake_move+0xaa>
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff22 	bl	8000d28 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000ee4:	e053      	b.n	8000f8e <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d103      	bne.n	8000ef6 <snake_move+0xba>
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f90a 	bl	8001108 <snake_gameOver>
        break;
 8000ef4:	e04b      	b.n	8000f8e <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	f000 f891 	bl	8001020 <snake_feed>
        break;
 8000efe:	e046      	b.n	8000f8e <snake_move+0x152>
    case LEFT :
    	foodScore = snake_foodScore(head_x - 1, head_y, scene);
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f84b 	bl	8000fa4 <snake_foodScore>
 8000f0e:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x-1, head_y, scene);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6939      	ldr	r1, [r7, #16]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff feab 	bl	8000c74 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <snake_move+0xf0>
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff feff 	bl	8000d28 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000f2a:	e030      	b.n	8000f8e <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f32:	d103      	bne.n	8000f3c <snake_move+0x100>
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f8e7 	bl	8001108 <snake_gameOver>
        break;
 8000f3a:	e028      	b.n	8000f8e <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f000 f86e 	bl	8001020 <snake_feed>
        break;
 8000f44:	e023      	b.n	8000f8e <snake_move+0x152>
    case RIGHT :
    	foodScore = snake_foodScore(head_x + 1, head_y, scene);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f828 	bl	8000fa4 <snake_foodScore>
 8000f54:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x+1, head_y, scene);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe88 	bl	8000c74 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <snake_move+0x136>
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fedc 	bl	8000d28 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000f70:	e00d      	b.n	8000f8e <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d103      	bne.n	8000f82 <snake_move+0x146>
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f8c4 	bl	8001108 <snake_gameOver>
        break;
 8000f80:	e005      	b.n	8000f8e <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f000 f84b 	bl	8001020 <snake_feed>
        break;
 8000f8a:	e000      	b.n	8000f8e <snake_move+0x152>
    default :
        break;
 8000f8c:	bf00      	nop
    }
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000a4 	.word	0x200000a4
 8000f9c:	200000a8 	.word	0x200000a8
 8000fa0:	2000009c 	.word	0x2000009c

08000fa4 <snake_foodScore>:

int snake_foodScore(int x, int y, char scene[1920]){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	/* This function checks what the next pixel is ?
	 * if next pixel is food. return score of that food
	 * if next pixel is snake. return -1 -> game over
	 * else return 0 mean next pixel is free space.
	 */
	if ( scene[80 * y + x] == 'O' ) return 1;
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b4f      	cmp	r3, #79	; 0x4f
 8000fca:	d101      	bne.n	8000fd0 <snake_foodScore+0x2c>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e021      	b.n	8001014 <snake_foodScore+0x70>
	else if ( scene[80 * y + x] == '+'  ) return 2;
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b2b      	cmp	r3, #43	; 0x2b
 8000fea:	d101      	bne.n	8000ff0 <snake_foodScore+0x4c>
 8000fec:	2302      	movs	r3, #2
 8000fee:	e011      	b.n	8001014 <snake_foodScore+0x70>
	else if ( scene[80 * y + x] == '@' ) return -1;
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b40      	cmp	r3, #64	; 0x40
 800100a:	d102      	bne.n	8001012 <snake_foodScore+0x6e>
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	e000      	b.n	8001014 <snake_foodScore+0x70>
	return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <snake_feed>:

void snake_feed(int foodScore, char scene[1920]){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	score += foodScore;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <snake_feed+0x24>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <snake_feed+0x24>)
 8001034:	6013      	str	r3, [r2, #0]
	scene_setScore(scene);
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f000 f8d2 	bl	80011e0 <scene_setScore>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200000a0 	.word	0x200000a0

08001048 <snake_newFood>:

void snake_newFood(char scene[1920]){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if ( isPlay == 1) {
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <snake_newFood+0xac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d148      	bne.n	80010ea <snake_newFood+0xa2>
		food_time ++;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <snake_newFood+0xb0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <snake_newFood+0xb0>)
 8001060:	6013      	str	r3, [r2, #0]
		int x = rand() % 80;
 8001062:	f002 ffb3 	bl	8003fcc <rand>
 8001066:	4602      	mov	r2, r0
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <snake_newFood+0xb4>)
 800106a:	fb83 1302 	smull	r1, r3, r3, r2
 800106e:	1159      	asrs	r1, r3, #5
 8001070:	17d3      	asrs	r3, r2, #31
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	460b      	mov	r3, r1
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	440b      	add	r3, r1
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	60fb      	str	r3, [r7, #12]
		int y = rand() % 24;
 8001080:	f002 ffa4 	bl	8003fcc <rand>
 8001084:	4602      	mov	r2, r0
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <snake_newFood+0xb8>)
 8001088:	fb83 1302 	smull	r1, r3, r3, r2
 800108c:	1099      	asrs	r1, r3, #2
 800108e:	17d3      	asrs	r3, r2, #31
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	460b      	mov	r3, r1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	440b      	add	r3, r1
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	60bb      	str	r3, [r7, #8]
		if ( scene[80 * y + x] == ' ' && food_time % food_constant == 0) scene[80 * y + x] = 'O';
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	461a      	mov	r2, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b20      	cmp	r3, #32
 80010b8:	d117      	bne.n	80010ea <snake_newFood+0xa2>
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <snake_newFood+0xb0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <snake_newFood+0xbc>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80010c6:	fb02 f201 	mul.w	r2, r2, r1
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10c      	bne.n	80010ea <snake_newFood+0xa2>
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	224f      	movs	r2, #79	; 0x4f
 80010e8:	701a      	strb	r2, [r3, #0]
	}
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000bc 	.word	0x200000bc
 80010f8:	200000b8 	.word	0x200000b8
 80010fc:	66666667 	.word	0x66666667
 8001100:	2aaaaaab 	.word	0x2aaaaaab
 8001104:	200000b4 	.word	0x200000b4

08001108 <snake_gameOver>:

void snake_gameOver(char scene[1920]){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	6078      	str	r0, [r7, #4]
	while ( !isEmpty( snake_x) )  { snake_dequeue(scene); }
 8001110:	e002      	b.n	8001118 <snake_gameOver+0x10>
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fe08 	bl	8000d28 <snake_dequeue>
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <snake_gameOver+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc9d 	bl	8000a5c <isEmpty>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f4      	beq.n	8001112 <snake_gameOver+0xa>
	scene_setPixelX(35, 44, 10, scene, "Game  Over", 10);
 8001128:	230a      	movs	r3, #10
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <snake_gameOver+0x54>)
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	220a      	movs	r2, #10
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	2023      	movs	r0, #35	; 0x23
 8001138:	f000 f814 	bl	8001164 <scene_setPixelX>
	scene_setPixelX(28, 52, 11, scene, "Press 'K' to start again.", 25);
 800113c:	2319      	movs	r3, #25
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <snake_gameOver+0x58>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	220b      	movs	r2, #11
 8001148:	2134      	movs	r1, #52	; 0x34
 800114a:	201c      	movs	r0, #28
 800114c:	f000 f80a 	bl	8001164 <scene_setPixelX>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200008d4 	.word	0x200008d4
 800115c:	08004070 	.word	0x08004070
 8001160:	0800407c 	.word	0x0800407c

08001164 <scene_setPixelX>:

void scene_setPixelX(int x1, int x2, int y, char scene[1920], char text[], int size){
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
	if (x1 > x2) { scene_setPixelX(x2, x1, y, scene, text, size); }
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	429a      	cmp	r2, r3
 8001178:	dd0a      	ble.n	8001190 <scene_setPixelX+0x2c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	68b8      	ldr	r0, [r7, #8]
 800118a:	f7ff ffeb 	bl	8001164 <scene_setPixelX>
 800118e:	e024      	b.n	80011da <scene_setPixelX+0x76>
	else {
		int indeX = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e019      	b.n	80011ce <scene_setPixelX+0x6a>
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	6a3a      	ldr	r2, [r7, #32]
 800119e:	18d1      	adds	r1, r2, r3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	461a      	mov	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4413      	add	r3, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	780a      	ldrb	r2, [r1, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
		indeX++;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
		if (indeX >= size) return ;
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da07      	bge.n	80011d8 <scene_setPixelX+0x74>
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3301      	adds	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dde1      	ble.n	800119a <scene_setPixelX+0x36>
 80011d6:	e000      	b.n	80011da <scene_setPixelX+0x76>
		if (indeX >= size) return ;
 80011d8:	bf00      	nop
		}
	}
}
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <scene_setScore>:

void scene_setScore(char scene[1920]){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	scene[80*22 + 0] = 'S';
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80011ee:	2253      	movs	r2, #83	; 0x53
 80011f0:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 1] = 'c';
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f203 63e1 	addw	r3, r3, #1761	; 0x6e1
 80011f8:	2263      	movs	r2, #99	; 0x63
 80011fa:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 2] = 'o';
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f203 63e2 	addw	r3, r3, #1762	; 0x6e2
 8001202:	226f      	movs	r2, #111	; 0x6f
 8001204:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 3] = 'r';
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f203 63e3 	addw	r3, r3, #1763	; 0x6e3
 800120c:	2272      	movs	r2, #114	; 0x72
 800120e:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 4] = 'e';
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8001216:	2265      	movs	r2, #101	; 0x65
 8001218:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 6] = ':';
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f203 63e6 	addw	r3, r3, #1766	; 0x6e6
 8001220:	223a      	movs	r2, #58	; 0x3a
 8001222:	701a      	strb	r2, [r3, #0]
	int i1 = score%10;
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <scene_setScore+0xe8>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <scene_setScore+0xec>)
 800122a:	fb83 1302 	smull	r1, r3, r3, r2
 800122e:	1099      	asrs	r1, r3, #2
 8001230:	17d3      	asrs	r3, r2, #31
 8001232:	1ac9      	subs	r1, r1, r3
 8001234:	460b      	mov	r3, r1
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
	int i2 = (score%100) / 10;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <scene_setScore+0xe8>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <scene_setScore+0xf0>)
 8001246:	fb83 1302 	smull	r1, r3, r3, r2
 800124a:	1159      	asrs	r1, r3, #5
 800124c:	17d3      	asrs	r3, r2, #31
 800124e:	1acb      	subs	r3, r1, r3
 8001250:	2164      	movs	r1, #100	; 0x64
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <scene_setScore+0xec>)
 800125a:	fb82 1203 	smull	r1, r2, r2, r3
 800125e:	1092      	asrs	r2, r2, #2
 8001260:	17db      	asrs	r3, r3, #31
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	613b      	str	r3, [r7, #16]
	int i3 = (score%1000) / 100;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <scene_setScore+0xe8>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <scene_setScore+0xf4>)
 800126c:	fb83 1302 	smull	r1, r3, r3, r2
 8001270:	1199      	asrs	r1, r3, #6
 8001272:	17d3      	asrs	r3, r2, #31
 8001274:	1acb      	subs	r3, r1, r3
 8001276:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <scene_setScore+0xf0>)
 8001282:	fb82 1203 	smull	r1, r2, r2, r3
 8001286:	1152      	asrs	r2, r2, #5
 8001288:	17db      	asrs	r3, r3, #31
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	60fb      	str	r3, [r7, #12]

	scene[80*22 + 10] = intTOchar(i1);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f203 64ea 	addw	r4, r3, #1770	; 0x6ea
 8001294:	6978      	ldr	r0, [r7, #20]
 8001296:	f000 f86f 	bl	8001378 <intTOchar>
 800129a:	4603      	mov	r3, r0
 800129c:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 9] = intTOchar(i2);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f203 64e9 	addw	r4, r3, #1769	; 0x6e9
 80012a4:	6938      	ldr	r0, [r7, #16]
 80012a6:	f000 f867 	bl	8001378 <intTOchar>
 80012aa:	4603      	mov	r3, r0
 80012ac:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 8] = intTOchar(i3);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f503 64dd 	add.w	r4, r3, #1768	; 0x6e8
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f000 f85f 	bl	8001378 <intTOchar>
 80012ba:	4603      	mov	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000a0 	.word	0x200000a0
 80012cc:	66666667 	.word	0x66666667
 80012d0:	51eb851f 	.word	0x51eb851f
 80012d4:	10624dd3 	.word	0x10624dd3

080012d8 <scene_mainmenu>:

void scene_mainmenu(char scene[1920]){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af02      	add	r7, sp, #8
 80012de:	6078      	str	r0, [r7, #4]
	/* For observing the beginning of a pixel */
	scene_setPixelX(0, 4, 0, scene, "START", 5);
 80012e0:	2305      	movs	r3, #5
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <scene_mainmenu+0x54>)
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	2104      	movs	r1, #4
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff ff38 	bl	8001164 <scene_setPixelX>
	scene_setPixelX(36, 44, 10, scene, "SNAKE  GO", 9);
 80012f4:	2309      	movs	r3, #9
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <scene_mainmenu+0x58>)
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	220a      	movs	r2, #10
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	2024      	movs	r0, #36	; 0x24
 8001304:	f7ff ff2e 	bl	8001164 <scene_setPixelX>
	scene_setPixelX(25, 52, 11, scene, "Press 'K' to start the game.", 28);
 8001308:	231c      	movs	r3, #28
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <scene_mainmenu+0x5c>)
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	220b      	movs	r2, #11
 8001314:	2134      	movs	r1, #52	; 0x34
 8001316:	2019      	movs	r0, #25
 8001318:	f7ff ff24 	bl	8001164 <scene_setPixelX>
	isPlay = 0;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <scene_mainmenu+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08004098 	.word	0x08004098
 8001330:	080040a0 	.word	0x080040a0
 8001334:	080040ac 	.word	0x080040ac
 8001338:	200000bc 	.word	0x200000bc

0800133c <scene_clear>:

void scene_clear(char scene[1920]){
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	for(int i=0;i<1920; i++) scene[i] = ' ';
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e007      	b.n	800135a <scene_clear+0x1e>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	2220      	movs	r2, #32
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001360:	dbf3      	blt.n	800134a <scene_clear+0xe>
	isPlay = 0;
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <scene_clear+0x38>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	200000bc 	.word	0x200000bc

08001378 <intTOchar>:

char intTOchar(int integers){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	if (integers == 1) return '1';
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <intTOchar+0x12>
 8001386:	2331      	movs	r3, #49	; 0x31
 8001388:	e028      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 2) return '2';
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d101      	bne.n	8001394 <intTOchar+0x1c>
 8001390:	2332      	movs	r3, #50	; 0x32
 8001392:	e023      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 3) return '3';
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d101      	bne.n	800139e <intTOchar+0x26>
 800139a:	2333      	movs	r3, #51	; 0x33
 800139c:	e01e      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 4) return '4';
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d101      	bne.n	80013a8 <intTOchar+0x30>
 80013a4:	2334      	movs	r3, #52	; 0x34
 80013a6:	e019      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 5) return '5';
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d101      	bne.n	80013b2 <intTOchar+0x3a>
 80013ae:	2335      	movs	r3, #53	; 0x35
 80013b0:	e014      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 6) return '6';
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d101      	bne.n	80013bc <intTOchar+0x44>
 80013b8:	2336      	movs	r3, #54	; 0x36
 80013ba:	e00f      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 7) return '7';
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b07      	cmp	r3, #7
 80013c0:	d101      	bne.n	80013c6 <intTOchar+0x4e>
 80013c2:	2337      	movs	r3, #55	; 0x37
 80013c4:	e00a      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 8) return '8';
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d101      	bne.n	80013d0 <intTOchar+0x58>
 80013cc:	2338      	movs	r3, #56	; 0x38
 80013ce:	e005      	b.n	80013dc <intTOchar+0x64>
	else if (integers == 9) return '9';
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b09      	cmp	r3, #9
 80013d4:	d101      	bne.n	80013da <intTOchar+0x62>
 80013d6:	2339      	movs	r3, #57	; 0x39
 80013d8:	e000      	b.n	80013dc <intTOchar+0x64>
	else return '0';
 80013da:	2330      	movs	r3, #48	; 0x30
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f000 faba 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_TIM_Base_MspInit+0x3c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10d      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_TIM_Base_MspInit+0x40>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a09      	ldr	r2, [pc, #36]	; (8001478 <HAL_TIM_Base_MspInit+0x40>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_TIM_Base_MspInit+0x40>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40000800 	.word	0x40000800
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_TIM_MspPostInit+0x68>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d11e      	bne.n	80014dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_TIM_MspPostInit+0x6c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_TIM_MspPostInit+0x6c>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_TIM_MspPostInit+0x6c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_TIM_MspPostInit+0x70>)
 80014d8:	f000 fac6 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40000800 	.word	0x40000800
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_UART_MspInit+0x94>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d133      	bne.n	800157a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_UART_MspInit+0x98>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_UART_MspInit+0x98>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_UART_MspInit+0x98>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0x98>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_UART_MspInit+0x98>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_UART_MspInit+0x98>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_UART_MspInit+0x9c>)
 8001566:	f000 fa7f 	bl	8001a68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	2026      	movs	r0, #38	; 0x26
 8001570:	f000 fa21 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001574:	2026      	movs	r0, #38	; 0x26
 8001576:	f000 fa3a 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f8ca 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <USART2_IRQHandler+0x10>)
 80015f2:	f001 fe65 	bl	80032c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000110 	.word	0x20000110

08001600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x50>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x16>
		heap_end = &end;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <_sbrk+0x50>)
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <_sbrk+0x54>)
 8001614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <_sbrk+0x50>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <_sbrk+0x50>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	466a      	mov	r2, sp
 8001626:	4293      	cmp	r3, r2
 8001628:	d907      	bls.n	800163a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800162a:	f002 fc3b 	bl	8003ea4 <__errno>
 800162e:	4602      	mov	r2, r0
 8001630:	230c      	movs	r3, #12
 8001632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	e006      	b.n	8001648 <_sbrk+0x48>
	}

	heap_end += incr;
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <_sbrk+0x50>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a03      	ldr	r2, [pc, #12]	; (8001650 <_sbrk+0x50>)
 8001644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000c0 	.word	0x200000c0
 8001654:	200008e0 	.word	0x200008e0

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <SystemInit+0x28>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <SystemInit+0x28>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SystemInit+0x28>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	609a      	str	r2, [r3, #8]
#endif
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr  r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd3 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f002 fbfd 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ff0f 	bl	80004d8 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c0:	080040f4 	.word	0x080040f4
  ldr  r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80016cc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80016d0:	200008e0 	.word	0x200008e0

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f94d 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fe6c 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f965 	bl	8001a0a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f92d 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000010 	.word	0x20000010
 8001774:	20000018 	.word	0x20000018
 8001778:	20000014 	.word	0x20000014

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000018 	.word	0x20000018
 80017a0:	200008d8 	.word	0x200008d8

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200008d8 	.word	0x200008d8

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_Delay+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000018 	.word	0x20000018

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff3e 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff31 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d004      	beq.n	8001a40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e00c      	b.n	8001a5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2205      	movs	r2, #5
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e159      	b.n	8001d38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8148 	bne.w	8001d32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_GPIO_Init+0x5a>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ab6:	2b11      	cmp	r3, #17
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0xfc>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b12      	cmp	r3, #18
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a2 	beq.w	8001d32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c0a:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	3302      	adds	r3, #2
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2ec>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x202>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x1fe>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <HAL_GPIO_Init+0x2f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x1fa>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a45      	ldr	r2, [pc, #276]	; (8001d60 <HAL_GPIO_Init+0x2f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x1f6>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a44      	ldr	r2, [pc, #272]	; (8001d64 <HAL_GPIO_Init+0x2fc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x1f2>
 8001c56:	2304      	movs	r3, #4
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x204>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7c:	4934      	ldr	r1, [pc, #208]	; (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cae:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd8:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_GPIO_Init+0x300>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	f67f aea2 	bls.w	8001a84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	3724      	adds	r7, #36	; 0x24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40013800 	.word	0x40013800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40013c00 	.word	0x40013c00

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	619a      	str	r2, [r3, #24]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e25b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d075      	beq.n	8001eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dbe:	4ba3      	ldr	r3, [pc, #652]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d00c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4ba0      	ldr	r3, [pc, #640]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dd6:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	4b99      	ldr	r3, [pc, #612]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d05b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x108>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d157      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e236      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e04:	d106      	bne.n	8001e14 <HAL_RCC_OscConfig+0x74>
 8001e06:	4b91      	ldr	r3, [pc, #580]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a90      	ldr	r2, [pc, #576]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x98>
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8a      	ldr	r2, [pc, #552]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb0>
 8001e38:	4b84      	ldr	r3, [pc, #528]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a83      	ldr	r2, [pc, #524]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b81      	ldr	r3, [pc, #516]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a80      	ldr	r2, [pc, #512]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fca4 	bl	80017a4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fca0 	bl	80017a4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1fb      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fc90 	bl	80017a4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fc8c 	bl	80017a4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1e7      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0xe8>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1bb      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4952      	ldr	r1, [pc, #328]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff fc45 	bl	80017a4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fc41 	bl	80017a4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e19c      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4940      	ldr	r1, [pc, #256]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_OscConfig+0x2b0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc24 	bl	80017a4 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc20 	bl	80017a4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d030      	beq.n	8001fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x2b4>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fc04 	bl	80017a4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fc00 	bl	80017a4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e15b      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x200>
 8001fbe:	e015      	b.n	8001fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x2b4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fbed 	bl	80017a4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fce:	f7ff fbe9 	bl	80017a4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e144      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a0 	beq.w	800213a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10f      	bne.n	800202a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d121      	bne.n	800207a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_RCC_OscConfig+0x2b8>)
 800203c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002042:	f7ff fbaf 	bl	80017a4 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	e011      	b.n	800206e <HAL_RCC_OscConfig+0x2ce>
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
 8002058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205c:	f7ff fba2 	bl	80017a4 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0fd      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4d4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x2f0>
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	e01c      	b.n	80020ca <HAL_RCC_OscConfig+0x32a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x312>
 8002098:	4b77      	ldr	r3, [pc, #476]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a76      	ldr	r2, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	4b74      	ldr	r3, [pc, #464]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a8:	4a73      	ldr	r2, [pc, #460]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	6713      	str	r3, [r2, #112]	; 0x70
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x32a>
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a70      	ldr	r2, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
 80020be:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a6d      	ldr	r2, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7ff fb67 	bl	80017a4 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fb63 	bl	80017a4 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0bc      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ee      	beq.n	80020da <HAL_RCC_OscConfig+0x33a>
 80020fc:	e014      	b.n	8002128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fb51 	bl	80017a4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff fb4d 	bl	80017a4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	; 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0a6      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	4b56      	ldr	r3, [pc, #344]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ee      	bne.n	8002106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a51      	ldr	r2, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8092 	beq.w	8002268 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d05c      	beq.n	800220a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d141      	bne.n	80021dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fb21 	bl	80017a4 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff fb1d 	bl	80017a4 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e078      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	019b      	lsls	r3, r3, #6
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	061b      	lsls	r3, r3, #24
 80021a8:	4933      	ldr	r1, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff faf6 	bl	80017a4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff faf2 	bl	80017a4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e04d      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x41c>
 80021da:	e045      	b.n	8002268 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x4dc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff fadf 	bl	80017a4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff fadb 	bl	80017a4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e036      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x44a>
 8002208:	e02e      	b.n	8002268 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e029      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_RCC_OscConfig+0x4d8>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	429a      	cmp	r2, r3
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d115      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800223e:	4013      	ands	r3, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40007000 	.word	0x40007000
 8002278:	40023800 	.word	0x40023800
 800227c:	42470060 	.word	0x42470060

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0cc      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b68      	ldr	r3, [pc, #416]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d90c      	bls.n	80022bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b65      	ldr	r3, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d044      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d119      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d003      	beq.n	800233e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800233a:	2b03      	cmp	r3, #3
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b3f      	ldr	r3, [pc, #252]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e06f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7ff fa18 	bl	80017a4 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7ff fa14 	bl	80017a4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e04f      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20c      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4601      	mov	r1, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	fa21 f303 	lsr.w	r3, r1, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f978 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40023c00 	.word	0x40023c00
 800243c:	40023800 	.word	0x40023800
 8002440:	080040cc 	.word	0x080040cc
 8002444:	20000010 	.word	0x20000010
 8002448:	20000014 	.word	0x20000014

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d007      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x32>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d008      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x38>
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b4 	bne.w	80025e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800247a:	60bb      	str	r3, [r7, #8]
       break;
 800247c:	e0b3      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002480:	60bb      	str	r3, [r7, #8]
      break;
 8002482:	e0b0      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002484:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d04a      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	ea03 0501 	and.w	r5, r3, r1
 80024b0:	ea04 0602 	and.w	r6, r4, r2
 80024b4:	4629      	mov	r1, r5
 80024b6:	4632      	mov	r2, r6
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f04f 0400 	mov.w	r4, #0
 80024c0:	0154      	lsls	r4, r2, #5
 80024c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024c6:	014b      	lsls	r3, r1, #5
 80024c8:	4619      	mov	r1, r3
 80024ca:	4622      	mov	r2, r4
 80024cc:	1b49      	subs	r1, r1, r5
 80024ce:	eb62 0206 	sbc.w	r2, r2, r6
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f04f 0400 	mov.w	r4, #0
 80024da:	0194      	lsls	r4, r2, #6
 80024dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e0:	018b      	lsls	r3, r1, #6
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	eb64 0402 	sbc.w	r4, r4, r2
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	00e2      	lsls	r2, r4, #3
 80024f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024f6:	00d9      	lsls	r1, r3, #3
 80024f8:	460b      	mov	r3, r1
 80024fa:	4614      	mov	r4, r2
 80024fc:	195b      	adds	r3, r3, r5
 80024fe:	eb44 0406 	adc.w	r4, r4, r6
 8002502:	f04f 0100 	mov.w	r1, #0
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	0262      	lsls	r2, r4, #9
 800250c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002510:	0259      	lsls	r1, r3, #9
 8002512:	460b      	mov	r3, r1
 8002514:	4614      	mov	r4, r2
 8002516:	4618      	mov	r0, r3
 8002518:	4621      	mov	r1, r4
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f04f 0400 	mov.w	r4, #0
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	f7fd fe58 	bl	80001d8 <__aeabi_uldivmod>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e049      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	f04f 0400 	mov.w	r4, #0
 800253a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	ea03 0501 	and.w	r5, r3, r1
 8002546:	ea04 0602 	and.w	r6, r4, r2
 800254a:	4629      	mov	r1, r5
 800254c:	4632      	mov	r2, r6
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f04f 0400 	mov.w	r4, #0
 8002556:	0154      	lsls	r4, r2, #5
 8002558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800255c:	014b      	lsls	r3, r1, #5
 800255e:	4619      	mov	r1, r3
 8002560:	4622      	mov	r2, r4
 8002562:	1b49      	subs	r1, r1, r5
 8002564:	eb62 0206 	sbc.w	r2, r2, r6
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	f04f 0400 	mov.w	r4, #0
 8002570:	0194      	lsls	r4, r2, #6
 8002572:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002576:	018b      	lsls	r3, r1, #6
 8002578:	1a5b      	subs	r3, r3, r1
 800257a:	eb64 0402 	sbc.w	r4, r4, r2
 800257e:	f04f 0100 	mov.w	r1, #0
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	00e2      	lsls	r2, r4, #3
 8002588:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800258c:	00d9      	lsls	r1, r3, #3
 800258e:	460b      	mov	r3, r1
 8002590:	4614      	mov	r4, r2
 8002592:	195b      	adds	r3, r3, r5
 8002594:	eb44 0406 	adc.w	r4, r4, r6
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	02a2      	lsls	r2, r4, #10
 80025a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025a6:	0299      	lsls	r1, r3, #10
 80025a8:	460b      	mov	r3, r1
 80025aa:	4614      	mov	r4, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	4621      	mov	r1, r4
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f04f 0400 	mov.w	r4, #0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4623      	mov	r3, r4
 80025ba:	f7fd fe0d 	bl	80001d8 <__aeabi_uldivmod>
 80025be:	4603      	mov	r3, r0
 80025c0:	460c      	mov	r4, r1
 80025c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	60bb      	str	r3, [r7, #8]
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025e2:	60bb      	str	r3, [r7, #8]
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	68bb      	ldr	r3, [r7, #8]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	007a1200 	.word	0x007a1200

080025fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_GetHCLKFreq+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000010 	.word	0x20000010

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002618:	f7ff fff0 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 800261c:	4601      	mov	r1, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	080040dc 	.word	0x080040dc

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002640:	f7ff ffdc 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002644:	4601      	mov	r1, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0b5b      	lsrs	r3, r3, #13
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	080040dc 	.word	0x080040dc

08002664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e01d      	b.n	80026b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fed4 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 f9bc 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01d      	b.n	8002708 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f815 	bl	8002710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3304      	adds	r3, #4
 80026f6:	4619      	mov	r1, r3
 80026f8:	4610      	mov	r0, r2
 80026fa:	f000 f991 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800273a:	2302      	movs	r3, #2
 800273c:	e0b4      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	f200 809f 	bhi.w	8002894 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002791 	.word	0x08002791
 8002760:	08002895 	.word	0x08002895
 8002764:	08002895 	.word	0x08002895
 8002768:	08002895 	.word	0x08002895
 800276c:	080027d1 	.word	0x080027d1
 8002770:	08002895 	.word	0x08002895
 8002774:	08002895 	.word	0x08002895
 8002778:	08002895 	.word	0x08002895
 800277c:	08002813 	.word	0x08002813
 8002780:	08002895 	.word	0x08002895
 8002784:	08002895 	.word	0x08002895
 8002788:	08002895 	.word	0x08002895
 800278c:	08002853 	.word	0x08002853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f9c2 	bl	8002b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6999      	ldr	r1, [r3, #24]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
      break;
 80027ce:	e062      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fa08 	bl	8002bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	619a      	str	r2, [r3, #24]
      break;
 8002810:	e041      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa53 	bl	8002cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0204 	bic.w	r2, r2, #4
 800283c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      break;
 8002850:	e021      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa9d 	bl	8002d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	61da      	str	r2, [r3, #28]
      break;
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002894:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_ConfigClockSource+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0a6      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x166>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d067      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x120>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d80b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x6c>
 8002904:	2b10      	cmp	r3, #16
 8002906:	d073      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d802      	bhi.n	8002912 <HAL_TIM_ConfigClockSource+0x62>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d06f      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002910:	e078      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002912:	2b20      	cmp	r3, #32
 8002914:	d06c      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d06a      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800291a:	e073      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d00d      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x8c>
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d804      	bhi.n	800292e <HAL_TIM_ConfigClockSource+0x7e>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d033      	beq.n	8002990 <HAL_TIM_ConfigClockSource+0xe0>
 8002928:	2b60      	cmp	r3, #96	; 0x60
 800292a:	d041      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800292c:	e06a      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d066      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x152>
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d017      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800293a:	e063      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f000 faee 	bl	8002f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800295e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e04c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 fad7 	bl	8002f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298c:	609a      	str	r2, [r3, #8]
      break;
 800298e:	e039      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	461a      	mov	r2, r3
 800299e:	f000 fa4b 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2150      	movs	r1, #80	; 0x50
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 faa4 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ae:	e029      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f000 fa6a 	bl	8002e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2160      	movs	r1, #96	; 0x60
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa94 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ce:	e019      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	f000 fa2b 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fa84 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ee:	e009      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fa7b 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00f      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d00b      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <TIM_Base_SetConfig+0xe8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <TIM_Base_SetConfig+0xec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <TIM_Base_SetConfig+0xf0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d108      	bne.n	8002a6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01b      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d017      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <TIM_Base_SetConfig+0xe8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <TIM_Base_SetConfig+0xec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00f      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <TIM_Base_SetConfig+0xf0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <TIM_Base_SetConfig+0xf4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <TIM_Base_SetConfig+0xf8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <TIM_Base_SetConfig+0xfc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d103      	bne.n	8002af0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	615a      	str	r2, [r3, #20]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800

08002b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0201 	bic.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10c      	bne.n	8002b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0308 	bic.w	r3, r3, #8
 8002b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d111      	bne.n	8002bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40010000 	.word	0x40010000

08002bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0210 	bic.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <TIM_OC2_SetConfig+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <TIM_OC2_SetConfig+0xd4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <TIM_OC3_SetConfig+0xd0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10d      	bne.n	8002d3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <TIM_OC3_SetConfig+0xd0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d113      	bne.n	8002d6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40010000 	.word	0x40010000

08002d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	031b      	lsls	r3, r3, #12
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <TIM_OC4_SetConfig+0x9c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000

08002e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 030a 	bic.w	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b087      	sub	sp, #28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0210 	bic.w	r2, r3, #16
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	031b      	lsls	r3, r3, #12
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e050      	b.n	8003026 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d018      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d013      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d00e      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a16      	ldr	r2, [pc, #88]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d009      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a15      	ldr	r2, [pc, #84]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10c      	bne.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003000:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000
 8003038:	40000400 	.word	0x40000400
 800303c:	40000800 	.word	0x40000800
 8003040:	40000c00 	.word	0x40000c00
 8003044:	40014000 	.word	0x40014000

08003048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e03f      	b.n	80030da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe fa3e 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2224      	movs	r2, #36	; 0x24
 8003078:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb8d 	bl	80037ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b088      	sub	sp, #32
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	f040 8083 	bne.w	800320a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_UART_Transmit+0x2e>
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e07b      	b.n	800320c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_UART_Transmit+0x40>
 800311e:	2302      	movs	r3, #2
 8003120:	e074      	b.n	800320c <HAL_UART_Transmit+0x12a>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2221      	movs	r2, #33	; 0x21
 8003134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003138:	f7fe fb34 	bl	80017a4 <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	88fa      	ldrh	r2, [r7, #6]
 8003148:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003152:	e042      	b.n	80031da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d122      	bne.n	80031b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	2180      	movs	r1, #128	; 0x80
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 f9ac 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e042      	b.n	800320c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003198:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d103      	bne.n	80031aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3302      	adds	r3, #2
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	e017      	b.n	80031da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e013      	b.n	80031da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f989 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e01f      	b.n	800320c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	60ba      	str	r2, [r7, #8]
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1b7      	bne.n	8003154 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f970 	bl	80034d4 <UART_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e006      	b.n	800320c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b20      	cmp	r3, #32
 800322c:	d140      	bne.n	80032b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_UART_Receive_IT+0x26>
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e039      	b.n	80032b2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_UART_Receive_IT+0x38>
 8003248:	2302      	movs	r3, #2
 800324a:	e032      	b.n	80032b2 <HAL_UART_Receive_IT+0x9e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2222      	movs	r2, #34	; 0x22
 8003270:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0220 	orr.w	r2, r2, #32
 80032aa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e000      	b.n	80032b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
  }
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_UART_IRQHandler+0x52>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f9cc 	bl	80036a8 <UART_Receive_IT>
      return;
 8003310:	e0d1      	b.n	80034b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80b0 	beq.w	800347a <HAL_UART_IRQHandler+0x1ba>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_UART_IRQHandler+0x70>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80a5 	beq.w	800347a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_UART_IRQHandler+0x90>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	f043 0201 	orr.w	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_UART_IRQHandler+0xb0>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	f043 0202 	orr.w	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_UART_IRQHandler+0xd0>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00f      	beq.n	80033ba <HAL_UART_IRQHandler+0xfa>
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <HAL_UART_IRQHandler+0xee>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	f043 0208 	orr.w	r2, r3, #8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d078      	beq.n	80034b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f966 	bl	80036a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_UART_IRQHandler+0x144>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d031      	beq.n	8003468 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8af 	bl	8003568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003414:	2b40      	cmp	r3, #64	; 0x40
 8003416:	d123      	bne.n	8003460 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695a      	ldr	r2, [r3, #20]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003426:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003434:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_UART_IRQHandler+0x1fc>)
 8003436:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe faf0 	bl	8001a22 <HAL_DMA_Abort_IT>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003452:	4610      	mov	r0, r2
 8003454:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	e00e      	b.n	8003476 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f831 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345e:	e00a      	b.n	8003476 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f82d 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003466:	e006      	b.n	8003476 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f829 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003474:	e01e      	b.n	80034b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003476:	bf00      	nop
    return;
 8003478:	e01c      	b.n	80034b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_UART_IRQHandler+0x1d6>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f89c 	bl	80035cc <UART_Transmit_IT>
    return;
 8003494:	e00f      	b.n	80034b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_UART_IRQHandler+0x1f6>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8e4 	bl	8003678 <UART_EndTransmit_IT>
    return;
 80034b0:	bf00      	nop
 80034b2:	e000      	b.n	80034b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80034b4:	bf00      	nop
  }
}
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080035a5 	.word	0x080035a5

080034c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e4:	e02c      	b.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d028      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f4:	f7fe f956 	bl	80017a4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	429a      	cmp	r2, r3
 8003502:	d21d      	bcs.n	8003540 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003512:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00f      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	429a      	cmp	r2, r3
 800355c:	d0c3      	beq.n	80034e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800357e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff ff7e 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b21      	cmp	r3, #33	; 0x21
 80035de:	d144      	bne.n	800366a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e8:	d11a      	bne.n	8003620 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	1c9a      	adds	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	621a      	str	r2, [r3, #32]
 8003612:	e00e      	b.n	8003632 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	e008      	b.n	8003632 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	1c59      	adds	r1, r3, #1
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6211      	str	r1, [r2, #32]
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29b      	uxth	r3, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4619      	mov	r1, r3
 8003640:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003654:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003664:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fd f993 	bl	80009c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b22      	cmp	r3, #34	; 0x22
 80036ba:	d171      	bne.n	80037a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d123      	bne.n	800370e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10e      	bne.n	80036f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	e029      	b.n	8003746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e01b      	b.n	8003746 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6858      	ldr	r0, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	1c59      	adds	r1, r3, #1
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6291      	str	r1, [r2, #40]	; 0x28
 8003726:	b2c2      	uxtb	r2, r0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e00c      	b.n	8003746 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	1c58      	adds	r0, r3, #1
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	6288      	str	r0, [r1, #40]	; 0x28
 800373e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4619      	mov	r1, r3
 8003754:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003756:	2b00      	cmp	r3, #0
 8003758:	d120      	bne.n	800379c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0220 	bic.w	r2, r2, #32
 8003768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f852 	bl	800083c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e002      	b.n	80037a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037ee:	f023 030c 	bic.w	r3, r3, #12
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381a:	f040 818b 	bne.w	8003b34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4ac1      	ldr	r2, [pc, #772]	; (8003b28 <UART_SetConfig+0x37c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d005      	beq.n	8003834 <UART_SetConfig+0x88>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4abf      	ldr	r2, [pc, #764]	; (8003b2c <UART_SetConfig+0x380>)
 800382e:	4293      	cmp	r3, r2
 8003830:	f040 80bd 	bne.w	80039ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7fe ff02 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003838:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	461d      	mov	r5, r3
 800383e:	f04f 0600 	mov.w	r6, #0
 8003842:	46a8      	mov	r8, r5
 8003844:	46b1      	mov	r9, r6
 8003846:	eb18 0308 	adds.w	r3, r8, r8
 800384a:	eb49 0409 	adc.w	r4, r9, r9
 800384e:	4698      	mov	r8, r3
 8003850:	46a1      	mov	r9, r4
 8003852:	eb18 0805 	adds.w	r8, r8, r5
 8003856:	eb49 0906 	adc.w	r9, r9, r6
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003866:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800386a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800386e:	4688      	mov	r8, r1
 8003870:	4691      	mov	r9, r2
 8003872:	eb18 0005 	adds.w	r0, r8, r5
 8003876:	eb49 0106 	adc.w	r1, r9, r6
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	461d      	mov	r5, r3
 8003880:	f04f 0600 	mov.w	r6, #0
 8003884:	196b      	adds	r3, r5, r5
 8003886:	eb46 0406 	adc.w	r4, r6, r6
 800388a:	461a      	mov	r2, r3
 800388c:	4623      	mov	r3, r4
 800388e:	f7fc fca3 	bl	80001d8 <__aeabi_uldivmod>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	461a      	mov	r2, r3
 8003898:	4ba5      	ldr	r3, [pc, #660]	; (8003b30 <UART_SetConfig+0x384>)
 800389a:	fba3 2302 	umull	r2, r3, r3, r2
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	461d      	mov	r5, r3
 80038a8:	f04f 0600 	mov.w	r6, #0
 80038ac:	46a9      	mov	r9, r5
 80038ae:	46b2      	mov	sl, r6
 80038b0:	eb19 0309 	adds.w	r3, r9, r9
 80038b4:	eb4a 040a 	adc.w	r4, sl, sl
 80038b8:	4699      	mov	r9, r3
 80038ba:	46a2      	mov	sl, r4
 80038bc:	eb19 0905 	adds.w	r9, r9, r5
 80038c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d8:	4689      	mov	r9, r1
 80038da:	4692      	mov	sl, r2
 80038dc:	eb19 0005 	adds.w	r0, r9, r5
 80038e0:	eb4a 0106 	adc.w	r1, sl, r6
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	461d      	mov	r5, r3
 80038ea:	f04f 0600 	mov.w	r6, #0
 80038ee:	196b      	adds	r3, r5, r5
 80038f0:	eb46 0406 	adc.w	r4, r6, r6
 80038f4:	461a      	mov	r2, r3
 80038f6:	4623      	mov	r3, r4
 80038f8:	f7fc fc6e 	bl	80001d8 <__aeabi_uldivmod>
 80038fc:	4603      	mov	r3, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	461a      	mov	r2, r3
 8003902:	4b8b      	ldr	r3, [pc, #556]	; (8003b30 <UART_SetConfig+0x384>)
 8003904:	fba3 1302 	umull	r1, r3, r3, r2
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	2164      	movs	r1, #100	; 0x64
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	3332      	adds	r3, #50	; 0x32
 8003916:	4a86      	ldr	r2, [pc, #536]	; (8003b30 <UART_SetConfig+0x384>)
 8003918:	fba2 2303 	umull	r2, r3, r2, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003924:	4498      	add	r8, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	461d      	mov	r5, r3
 800392a:	f04f 0600 	mov.w	r6, #0
 800392e:	46a9      	mov	r9, r5
 8003930:	46b2      	mov	sl, r6
 8003932:	eb19 0309 	adds.w	r3, r9, r9
 8003936:	eb4a 040a 	adc.w	r4, sl, sl
 800393a:	4699      	mov	r9, r3
 800393c:	46a2      	mov	sl, r4
 800393e:	eb19 0905 	adds.w	r9, r9, r5
 8003942:	eb4a 0a06 	adc.w	sl, sl, r6
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003952:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003956:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800395a:	4689      	mov	r9, r1
 800395c:	4692      	mov	sl, r2
 800395e:	eb19 0005 	adds.w	r0, r9, r5
 8003962:	eb4a 0106 	adc.w	r1, sl, r6
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	461d      	mov	r5, r3
 800396c:	f04f 0600 	mov.w	r6, #0
 8003970:	196b      	adds	r3, r5, r5
 8003972:	eb46 0406 	adc.w	r4, r6, r6
 8003976:	461a      	mov	r2, r3
 8003978:	4623      	mov	r3, r4
 800397a:	f7fc fc2d 	bl	80001d8 <__aeabi_uldivmod>
 800397e:	4603      	mov	r3, r0
 8003980:	460c      	mov	r4, r1
 8003982:	461a      	mov	r2, r3
 8003984:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <UART_SetConfig+0x384>)
 8003986:	fba3 1302 	umull	r1, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2164      	movs	r1, #100	; 0x64
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a65      	ldr	r2, [pc, #404]	; (8003b30 <UART_SetConfig+0x384>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 0207 	and.w	r2, r3, #7
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4442      	add	r2, r8
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e26f      	b.n	8003e8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ae:	f7fe fe31 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 80039b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	461d      	mov	r5, r3
 80039b8:	f04f 0600 	mov.w	r6, #0
 80039bc:	46a8      	mov	r8, r5
 80039be:	46b1      	mov	r9, r6
 80039c0:	eb18 0308 	adds.w	r3, r8, r8
 80039c4:	eb49 0409 	adc.w	r4, r9, r9
 80039c8:	4698      	mov	r8, r3
 80039ca:	46a1      	mov	r9, r4
 80039cc:	eb18 0805 	adds.w	r8, r8, r5
 80039d0:	eb49 0906 	adc.w	r9, r9, r6
 80039d4:	f04f 0100 	mov.w	r1, #0
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039e8:	4688      	mov	r8, r1
 80039ea:	4691      	mov	r9, r2
 80039ec:	eb18 0005 	adds.w	r0, r8, r5
 80039f0:	eb49 0106 	adc.w	r1, r9, r6
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	461d      	mov	r5, r3
 80039fa:	f04f 0600 	mov.w	r6, #0
 80039fe:	196b      	adds	r3, r5, r5
 8003a00:	eb46 0406 	adc.w	r4, r6, r6
 8003a04:	461a      	mov	r2, r3
 8003a06:	4623      	mov	r3, r4
 8003a08:	f7fc fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <UART_SetConfig+0x384>)
 8003a14:	fba3 2302 	umull	r2, r3, r3, r2
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	461d      	mov	r5, r3
 8003a22:	f04f 0600 	mov.w	r6, #0
 8003a26:	46a9      	mov	r9, r5
 8003a28:	46b2      	mov	sl, r6
 8003a2a:	eb19 0309 	adds.w	r3, r9, r9
 8003a2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003a32:	4699      	mov	r9, r3
 8003a34:	46a2      	mov	sl, r4
 8003a36:	eb19 0905 	adds.w	r9, r9, r5
 8003a3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a3e:	f04f 0100 	mov.w	r1, #0
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a52:	4689      	mov	r9, r1
 8003a54:	4692      	mov	sl, r2
 8003a56:	eb19 0005 	adds.w	r0, r9, r5
 8003a5a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461d      	mov	r5, r3
 8003a64:	f04f 0600 	mov.w	r6, #0
 8003a68:	196b      	adds	r3, r5, r5
 8003a6a:	eb46 0406 	adc.w	r4, r6, r6
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4623      	mov	r3, r4
 8003a72:	f7fc fbb1 	bl	80001d8 <__aeabi_uldivmod>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <UART_SetConfig+0x384>)
 8003a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2164      	movs	r1, #100	; 0x64
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	3332      	adds	r3, #50	; 0x32
 8003a90:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <UART_SetConfig+0x384>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a9e:	4498      	add	r8, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	f04f 0600 	mov.w	r6, #0
 8003aa8:	46a9      	mov	r9, r5
 8003aaa:	46b2      	mov	sl, r6
 8003aac:	eb19 0309 	adds.w	r3, r9, r9
 8003ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ab4:	4699      	mov	r9, r3
 8003ab6:	46a2      	mov	sl, r4
 8003ab8:	eb19 0905 	adds.w	r9, r9, r5
 8003abc:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ad4:	4689      	mov	r9, r1
 8003ad6:	4692      	mov	sl, r2
 8003ad8:	eb19 0005 	adds.w	r0, r9, r5
 8003adc:	eb4a 0106 	adc.w	r1, sl, r6
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	461d      	mov	r5, r3
 8003ae6:	f04f 0600 	mov.w	r6, #0
 8003aea:	196b      	adds	r3, r5, r5
 8003aec:	eb46 0406 	adc.w	r4, r6, r6
 8003af0:	461a      	mov	r2, r3
 8003af2:	4623      	mov	r3, r4
 8003af4:	f7fc fb70 	bl	80001d8 <__aeabi_uldivmod>
 8003af8:	4603      	mov	r3, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <UART_SetConfig+0x384>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	; 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <UART_SetConfig+0x384>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 0207 	and.w	r2, r3, #7
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4442      	add	r2, r8
 8003b24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b26:	e1b2      	b.n	8003e8e <UART_SetConfig+0x6e2>
 8003b28:	40011000 	.word	0x40011000
 8003b2c:	40011400 	.word	0x40011400
 8003b30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4ad7      	ldr	r2, [pc, #860]	; (8003e98 <UART_SetConfig+0x6ec>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d005      	beq.n	8003b4a <UART_SetConfig+0x39e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4ad6      	ldr	r2, [pc, #856]	; (8003e9c <UART_SetConfig+0x6f0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	f040 80d1 	bne.w	8003cec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b4a:	f7fe fd77 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003b4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	469a      	mov	sl, r3
 8003b54:	f04f 0b00 	mov.w	fp, #0
 8003b58:	46d0      	mov	r8, sl
 8003b5a:	46d9      	mov	r9, fp
 8003b5c:	eb18 0308 	adds.w	r3, r8, r8
 8003b60:	eb49 0409 	adc.w	r4, r9, r9
 8003b64:	4698      	mov	r8, r3
 8003b66:	46a1      	mov	r9, r4
 8003b68:	eb18 080a 	adds.w	r8, r8, sl
 8003b6c:	eb49 090b 	adc.w	r9, r9, fp
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b84:	4688      	mov	r8, r1
 8003b86:	4691      	mov	r9, r2
 8003b88:	eb1a 0508 	adds.w	r5, sl, r8
 8003b8c:	eb4b 0609 	adc.w	r6, fp, r9
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	f04f 0400 	mov.w	r4, #0
 8003ba2:	0094      	lsls	r4, r2, #2
 8003ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ba8:	008b      	lsls	r3, r1, #2
 8003baa:	461a      	mov	r2, r3
 8003bac:	4623      	mov	r3, r4
 8003bae:	4628      	mov	r0, r5
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	f7fc fb11 	bl	80001d8 <__aeabi_uldivmod>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	460c      	mov	r4, r1
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4bb8      	ldr	r3, [pc, #736]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	469b      	mov	fp, r3
 8003bcc:	f04f 0c00 	mov.w	ip, #0
 8003bd0:	46d9      	mov	r9, fp
 8003bd2:	46e2      	mov	sl, ip
 8003bd4:	eb19 0309 	adds.w	r3, r9, r9
 8003bd8:	eb4a 040a 	adc.w	r4, sl, sl
 8003bdc:	4699      	mov	r9, r3
 8003bde:	46a2      	mov	sl, r4
 8003be0:	eb19 090b 	adds.w	r9, r9, fp
 8003be4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfc:	4689      	mov	r9, r1
 8003bfe:	4692      	mov	sl, r2
 8003c00:	eb1b 0509 	adds.w	r5, fp, r9
 8003c04:	eb4c 060a 	adc.w	r6, ip, sl
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	f04f 0400 	mov.w	r4, #0
 8003c1a:	0094      	lsls	r4, r2, #2
 8003c1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c20:	008b      	lsls	r3, r1, #2
 8003c22:	461a      	mov	r2, r3
 8003c24:	4623      	mov	r3, r4
 8003c26:	4628      	mov	r0, r5
 8003c28:	4631      	mov	r1, r6
 8003c2a:	f7fc fad5 	bl	80001d8 <__aeabi_uldivmod>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	460c      	mov	r4, r1
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b9a      	ldr	r3, [pc, #616]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a95      	ldr	r2, [pc, #596]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c54:	4498      	add	r8, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	469b      	mov	fp, r3
 8003c5a:	f04f 0c00 	mov.w	ip, #0
 8003c5e:	46d9      	mov	r9, fp
 8003c60:	46e2      	mov	sl, ip
 8003c62:	eb19 0309 	adds.w	r3, r9, r9
 8003c66:	eb4a 040a 	adc.w	r4, sl, sl
 8003c6a:	4699      	mov	r9, r3
 8003c6c:	46a2      	mov	sl, r4
 8003c6e:	eb19 090b 	adds.w	r9, r9, fp
 8003c72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c8a:	4689      	mov	r9, r1
 8003c8c:	4692      	mov	sl, r2
 8003c8e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c92:	eb4c 060a 	adc.w	r6, ip, sl
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	0094      	lsls	r4, r2, #2
 8003caa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cae:	008b      	lsls	r3, r1, #2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	f7fc fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b77      	ldr	r3, [pc, #476]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	; 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3332      	adds	r3, #50	; 0x32
 8003cd6:	4a72      	ldr	r2, [pc, #456]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4442      	add	r2, r8
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e0d0      	b.n	8003e8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7fe fc92 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f04f 0b00 	mov.w	fp, #0
 8003cfa:	46d0      	mov	r8, sl
 8003cfc:	46d9      	mov	r9, fp
 8003cfe:	eb18 0308 	adds.w	r3, r8, r8
 8003d02:	eb49 0409 	adc.w	r4, r9, r9
 8003d06:	4698      	mov	r8, r3
 8003d08:	46a1      	mov	r9, r4
 8003d0a:	eb18 080a 	adds.w	r8, r8, sl
 8003d0e:	eb49 090b 	adc.w	r9, r9, fp
 8003d12:	f04f 0100 	mov.w	r1, #0
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d26:	4688      	mov	r8, r1
 8003d28:	4691      	mov	r9, r2
 8003d2a:	eb1a 0508 	adds.w	r5, sl, r8
 8003d2e:	eb4b 0609 	adc.w	r6, fp, r9
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4619      	mov	r1, r3
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	0094      	lsls	r4, r2, #2
 8003d46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d4a:	008b      	lsls	r3, r1, #2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	4631      	mov	r1, r6
 8003d54:	f7fc fa40 	bl	80001d8 <__aeabi_uldivmod>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	460c      	mov	r4, r1
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b50      	ldr	r3, [pc, #320]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003d60:	fba3 2302 	umull	r2, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	469b      	mov	fp, r3
 8003d6e:	f04f 0c00 	mov.w	ip, #0
 8003d72:	46d9      	mov	r9, fp
 8003d74:	46e2      	mov	sl, ip
 8003d76:	eb19 0309 	adds.w	r3, r9, r9
 8003d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003d7e:	4699      	mov	r9, r3
 8003d80:	46a2      	mov	sl, r4
 8003d82:	eb19 090b 	adds.w	r9, r9, fp
 8003d86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d9e:	4689      	mov	r9, r1
 8003da0:	4692      	mov	sl, r2
 8003da2:	eb1b 0509 	adds.w	r5, fp, r9
 8003da6:	eb4c 060a 	adc.w	r6, ip, sl
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4619      	mov	r1, r3
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	f04f 0400 	mov.w	r4, #0
 8003dbc:	0094      	lsls	r4, r2, #2
 8003dbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc2:	008b      	lsls	r3, r1, #2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	4631      	mov	r1, r6
 8003dcc:	f7fc fa04 	bl	80001d8 <__aeabi_uldivmod>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4b32      	ldr	r3, [pc, #200]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df6:	4498      	add	r8, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	469b      	mov	fp, r3
 8003dfc:	f04f 0c00 	mov.w	ip, #0
 8003e00:	46d9      	mov	r9, fp
 8003e02:	46e2      	mov	sl, ip
 8003e04:	eb19 0309 	adds.w	r3, r9, r9
 8003e08:	eb4a 040a 	adc.w	r4, sl, sl
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	46a2      	mov	sl, r4
 8003e10:	eb19 090b 	adds.w	r9, r9, fp
 8003e14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e18:	f04f 0100 	mov.w	r1, #0
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e2c:	4689      	mov	r9, r1
 8003e2e:	4692      	mov	sl, r2
 8003e30:	eb1b 0509 	adds.w	r5, fp, r9
 8003e34:	eb4c 060a 	adc.w	r6, ip, sl
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	0094      	lsls	r4, r2, #2
 8003e4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e50:	008b      	lsls	r3, r1, #2
 8003e52:	461a      	mov	r2, r3
 8003e54:	4623      	mov	r3, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	4631      	mov	r1, r6
 8003e5a:	f7fc f9bd 	bl	80001d8 <__aeabi_uldivmod>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	461a      	mov	r2, r3
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003e66:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2164      	movs	r1, #100	; 0x64
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <UART_SetConfig+0x6f4>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4442      	add	r2, r8
 8003e8a:	609a      	str	r2, [r3, #8]
}
 8003e8c:	e7ff      	b.n	8003e8e <UART_SetConfig+0x6e2>
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e98:	40011000 	.word	0x40011000
 8003e9c:	40011400 	.word	0x40011400
 8003ea0:	51eb851f 	.word	0x51eb851f

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	; (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	2000001c 	.word	0x2000001c

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4e0d      	ldr	r6, [pc, #52]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1ba4      	subs	r4, r4, r6
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2500      	movs	r5, #0
 8003ebc:	42a5      	cmp	r5, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4e0b      	ldr	r6, [pc, #44]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	; (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f000 f8c8 	bl	8004058 <_init>
 8003ec8:	1ba4      	subs	r4, r4, r6
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2500      	movs	r5, #0
 8003ece:	42a5      	cmp	r5, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed8:	4798      	blx	r3
 8003eda:	3501      	adds	r5, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ee2:	4798      	blx	r3
 8003ee4:	3501      	adds	r5, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	080040ec 	.word	0x080040ec
 8003eec:	080040ec 	.word	0x080040ec
 8003ef0:	080040ec 	.word	0x080040ec
 8003ef4:	080040f0 	.word	0x080040f0

08003ef8 <malloc>:
 8003ef8:	4b02      	ldr	r3, [pc, #8]	; (8003f04 <malloc+0xc>)
 8003efa:	4601      	mov	r1, r0
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	f000 b80b 	b.w	8003f18 <_malloc_r>
 8003f02:	bf00      	nop
 8003f04:	2000001c 	.word	0x2000001c

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <_malloc_r>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	1ccd      	adds	r5, r1, #3
 8003f1c:	f025 0503 	bic.w	r5, r5, #3
 8003f20:	3508      	adds	r5, #8
 8003f22:	2d0c      	cmp	r5, #12
 8003f24:	bf38      	it	cc
 8003f26:	250c      	movcc	r5, #12
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	db01      	blt.n	8003f32 <_malloc_r+0x1a>
 8003f2e:	42a9      	cmp	r1, r5
 8003f30:	d903      	bls.n	8003f3a <_malloc_r+0x22>
 8003f32:	230c      	movs	r3, #12
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	2000      	movs	r0, #0
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	f000 f88b 	bl	8004054 <__malloc_lock>
 8003f3e:	4a21      	ldr	r2, [pc, #132]	; (8003fc4 <_malloc_r+0xac>)
 8003f40:	6814      	ldr	r4, [r2, #0]
 8003f42:	4621      	mov	r1, r4
 8003f44:	b991      	cbnz	r1, 8003f6c <_malloc_r+0x54>
 8003f46:	4c20      	ldr	r4, [pc, #128]	; (8003fc8 <_malloc_r+0xb0>)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	b91b      	cbnz	r3, 8003f54 <_malloc_r+0x3c>
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f000 f871 	bl	8004034 <_sbrk_r>
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	4629      	mov	r1, r5
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f86c 	bl	8004034 <_sbrk_r>
 8003f5c:	1c43      	adds	r3, r0, #1
 8003f5e:	d124      	bne.n	8003faa <_malloc_r+0x92>
 8003f60:	230c      	movs	r3, #12
 8003f62:	6033      	str	r3, [r6, #0]
 8003f64:	4630      	mov	r0, r6
 8003f66:	f000 f876 	bl	8004056 <__malloc_unlock>
 8003f6a:	e7e4      	b.n	8003f36 <_malloc_r+0x1e>
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	1b5b      	subs	r3, r3, r5
 8003f70:	d418      	bmi.n	8003fa4 <_malloc_r+0x8c>
 8003f72:	2b0b      	cmp	r3, #11
 8003f74:	d90f      	bls.n	8003f96 <_malloc_r+0x7e>
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	50cd      	str	r5, [r1, r3]
 8003f7a:	18cc      	adds	r4, r1, r3
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 f86a 	bl	8004056 <__malloc_unlock>
 8003f82:	f104 000b 	add.w	r0, r4, #11
 8003f86:	1d23      	adds	r3, r4, #4
 8003f88:	f020 0007 	bic.w	r0, r0, #7
 8003f8c:	1ac3      	subs	r3, r0, r3
 8003f8e:	d0d3      	beq.n	8003f38 <_malloc_r+0x20>
 8003f90:	425a      	negs	r2, r3
 8003f92:	50e2      	str	r2, [r4, r3]
 8003f94:	e7d0      	b.n	8003f38 <_malloc_r+0x20>
 8003f96:	428c      	cmp	r4, r1
 8003f98:	684b      	ldr	r3, [r1, #4]
 8003f9a:	bf16      	itet	ne
 8003f9c:	6063      	strne	r3, [r4, #4]
 8003f9e:	6013      	streq	r3, [r2, #0]
 8003fa0:	460c      	movne	r4, r1
 8003fa2:	e7eb      	b.n	8003f7c <_malloc_r+0x64>
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	6849      	ldr	r1, [r1, #4]
 8003fa8:	e7cc      	b.n	8003f44 <_malloc_r+0x2c>
 8003faa:	1cc4      	adds	r4, r0, #3
 8003fac:	f024 0403 	bic.w	r4, r4, #3
 8003fb0:	42a0      	cmp	r0, r4
 8003fb2:	d005      	beq.n	8003fc0 <_malloc_r+0xa8>
 8003fb4:	1a21      	subs	r1, r4, r0
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f000 f83c 	bl	8004034 <_sbrk_r>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d0cf      	beq.n	8003f60 <_malloc_r+0x48>
 8003fc0:	6025      	str	r5, [r4, #0]
 8003fc2:	e7db      	b.n	8003f7c <_malloc_r+0x64>
 8003fc4:	200000c4 	.word	0x200000c4
 8003fc8:	200000c8 	.word	0x200000c8

08003fcc <rand>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <rand+0x50>)
 8003fd0:	681c      	ldr	r4, [r3, #0]
 8003fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003fd4:	b97b      	cbnz	r3, 8003ff6 <rand+0x2a>
 8003fd6:	2018      	movs	r0, #24
 8003fd8:	f7ff ff8e 	bl	8003ef8 <malloc>
 8003fdc:	4a10      	ldr	r2, [pc, #64]	; (8004020 <rand+0x54>)
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <rand+0x58>)
 8003fe0:	63a0      	str	r0, [r4, #56]	; 0x38
 8003fe2:	e9c0 2300 	strd	r2, r3, [r0]
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <rand+0x5c>)
 8003fe8:	6083      	str	r3, [r0, #8]
 8003fea:	230b      	movs	r3, #11
 8003fec:	8183      	strh	r3, [r0, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003ff8:	480c      	ldr	r0, [pc, #48]	; (800402c <rand+0x60>)
 8003ffa:	690a      	ldr	r2, [r1, #16]
 8003ffc:	694b      	ldr	r3, [r1, #20]
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	; (8004030 <rand+0x64>)
 8004000:	4350      	muls	r0, r2
 8004002:	fb04 0003 	mla	r0, r4, r3, r0
 8004006:	fba2 2304 	umull	r2, r3, r2, r4
 800400a:	4403      	add	r3, r0
 800400c:	1c54      	adds	r4, r2, #1
 800400e:	f143 0500 	adc.w	r5, r3, #0
 8004012:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004016:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	2000001c 	.word	0x2000001c
 8004020:	abcd330e 	.word	0xabcd330e
 8004024:	e66d1234 	.word	0xe66d1234
 8004028:	0005deec 	.word	0x0005deec
 800402c:	5851f42d 	.word	0x5851f42d
 8004030:	4c957f2d 	.word	0x4c957f2d

08004034 <_sbrk_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4c06      	ldr	r4, [pc, #24]	; (8004050 <_sbrk_r+0x1c>)
 8004038:	2300      	movs	r3, #0
 800403a:	4605      	mov	r5, r0
 800403c:	4608      	mov	r0, r1
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	f7fd fade 	bl	8001600 <_sbrk>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d102      	bne.n	800404e <_sbrk_r+0x1a>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	b103      	cbz	r3, 800404e <_sbrk_r+0x1a>
 800404c:	602b      	str	r3, [r5, #0]
 800404e:	bd38      	pop	{r3, r4, r5, pc}
 8004050:	200008dc 	.word	0x200008dc

08004054 <__malloc_lock>:
 8004054:	4770      	bx	lr

08004056 <__malloc_unlock>:
 8004056:	4770      	bx	lr

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
