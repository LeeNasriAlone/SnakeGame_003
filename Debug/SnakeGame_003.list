
SnakeGame_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb4  08003eb4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb4  08003eb4  00013eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000080  08003f3c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08003f3c  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c265  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e2a  00000000  00000000  0002c315  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016bcc  00000000  00000000  0002f958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000949c  00000000  00000000  00046524  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d107  00000000  00000000  0004f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  000dcb44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003e7c 	.word	0x08003e7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08003e7c 	.word	0x08003e7c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 f842 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f830 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f938 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f90c 	bl	8000704 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  scene_clear(scene);
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <main+0x58>)
 80004f2:	f000 fe6d 	bl	80011d0 <scene_clear>
  scene_mainmenu(scene);
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <main+0x58>)
 80004f8:	f000 fe2a 	bl	8001150 <scene_mainmenu>
  HAL_UART_Receive_IT( &huart2, buffer, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <main+0x5c>)
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x60>)
 8000502:	f002 fdcd 	bl	80030a0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x64>)
 8000508:	220d      	movs	r2, #13
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <main+0x68>)
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x60>)
 800050e:	f002 fd2e 	bl	8002f6e <HAL_UART_Transmit>
	  snake_move(scene);
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x58>)
 8000514:	f000 fc80 	bl	8000e18 <snake_move>
	  HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <main+0x64>)
 800051a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800051e:	4904      	ldr	r1, [pc, #16]	; (8000530 <main+0x58>)
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x60>)
 8000522:	f002 fd24 	bl	8002f6e <HAL_UART_Transmit>
	  HAL_Delay(200);
 8000526:	20c8      	movs	r0, #200	; 0xc8
 8000528:	f001 f88e 	bl	8001648 <HAL_Delay>
	  HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 800052c:	e7eb      	b.n	8000506 <main+0x2e>
 800052e:	bf00      	nop
 8000530:	20000144 	.word	0x20000144
 8000534:	20000100 	.word	0x20000100
 8000538:	20000104 	.word	0x20000104
 800053c:	000186a0 	.word	0x000186a0
 8000540:	20000000 	.word	0x20000000

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fc1e 	bl	8003d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b4:	2310      	movs	r3, #16
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fb2e 	bl	8001c2c <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d6:	f000 f9fd 	bl	80009d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd88 	bl	800210c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f9e7 	bl	80009d4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <MX_TIM4_Init+0xe4>)
 800064a:	4a2d      	ldr	r2, [pc, #180]	; (8000700 <MX_TIM4_Init+0xe8>)
 800064c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_TIM4_Init+0xe4>)
 8000650:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_TIM4_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_TIM4_Init+0xe4>)
 800065e:	22c7      	movs	r2, #199	; 0xc7
 8000660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_TIM4_Init+0xe4>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_TIM4_Init+0xe4>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800066e:	4823      	ldr	r0, [pc, #140]	; (80006fc <MX_TIM4_Init+0xe4>)
 8000670:	f001 ff3e 	bl	80024f0 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800067a:	f000 f9ab 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000688:	4619      	mov	r1, r3
 800068a:	481c      	ldr	r0, [pc, #112]	; (80006fc <MX_TIM4_Init+0xe4>)
 800068c:	f002 f856 	bl	800273c <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000696:	f000 f99d 	bl	80009d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800069a:	4818      	ldr	r0, [pc, #96]	; (80006fc <MX_TIM4_Init+0xe4>)
 800069c:	f001 ff53 	bl	8002546 <HAL_TIM_PWM_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80006a6:	f000 f995 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4619      	mov	r1, r3
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <MX_TIM4_Init+0xe4>)
 80006ba:	f002 fb9d 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80006c4:	f000 f986 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 80006cc:	2363      	movs	r3, #99	; 0x63
 80006ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2208      	movs	r2, #8
 80006dc:	4619      	mov	r1, r3
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <MX_TIM4_Init+0xe4>)
 80006e0:	f001 ff66 	bl	80025b0 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80006ea:	f000 f973 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <MX_TIM4_Init+0xe4>)
 80006f0:	f000 fe0a 	bl	8001308 <HAL_TIM_MspPostInit>

}
 80006f4:	bf00      	nop
 80006f6:	3738      	adds	r7, #56	; 0x38
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000c0 	.word	0x200000c0
 8000700:	40000800 	.word	0x40000800

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f002 fbca 	bl	8002ed4 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f945 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000104 	.word	0x20000104
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a2c      	ldr	r2, [pc, #176]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a25      	ldr	r2, [pc, #148]	; (8000828 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_GPIO_Init+0xd4>)
 80007e4:	f001 fa08 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_GPIO_Init+0xd8>)
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_GPIO_Init+0xdc>)
 80007fe:	f001 f879 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000802:	2320      	movs	r3, #32
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0xd4>)
 800081a:	f001 f86b 	bl	80018f4 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	10210000 	.word	0x10210000
 8000834:	40020800 	.word	0x40020800

08000838 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    /* Get character from UART. Note that does not read two byte characters like arrows. */
    switch(buffer[0]) {
 8000840:	4b5c      	ldr	r3, [pc, #368]	; (80009b4 <HAL_UART_RxCpltCallback+0x17c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3b41      	subs	r3, #65	; 0x41
 8000846:	2b36      	cmp	r3, #54	; 0x36
 8000848:	f200 80aa 	bhi.w	80009a0 <HAL_UART_RxCpltCallback+0x168>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <HAL_UART_RxCpltCallback+0x1c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000959 	.word	0x08000959
 8000858:	080009a1 	.word	0x080009a1
 800085c:	080009a1 	.word	0x080009a1
 8000860:	08000969 	.word	0x08000969
 8000864:	080009a1 	.word	0x080009a1
 8000868:	08000997 	.word	0x08000997
 800086c:	080009a1 	.word	0x080009a1
 8000870:	080009a1 	.word	0x080009a1
 8000874:	080009a1 	.word	0x080009a1
 8000878:	080009a1 	.word	0x080009a1
 800087c:	08000971 	.word	0x08000971
 8000880:	080009a1 	.word	0x080009a1
 8000884:	080009a1 	.word	0x080009a1
 8000888:	080009a1 	.word	0x080009a1
 800088c:	080009a1 	.word	0x080009a1
 8000890:	080009a1 	.word	0x080009a1
 8000894:	080009a1 	.word	0x080009a1
 8000898:	080009a1 	.word	0x080009a1
 800089c:	08000949 	.word	0x08000949
 80008a0:	080009a1 	.word	0x080009a1
 80008a4:	080009a1 	.word	0x080009a1
 80008a8:	080009a1 	.word	0x080009a1
 80008ac:	08000939 	.word	0x08000939
 80008b0:	080009a1 	.word	0x080009a1
 80008b4:	080009a1 	.word	0x080009a1
 80008b8:	080009a1 	.word	0x080009a1
 80008bc:	080009a1 	.word	0x080009a1
 80008c0:	080009a1 	.word	0x080009a1
 80008c4:	080009a1 	.word	0x080009a1
 80008c8:	080009a1 	.word	0x080009a1
 80008cc:	080009a1 	.word	0x080009a1
 80008d0:	080009a1 	.word	0x080009a1
 80008d4:	08000951 	.word	0x08000951
 80008d8:	080009a1 	.word	0x080009a1
 80008dc:	080009a1 	.word	0x080009a1
 80008e0:	08000961 	.word	0x08000961
 80008e4:	080009a1 	.word	0x080009a1
 80008e8:	0800098d 	.word	0x0800098d
 80008ec:	080009a1 	.word	0x080009a1
 80008f0:	080009a1 	.word	0x080009a1
 80008f4:	080009a1 	.word	0x080009a1
 80008f8:	080009a1 	.word	0x080009a1
 80008fc:	0800097f 	.word	0x0800097f
 8000900:	080009a1 	.word	0x080009a1
 8000904:	080009a1 	.word	0x080009a1
 8000908:	080009a1 	.word	0x080009a1
 800090c:	080009a1 	.word	0x080009a1
 8000910:	080009a1 	.word	0x080009a1
 8000914:	080009a1 	.word	0x080009a1
 8000918:	080009a1 	.word	0x080009a1
 800091c:	08000941 	.word	0x08000941
 8000920:	080009a1 	.word	0x080009a1
 8000924:	080009a1 	.word	0x080009a1
 8000928:	080009a1 	.word	0x080009a1
 800092c:	08000931 	.word	0x08000931
    case 'w' :
        snake_setDirection(UP);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fa2b 	bl	8000d8c <snake_setDirection>
        break;
 8000936:	e034      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'W' :
        snake_setDirection(UP);
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fa27 	bl	8000d8c <snake_setDirection>
        break;
 800093e:	e030      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in DOWN direction if allowed */
    case 's' :
        snake_setDirection(DOWN);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 fa23 	bl	8000d8c <snake_setDirection>
        break;
 8000946:	e02c      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'S' :
        snake_setDirection(DOWN);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 fa1f 	bl	8000d8c <snake_setDirection>
        break;
 800094e:	e028      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in LEFT direction if allowed */
    case 'a' :
        snake_setDirection(LEFT);
 8000950:	2004      	movs	r0, #4
 8000952:	f000 fa1b 	bl	8000d8c <snake_setDirection>
        break;
 8000956:	e024      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'A' :
        snake_setDirection(LEFT);
 8000958:	2004      	movs	r0, #4
 800095a:	f000 fa17 	bl	8000d8c <snake_setDirection>
        break;
 800095e:	e020      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in RIGHT direction if allowed */
    case 'd' :
        snake_setDirection(RIGHT);
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fa13 	bl	8000d8c <snake_setDirection>
        break;
 8000966:	e01c      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'D' :
        snake_setDirection(RIGHT);
 8000968:	2002      	movs	r0, #2
 800096a:	f000 fa0f 	bl	8000d8c <snake_setDirection>
        break;
 800096e:	e018      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'K' :
    	scene_clear(scene);
 8000970:	4811      	ldr	r0, [pc, #68]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 8000972:	f000 fc2d 	bl	80011d0 <scene_clear>
    	snake_init(scene);
 8000976:	4810      	ldr	r0, [pc, #64]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 8000978:	f000 f908 	bl	8000b8c <snake_init>
    	break;
 800097c:	e011      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'k' :
    	scene_clear(scene);
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 8000980:	f000 fc26 	bl	80011d0 <scene_clear>
        snake_init(scene);
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 8000986:	f000 f901 	bl	8000b8c <snake_init>
        break;
 800098a:	e00a      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'f' :
    	snake_feed(1, scene);
 800098c:	490a      	ldr	r1, [pc, #40]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 800098e:	2001      	movs	r0, #1
 8000990:	f000 fb34 	bl	8000ffc <snake_feed>
    	break ;
 8000994:	e005      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    case 'F' :
        snake_feed(1, scene);
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <HAL_UART_RxCpltCallback+0x180>)
 8000998:	2001      	movs	r0, #1
 800099a:	f000 fb2f 	bl	8000ffc <snake_feed>
        break ;
 800099e:	e000      	b.n	80009a2 <HAL_UART_RxCpltCallback+0x16a>
    default :
        break;
 80009a0:	bf00      	nop
    }
    /* Restart the interrupt reception mode */
    HAL_UART_Receive_IT( &huart2, buffer, 1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	4903      	ldr	r1, [pc, #12]	; (80009b4 <HAL_UART_RxCpltCallback+0x17c>)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_UART_RxCpltCallback+0x184>)
 80009a8:	f002 fb7a 	bl	80030a0 <HAL_UART_Receive_IT>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000100 	.word	0x20000100
 80009b8:	20000144 	.word	0x20000144
 80009bc:	20000104 	.word	0x20000104

080009c0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <createQueue>:
// C program for array implementation of queue
#include "queue.h"

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
 80009ea:	2014      	movs	r0, #20
 80009ec:	f003 f9ca 	bl	8003d84 <malloc>
 80009f0:	4603      	mov	r3, r0
 80009f2:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	689a      	ldr	r2, [r3, #8]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	601a      	str	r2, [r3, #0]
    queue->rear = capacity - 1;  // This is important, see the enqueue
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	605a      	str	r2, [r3, #4]
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 f9b3 	bl	8003d84 <malloc>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	611a      	str	r2, [r3, #16]
    return queue;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <isFull>:

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <isEmpty>:

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ffd3 	bl	8000a30 <isFull>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	3301      	adds	r3, #1
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8000aa0:	fb03 f301 	mul.w	r3, r3, r1
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691a      	ldr	r2, [r3, #16]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4413      	add	r3, r2
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	e000      	b.n	8000aca <enqueue+0x50>
        return;
 8000ac8:	bf00      	nop
}
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <dequeue>:

// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffbd 	bl	8000a58 <isEmpty>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <dequeue+0x1a>
        return INT_MIN;
 8000ae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ae8:	e01b      	b.n	8000b22 <dequeue+0x52>
    int item = queue->array[queue->front];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)%queue->capacity;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	461a      	mov	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	fbb2 f1f3 	udiv	r1, r2, r3
 8000b0a:	fb03 f301 	mul.w	r3, r3, r1
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
    return item;
 8000b20:	68fb      	ldr	r3, [r7, #12]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <front>:

// Function to get front of queue
int front(struct Queue* queue)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff90 	bl	8000a58 <isEmpty>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <front+0x1a>
        return INT_MIN;
 8000b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b42:	e006      	b.n	8000b52 <front+0x28>
    return queue->array[queue->front];
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691a      	ldr	r2, [r3, #16]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	681b      	ldr	r3, [r3, #0]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <rear>:

// Function to get rear of queue
int rear(struct Queue* queue)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff78 	bl	8000a58 <isEmpty>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <rear+0x1a>
        return INT_MIN;
 8000b6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b72:	e006      	b.n	8000b82 <rear+0x28>
    return queue->array[queue->rear];
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	681b      	ldr	r3, [r3, #0]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <snake_init>:
static int snake_head_y;
static int snake_tail_x;
static int snake_tail_y;


void snake_init(char scene[1920]){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	snake_x = createQueue(1000);
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	f7ff ff23 	bl	80009e2 <createQueue>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <snake_init+0xa4>)
 8000ba0:	601a      	str	r2, [r3, #0]
	snake_y = createQueue(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f7ff ff1c 	bl	80009e2 <createQueue>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <snake_init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
	snake_direction = RIGHT;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <snake_init+0xac>)
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	601a      	str	r2, [r3, #0]
	for (int x = 0; x < 5; ++x) { snake_enqueue(x, 0, scene); }
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e007      	b.n	8000bcc <snake_init+0x40>
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f845 	bl	8000c50 <snake_enqueue>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	ddf4      	ble.n	8000bbc <snake_init+0x30>
	score = 0;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <snake_init+0xb0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
	scene_setScore(scene);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fa3d 	bl	8001058 <scene_setScore>
	snake_head_x = rear(snake_x);
 8000bde:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <snake_init+0xa4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ffb9 	bl	8000b5a <rear>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <snake_init+0xb4>)
 8000bec:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <snake_init+0xa8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ffb1 	bl	8000b5a <rear>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <snake_init+0xb8>)
 8000bfc:	601a      	str	r2, [r3, #0]
	snake_tail_x = front(snake_x);
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <snake_init+0xa4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff91 	bl	8000b2a <front>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <snake_init+0xbc>)
 8000c0c:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <snake_init+0xa8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff89 	bl	8000b2a <front>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <snake_init+0xc0>)
 8000c1c:	601a      	str	r2, [r3, #0]

	scene[500] = 'O';
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c24:	224f      	movs	r2, #79	; 0x4f
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200008c8 	.word	0x200008c8
 8000c34:	200008c4 	.word	0x200008c4
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	200000a0 	.word	0x200000a0
 8000c40:	200000a4 	.word	0x200000a4
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	200000b0 	.word	0x200000b0

08000c50 <snake_enqueue>:

void snake_enqueue(int x, int y, char scene[1920]){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	if ((80*y + x) >= 1760) { x = 0; y = 0;}
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000c70:	db04      	blt.n	8000c7c <snake_enqueue+0x2c>
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	e00d      	b.n	8000c98 <snake_enqueue+0x48>
	else if ((80*y + x) < 0) { x = 0; y = 0;}
 8000c7c:	68ba      	ldr	r2, [r7, #8]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da03      	bge.n	8000c98 <snake_enqueue+0x48>
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	2300      	movs	r3, #0
 8000c96:	60bb      	str	r3, [r7, #8]
	enqueue(snake_x, x);
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <snake_enqueue+0xa4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff feeb 	bl	8000a7a <enqueue>
	enqueue(snake_y, y);
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <snake_enqueue+0xa8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fee5 	bl	8000a7a <enqueue>
	snake_head_x = rear(snake_x);
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <snake_enqueue+0xa4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff50 	bl	8000b5a <rear>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <snake_enqueue+0xac>)
 8000cbe:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <snake_enqueue+0xa8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff48 	bl	8000b5a <rear>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <snake_enqueue+0xb0>)
 8000cce:	601a      	str	r2, [r3, #0]
	scene[80 * y + x] = '@';
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200008c8 	.word	0x200008c8
 8000cf8:	200008c4 	.word	0x200008c4
 8000cfc:	200000a4 	.word	0x200000a4
 8000d00:	200000a8 	.word	0x200000a8

08000d04 <snake_dequeue>:

void snake_dequeue(char scene[1920]){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	int x = front(snake_x); dequeue(snake_x);
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <snake_dequeue+0x78>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff0a 	bl	8000b2a <front>
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <snake_dequeue+0x78>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fed7 	bl	8000ad0 <dequeue>
	int y = front(snake_y); dequeue(snake_y);
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <snake_dequeue+0x7c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff feff 	bl	8000b2a <front>
 8000d2c:	60b8      	str	r0, [r7, #8]
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <snake_dequeue+0x7c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fecc 	bl	8000ad0 <dequeue>
	snake_tail_x = front(snake_x);
 8000d38:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <snake_dequeue+0x78>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fef4 	bl	8000b2a <front>
 8000d42:	4602      	mov	r2, r0
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <snake_dequeue+0x80>)
 8000d46:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <snake_dequeue+0x7c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff feec 	bl	8000b2a <front>
 8000d52:	4602      	mov	r2, r0
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <snake_dequeue+0x84>)
 8000d56:	601a      	str	r2, [r3, #0]
	scene[80*y + x] = ' ';
 8000d58:	68ba      	ldr	r2, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2220      	movs	r2, #32
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200008c8 	.word	0x200008c8
 8000d80:	200008c4 	.word	0x200008c4
 8000d84:	200000ac 	.word	0x200000ac
 8000d88:	200000b0 	.word	0x200000b0

08000d8c <snake_setDirection>:

void snake_setDirection(int direction) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

    /* Sets a legal direction for the snake. */
    /* Note that the snake cannot turn back on itself*/
    switch(direction) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d82b      	bhi.n	8000df4 <snake_setDirection+0x68>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <snake_setDirection+0x18>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000dd5 	.word	0x08000dd5
 8000da8:	08000dc5 	.word	0x08000dc5
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000db5 	.word	0x08000db5
    case LEFT :
        if(snake_direction != RIGHT) {
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <snake_setDirection+0x88>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d01d      	beq.n	8000df8 <snake_setDirection+0x6c>
            snake_direction = LEFT;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <snake_setDirection+0x88>)
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000dc2:	e019      	b.n	8000df8 <snake_setDirection+0x6c>

    case RIGHT :
        if(snake_direction != LEFT) {
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <snake_setDirection+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d017      	beq.n	8000dfc <snake_setDirection+0x70>
            snake_direction = RIGHT;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <snake_setDirection+0x88>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000dd2:	e013      	b.n	8000dfc <snake_setDirection+0x70>

    case UP :
        if(snake_direction != DOWN) {
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <snake_setDirection+0x88>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d011      	beq.n	8000e00 <snake_setDirection+0x74>
            snake_direction = UP;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <snake_setDirection+0x88>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000de2:	e00d      	b.n	8000e00 <snake_setDirection+0x74>

    case DOWN :
        if(snake_direction != UP) {
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <snake_setDirection+0x88>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d00b      	beq.n	8000e04 <snake_setDirection+0x78>
            snake_direction = DOWN;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <snake_setDirection+0x88>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000df2:	e007      	b.n	8000e04 <snake_setDirection+0x78>
    default :
        break;
 8000df4:	bf00      	nop
 8000df6:	e006      	b.n	8000e06 <snake_setDirection+0x7a>
        break;
 8000df8:	bf00      	nop
 8000dfa:	e004      	b.n	8000e06 <snake_setDirection+0x7a>
        break;
 8000dfc:	bf00      	nop
 8000dfe:	e002      	b.n	8000e06 <snake_setDirection+0x7a>
        break;
 8000e00:	bf00      	nop
 8000e02:	e000      	b.n	8000e06 <snake_setDirection+0x7a>
        break;
 8000e04:	bf00      	nop
    }

}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000009c 	.word	0x2000009c

08000e18 <snake_move>:

void snake_move(char scene[1920]) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

    /* Based on the snake direction, move head one coordinate*/
	int head_x = snake_head_x;
 8000e20:	4b54      	ldr	r3, [pc, #336]	; (8000f74 <snake_move+0x15c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	617b      	str	r3, [r7, #20]
	int head_y = snake_head_y;
 8000e26:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <snake_move+0x160>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
	int foodScore;

    switch(snake_direction) {
 8000e2c:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <snake_move+0x164>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	f200 8098 	bhi.w	8000f68 <snake_move+0x150>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <snake_move+0x28>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000f23 	.word	0x08000f23
 8000e48:	08000e97 	.word	0x08000e97
 8000e4c:	08000edd 	.word	0x08000edd
    case UP :
    	foodScore = snake_foodScore(head_x, head_y - 1, scene);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4619      	mov	r1, r3
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	f000 f891 	bl	8000f80 <snake_foodScore>
 8000e5e:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y - 1, scene);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4619      	mov	r1, r3
 8000e68:	6978      	ldr	r0, [r7, #20]
 8000e6a:	f7ff fef1 	bl	8000c50 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d103      	bne.n	8000e7c <snake_move+0x64>
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ff45 	bl	8000d04 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000e7a:	e076      	b.n	8000f6a <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e82:	d103      	bne.n	8000e8c <snake_move+0x74>
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 f8cd 	bl	8001024 <snake_gameOver>
        break;
 8000e8a:	e06e      	b.n	8000f6a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f000 f8b4 	bl	8000ffc <snake_feed>
        break;
 8000e94:	e069      	b.n	8000f6a <snake_move+0x152>
    case DOWN :
    	foodScore = snake_foodScore(head_x, head_y + 1, scene);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f000 f86e 	bl	8000f80 <snake_foodScore>
 8000ea4:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y+1, scene);
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4619      	mov	r1, r3
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff fece 	bl	8000c50 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <snake_move+0xaa>
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff22 	bl	8000d04 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000ec0:	e053      	b.n	8000f6a <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d103      	bne.n	8000ed2 <snake_move+0xba>
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f8aa 	bl	8001024 <snake_gameOver>
        break;
 8000ed0:	e04b      	b.n	8000f6a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f000 f891 	bl	8000ffc <snake_feed>
        break;
 8000eda:	e046      	b.n	8000f6a <snake_move+0x152>
    case LEFT :
    	foodScore = snake_foodScore(head_x - 1, head_y, scene);
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f84b 	bl	8000f80 <snake_foodScore>
 8000eea:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x-1, head_y, scene);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6939      	ldr	r1, [r7, #16]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff feab 	bl	8000c50 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <snake_move+0xf0>
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff feff 	bl	8000d04 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000f06:	e030      	b.n	8000f6a <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0e:	d103      	bne.n	8000f18 <snake_move+0x100>
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f887 	bl	8001024 <snake_gameOver>
        break;
 8000f16:	e028      	b.n	8000f6a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 f86e 	bl	8000ffc <snake_feed>
        break;
 8000f20:	e023      	b.n	8000f6a <snake_move+0x152>
    case RIGHT :
    	foodScore = snake_foodScore(head_x + 1, head_y, scene);
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6939      	ldr	r1, [r7, #16]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f828 	bl	8000f80 <snake_foodScore>
 8000f30:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x+1, head_y, scene);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fe88 	bl	8000c50 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d103      	bne.n	8000f4e <snake_move+0x136>
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fedc 	bl	8000d04 <snake_dequeue>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000f4c:	e00d      	b.n	8000f6a <snake_move+0x152>
    	else if ( foodScore == -1 ) snake_gameOver(scene);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d103      	bne.n	8000f5e <snake_move+0x146>
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f864 	bl	8001024 <snake_gameOver>
        break;
 8000f5c:	e005      	b.n	8000f6a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f84b 	bl	8000ffc <snake_feed>
        break;
 8000f66:	e000      	b.n	8000f6a <snake_move+0x152>
    default :
        break;
 8000f68:	bf00      	nop
    }
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000a4 	.word	0x200000a4
 8000f78:	200000a8 	.word	0x200000a8
 8000f7c:	2000009c 	.word	0x2000009c

08000f80 <snake_foodScore>:

int snake_foodScore(int x, int y, char scene[1920]){
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
	/* This function checks what the next pixel is ?
	 * if next pixel is food. return score of that food
	 * if next pixel is snake. return -1 -> game over
	 * else return 0 mean next pixel is free space.
	 */
	if ( scene[80 * y + x] == 'O' ) return 1;
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b4f      	cmp	r3, #79	; 0x4f
 8000fa6:	d101      	bne.n	8000fac <snake_foodScore+0x2c>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e021      	b.n	8000ff0 <snake_foodScore+0x70>
	else if ( scene[80 * y + x] == '+'  ) return 2;
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	011b      	lsls	r3, r3, #4
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b2b      	cmp	r3, #43	; 0x2b
 8000fc6:	d101      	bne.n	8000fcc <snake_foodScore+0x4c>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e011      	b.n	8000ff0 <snake_foodScore+0x70>
	else if ( scene[80 * y + x] == '@' ) return -1;
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b40      	cmp	r3, #64	; 0x40
 8000fe6:	d102      	bne.n	8000fee <snake_foodScore+0x6e>
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	e000      	b.n	8000ff0 <snake_foodScore+0x70>
	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <snake_feed>:

void snake_feed(int foodScore, char scene[1920]){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
	score += foodScore;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <snake_feed+0x24>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <snake_feed+0x24>)
 8001010:	6013      	str	r3, [r2, #0]
	scene_setScore(scene);
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f000 f820 	bl	8001058 <scene_setScore>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000a0 	.word	0x200000a0

08001024 <snake_gameOver>:

void snake_gameOver(char scene[1920]){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	scene_clear(scene);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f8cf 	bl	80011d0 <scene_clear>
	while ( !isEmpty( snake_x) )  { snake_dequeue(scene); }
 8001032:	e002      	b.n	800103a <snake_gameOver+0x16>
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fe65 	bl	8000d04 <snake_dequeue>
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <snake_gameOver+0x30>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fd0a 	bl	8000a58 <isEmpty>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f4      	beq.n	8001034 <snake_gameOver+0x10>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200008c8 	.word	0x200008c8

08001058 <scene_setScore>:

void scene_setPixel(char scene[1920], int pixel){
	scene[pixel] = 'X';
}

void scene_setScore(char scene[1920]){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	scene[80*22 + 0] = 'S';
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8001066:	2253      	movs	r2, #83	; 0x53
 8001068:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 1] = 'c';
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f203 63e1 	addw	r3, r3, #1761	; 0x6e1
 8001070:	2263      	movs	r2, #99	; 0x63
 8001072:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 2] = 'o';
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f203 63e2 	addw	r3, r3, #1762	; 0x6e2
 800107a:	226f      	movs	r2, #111	; 0x6f
 800107c:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 3] = 'r';
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f203 63e3 	addw	r3, r3, #1763	; 0x6e3
 8001084:	2272      	movs	r2, #114	; 0x72
 8001086:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 4] = 'e';
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 800108e:	2265      	movs	r2, #101	; 0x65
 8001090:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 6] = ':';
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f203 63e6 	addw	r3, r3, #1766	; 0x6e6
 8001098:	223a      	movs	r2, #58	; 0x3a
 800109a:	701a      	strb	r2, [r3, #0]
	int i1 = score%10;
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <scene_setScore+0xe8>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <scene_setScore+0xec>)
 80010a2:	fb83 1302 	smull	r1, r3, r3, r2
 80010a6:	1099      	asrs	r1, r3, #2
 80010a8:	17d3      	asrs	r3, r2, #31
 80010aa:	1ac9      	subs	r1, r1, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
	int i2 = (score%100) / 10;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <scene_setScore+0xe8>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <scene_setScore+0xf0>)
 80010be:	fb83 1302 	smull	r1, r3, r3, r2
 80010c2:	1159      	asrs	r1, r3, #5
 80010c4:	17d3      	asrs	r3, r2, #31
 80010c6:	1acb      	subs	r3, r1, r3
 80010c8:	2164      	movs	r1, #100	; 0x64
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <scene_setScore+0xec>)
 80010d2:	fb82 1203 	smull	r1, r2, r2, r3
 80010d6:	1092      	asrs	r2, r2, #2
 80010d8:	17db      	asrs	r3, r3, #31
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	613b      	str	r3, [r7, #16]
	int i3 = (score%1000) / 100;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <scene_setScore+0xe8>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <scene_setScore+0xf4>)
 80010e4:	fb83 1302 	smull	r1, r3, r3, r2
 80010e8:	1199      	asrs	r1, r3, #6
 80010ea:	17d3      	asrs	r3, r2, #31
 80010ec:	1acb      	subs	r3, r1, r3
 80010ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f2:	fb01 f303 	mul.w	r3, r1, r3
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <scene_setScore+0xf0>)
 80010fa:	fb82 1203 	smull	r1, r2, r2, r3
 80010fe:	1152      	asrs	r2, r2, #5
 8001100:	17db      	asrs	r3, r3, #31
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	60fb      	str	r3, [r7, #12]

	scene[80*22 + 10] = intTOchar(i1);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f203 64ea 	addw	r4, r3, #1770	; 0x6ea
 800110c:	6978      	ldr	r0, [r7, #20]
 800110e:	f000 f878 	bl	8001202 <intTOchar>
 8001112:	4603      	mov	r3, r0
 8001114:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 9] = intTOchar(i2);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f203 64e9 	addw	r4, r3, #1769	; 0x6e9
 800111c:	6938      	ldr	r0, [r7, #16]
 800111e:	f000 f870 	bl	8001202 <intTOchar>
 8001122:	4603      	mov	r3, r0
 8001124:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 8] = intTOchar(i3);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f503 64dd 	add.w	r4, r3, #1768	; 0x6e8
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 f868 	bl	8001202 <intTOchar>
 8001132:	4603      	mov	r3, r0
 8001134:	7023      	strb	r3, [r4, #0]
}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	200000a0 	.word	0x200000a0
 8001144:	66666667 	.word	0x66666667
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <scene_mainmenu>:

void scene_mainmenu(char scene[1920]){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	/* For observing the beginning of a pixel */
	scene[0] = 'S'; scene[1] = 'T'; scene[2] = 'A'; scene[3] = 'R'; scene[4] = 'T';
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2253      	movs	r2, #83	; 0x53
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3301      	adds	r3, #1
 8001162:	2254      	movs	r2, #84	; 0x54
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3302      	adds	r3, #2
 800116a:	2241      	movs	r2, #65	; 0x41
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3303      	adds	r3, #3
 8001172:	2252      	movs	r2, #82	; 0x52
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3304      	adds	r3, #4
 800117a:	2254      	movs	r2, #84	; 0x54
 800117c:	701a      	strb	r2, [r3, #0]

	scene[80*11 + 36] = 'S';
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f503 7365 	add.w	r3, r3, #916	; 0x394
 8001184:	2253      	movs	r2, #83	; 0x53
 8001186:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 37] = 'N';
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f203 3395 	addw	r3, r3, #917	; 0x395
 800118e:	224e      	movs	r2, #78	; 0x4e
 8001190:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 38] = 'A';
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f203 3396 	addw	r3, r3, #918	; 0x396
 8001198:	2241      	movs	r2, #65	; 0x41
 800119a:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 39] = 'K';
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f203 3397 	addw	r3, r3, #919	; 0x397
 80011a2:	224b      	movs	r2, #75	; 0x4b
 80011a4:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 40] = 'E';
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80011ac:	2245      	movs	r2, #69	; 0x45
 80011ae:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 43] = 'G';
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f203 339b 	addw	r3, r3, #923	; 0x39b
 80011b6:	2247      	movs	r2, #71	; 0x47
 80011b8:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 44] = 'O';
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80011c0:	224f      	movs	r2, #79	; 0x4f
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <scene_clear>:

void scene_clear(char scene[1920]){
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	for(int i=0;i<1920; i++) scene[i] = ' ';
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e007      	b.n	80011ee <scene_clear+0x1e>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	2220      	movs	r2, #32
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80011f4:	dbf3      	blt.n	80011de <scene_clear+0xe>
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <intTOchar>:

char intTOchar(int integers){
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
	if (integers == 1) return '1';
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <intTOchar+0x12>
 8001210:	2331      	movs	r3, #49	; 0x31
 8001212:	e028      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 2) return '2';
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d101      	bne.n	800121e <intTOchar+0x1c>
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	e023      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 3) return '3';
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d101      	bne.n	8001228 <intTOchar+0x26>
 8001224:	2333      	movs	r3, #51	; 0x33
 8001226:	e01e      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 4) return '4';
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d101      	bne.n	8001232 <intTOchar+0x30>
 800122e:	2334      	movs	r3, #52	; 0x34
 8001230:	e019      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 5) return '5';
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d101      	bne.n	800123c <intTOchar+0x3a>
 8001238:	2335      	movs	r3, #53	; 0x35
 800123a:	e014      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 6) return '6';
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d101      	bne.n	8001246 <intTOchar+0x44>
 8001242:	2336      	movs	r3, #54	; 0x36
 8001244:	e00f      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 7) return '7';
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d101      	bne.n	8001250 <intTOchar+0x4e>
 800124c:	2337      	movs	r3, #55	; 0x37
 800124e:	e00a      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 8) return '8';
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b08      	cmp	r3, #8
 8001254:	d101      	bne.n	800125a <intTOchar+0x58>
 8001256:	2338      	movs	r3, #56	; 0x38
 8001258:	e005      	b.n	8001266 <intTOchar+0x64>
	else if (integers == 9) return '9';
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b09      	cmp	r3, #9
 800125e:	d101      	bne.n	8001264 <intTOchar+0x62>
 8001260:	2339      	movs	r3, #57	; 0x39
 8001262:	e000      	b.n	8001266 <intTOchar+0x64>
	else return '0';
 8001264:	2330      	movs	r3, #48	; 0x30
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_MspInit+0x4c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b2:	2007      	movs	r0, #7
 80012b4:	f000 faba 	bl	800182c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_TIM_Base_MspInit+0x3c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10d      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_TIM_Base_MspInit+0x40>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40000800 	.word	0x40000800
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_TIM_MspPostInit+0x68>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11e      	bne.n	8001368 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a10      	ldr	r2, [pc, #64]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 8001334:	f043 0302 	orr.w	r3, r3, #2
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <HAL_TIM_MspPostInit+0x6c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001358:	2302      	movs	r3, #2
 800135a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_TIM_MspPostInit+0x70>)
 8001364:	f000 fac6 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001368:	bf00      	nop
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40000800 	.word	0x40000800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x94>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d133      	bne.n	8001406 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_UART_MspInit+0x98>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013d6:	230c      	movs	r3, #12
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e6:	2307      	movs	r3, #7
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4809      	ldr	r0, [pc, #36]	; (8001418 <HAL_UART_MspInit+0x9c>)
 80013f2:	f000 fa7f 	bl	80018f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2026      	movs	r0, #38	; 0x26
 80013fc:	f000 fa21 	bl	8001842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001400:	2026      	movs	r0, #38	; 0x26
 8001402:	f000 fa3a 	bl	800187a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8ca 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <USART2_IRQHandler+0x10>)
 800147e:	f001 fe65 	bl	800314c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000104 	.word	0x20000104

0800148c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <_sbrk+0x50>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x16>
		heap_end = &end;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <_sbrk+0x50>)
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <_sbrk+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <_sbrk+0x50>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <_sbrk+0x50>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	466a      	mov	r2, sp
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d907      	bls.n	80014c6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014b6:	f002 fc3b 	bl	8003d30 <__errno>
 80014ba:	4602      	mov	r2, r0
 80014bc:	230c      	movs	r3, #12
 80014be:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	e006      	b.n	80014d4 <_sbrk+0x48>
	}

	heap_end += incr;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <_sbrk+0x50>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a03      	ldr	r2, [pc, #12]	; (80014dc <_sbrk+0x50>)
 80014d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200000b4 	.word	0x200000b4
 80014e0:	200008d8 	.word	0x200008d8

080014e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <SystemInit+0x28>)
 80014ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <SystemInit+0x28>)
 80014f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <SystemInit+0x28>)
 80014fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001514:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001516:	e003      	b.n	8001520 <LoopCopyDataInit>

08001518 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800151a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800151c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800151e:	3104      	adds	r1, #4

08001520 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001524:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001526:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001528:	d3f6      	bcc.n	8001518 <CopyDataInit>
  ldr  r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800152c:	e002      	b.n	8001534 <LoopFillZerobss>

0800152e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800152e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001530:	f842 3b04 	str.w	r3, [r2], #4

08001534 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001538:	d3f9      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800153a:	f7ff ffd3 	bl	80014e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f002 fbfd 	bl	8003d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7fe ffc9 	bl	80004d8 <main>
  bx  lr    
 8001546:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001548:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800154c:	08003ebc 	.word	0x08003ebc
  ldr  r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001554:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001558:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800155c:	200008d4 	.word	0x200008d4

08001560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_Init+0x40>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_Init+0x40>)
 800157a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_Init+0x40>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 f94d 	bl	800182c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff fe6c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 f965 	bl	8001896 <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f000 f92d 	bl	8001842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000010 	.word	0x20000010
 8001600:	20000018 	.word	0x20000018
 8001604:	20000014 	.word	0x20000014

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000018 	.word	0x20000018
 800162c:	200008cc 	.word	0x200008cc

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200008cc 	.word	0x200008cc

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_Delay+0x40>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000018 	.word	0x20000018

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f8:	d301      	bcc.n	80017fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00f      	b.n	800181e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <SysTick_Config+0x40>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001806:	210f      	movs	r1, #15
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f7ff ff8e 	bl	800172c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <SysTick_Config+0x40>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <SysTick_Config+0x40>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ff29 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001854:	f7ff ff3e 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f7ff ff8e 	bl	8001780 <NVIC_EncodePriority>
 8001864:	4602      	mov	r2, r0
 8001866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff5d 	bl	800172c <__NVIC_SetPriority>
}
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff31 	bl	80016f0 <__NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffa2 	bl	80017e8 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00c      	b.n	80018e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2205      	movs	r2, #5
 80018d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	e159      	b.n	8001bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8148 	bne.w	8001bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00b      	beq.n	800194e <HAL_GPIO_Init+0x5a>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001942:	2b11      	cmp	r3, #17
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b12      	cmp	r3, #18
 800194c:	d130      	bne.n	80019b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	f003 0201 	and.w	r2, r3, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0xfc>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d123      	bne.n	8001a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	08da      	lsrs	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3208      	adds	r2, #8
 80019f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0203 	and.w	r2, r3, #3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80a2 	beq.w	8001bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a55      	ldr	r2, [pc, #340]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b53      	ldr	r3, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x2e4>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a96:	4a51      	ldr	r2, [pc, #324]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a48      	ldr	r2, [pc, #288]	; (8001be0 <HAL_GPIO_Init+0x2ec>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x202>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	; (8001be4 <HAL_GPIO_Init+0x2f0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x1fe>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_GPIO_Init+0x2f4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x1fa>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	; (8001bec <HAL_GPIO_Init+0x2f8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x1f6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <HAL_GPIO_Init+0x2fc>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x1f2>
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x204>
 8001af6:	2300      	movs	r3, #0
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b08:	4934      	ldr	r1, [pc, #208]	; (8001bdc <HAL_GPIO_Init+0x2e8>)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b16:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3a:	4a2e      	ldr	r2, [pc, #184]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b64:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8e:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x300>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	f67f aea2 	bls.w	8001910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	3724      	adds	r7, #36	; 0x24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40013800 	.word	0x40013800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020c00 	.word	0x40020c00
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c14:	e003      	b.n	8001c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	619a      	str	r2, [r3, #24]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e25b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d075      	beq.n	8001d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4a:	4ba3      	ldr	r3, [pc, #652]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d00c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c56:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d112      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c62:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6e:	d10b      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	4b99      	ldr	r3, [pc, #612]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d05b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x108>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d157      	bne.n	8001d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e236      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x74>
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a87      	ldr	r2, [pc, #540]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001cc4:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fca4 	bl	8001630 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fca0 	bl	8001630 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1fb      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xc0>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fc90 	bl	8001630 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fc8c 	bl	8001630 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1e7      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0xe8>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4e:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5a:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x152>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1bb      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4952      	ldr	r1, [pc, #328]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <HAL_RCC_OscConfig+0x2b0>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff fc45 	bl	8001630 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff fc41 	bl	8001630 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e19c      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4940      	ldr	r1, [pc, #256]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_OscConfig+0x2b0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fc24 	bl	8001630 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff fc20 	bl	8001630 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d030      	beq.n	8001e78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_OscConfig+0x2b4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff fc04 	bl	8001630 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fc00 	bl	8001630 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15b      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x200>
 8001e4a:	e015      	b.n	8001e78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4c:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RCC_OscConfig+0x2b4>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff fbed 	bl	8001630 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fbe9 	bl	8001630 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e144      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f0      	bne.n	8001e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a0 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10f      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d121      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fbaf 	bl	8001630 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	e011      	b.n	8001efa <HAL_RCC_OscConfig+0x2ce>
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	42470000 	.word	0x42470000
 8001ee0:	42470e80 	.word	0x42470e80
 8001ee4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee8:	f7ff fba2 	bl	8001630 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e0fd      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4d4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2f0>
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a7c      	ldr	r2, [pc, #496]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x32a>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x312>
 8001f24:	4b77      	ldr	r3, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a76      	ldr	r2, [pc, #472]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	4b74      	ldr	r3, [pc, #464]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a73      	ldr	r2, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x32a>
 8001f3e:	4b71      	ldr	r3, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a70      	ldr	r2, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	4b6e      	ldr	r3, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb67 	bl	8001630 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fb63 	bl	8001630 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0bc      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b61      	ldr	r3, [pc, #388]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x33a>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb51 	bl	8001630 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff fb4d 	bl	8001630 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0a6      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a51      	ldr	r2, [pc, #324]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8092 	beq.w	80020f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d05c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d141      	bne.n	8002068 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fb21 	bl	8001630 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff fb1d 	bl	8001630 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e078      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	019b      	lsls	r3, r3, #6
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	085b      	lsrs	r3, r3, #1
 8002028:	3b01      	subs	r3, #1
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	4933      	ldr	r1, [pc, #204]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203a:	4b33      	ldr	r3, [pc, #204]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff faf6 	bl	8001630 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff faf2 	bl	8001630 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04d      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x41c>
 8002066:	e045      	b.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x4dc>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7ff fadf 	bl	8001630 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002076:	f7ff fadb 	bl	8001630 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e036      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x44a>
 8002094:	e02e      	b.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e029      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <HAL_RCC_OscConfig+0x4d8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d115      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ca:	4013      	ands	r3, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d10d      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020de:	429a      	cmp	r2, r3
 80020e0:	d106      	bne.n	80020f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40007000 	.word	0x40007000
 8002104:	40023800 	.word	0x40023800
 8002108:	42470060 	.word	0x42470060

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fa18 	bl	8001630 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fa14 	bl	8001630 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5cd3      	ldrb	r3, [r2, r3]
 80022a6:	fa21 f303 	lsr.w	r3, r1, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f978 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08003e94 	.word	0x08003e94
 80022d0:	20000010 	.word	0x20000010
 80022d4:	20000014 	.word	0x20000014

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d007      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0x32>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d008      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x38>
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 80b4 	bne.w	800246c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b5e      	ldr	r3, [pc, #376]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002306:	60bb      	str	r3, [r7, #8]
       break;
 8002308:	e0b3      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800230a:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800230c:	60bb      	str	r3, [r7, #8]
      break;
 800230e:	e0b0      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002310:	4b5a      	ldr	r3, [pc, #360]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002318:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800231a:	4b58      	ldr	r3, [pc, #352]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d04a      	beq.n	80023bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	ea03 0501 	and.w	r5, r3, r1
 800233c:	ea04 0602 	and.w	r6, r4, r2
 8002340:	4629      	mov	r1, r5
 8002342:	4632      	mov	r2, r6
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f04f 0400 	mov.w	r4, #0
 800234c:	0154      	lsls	r4, r2, #5
 800234e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002352:	014b      	lsls	r3, r1, #5
 8002354:	4619      	mov	r1, r3
 8002356:	4622      	mov	r2, r4
 8002358:	1b49      	subs	r1, r1, r5
 800235a:	eb62 0206 	sbc.w	r2, r2, r6
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f04f 0400 	mov.w	r4, #0
 8002366:	0194      	lsls	r4, r2, #6
 8002368:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800236c:	018b      	lsls	r3, r1, #6
 800236e:	1a5b      	subs	r3, r3, r1
 8002370:	eb64 0402 	sbc.w	r4, r4, r2
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	00e2      	lsls	r2, r4, #3
 800237e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002382:	00d9      	lsls	r1, r3, #3
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	195b      	adds	r3, r3, r5
 800238a:	eb44 0406 	adc.w	r4, r4, r6
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	0262      	lsls	r2, r4, #9
 8002398:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800239c:	0259      	lsls	r1, r3, #9
 800239e:	460b      	mov	r3, r1
 80023a0:	4614      	mov	r4, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	4621      	mov	r1, r4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f04f 0400 	mov.w	r4, #0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	f7fd ff12 	bl	80001d8 <__aeabi_uldivmod>
 80023b4:	4603      	mov	r3, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	e049      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	f04f 0400 	mov.w	r4, #0
 80023c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	ea03 0501 	and.w	r5, r3, r1
 80023d2:	ea04 0602 	and.w	r6, r4, r2
 80023d6:	4629      	mov	r1, r5
 80023d8:	4632      	mov	r2, r6
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	f04f 0400 	mov.w	r4, #0
 80023e2:	0154      	lsls	r4, r2, #5
 80023e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023e8:	014b      	lsls	r3, r1, #5
 80023ea:	4619      	mov	r1, r3
 80023ec:	4622      	mov	r2, r4
 80023ee:	1b49      	subs	r1, r1, r5
 80023f0:	eb62 0206 	sbc.w	r2, r2, r6
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	0194      	lsls	r4, r2, #6
 80023fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002402:	018b      	lsls	r3, r1, #6
 8002404:	1a5b      	subs	r3, r3, r1
 8002406:	eb64 0402 	sbc.w	r4, r4, r2
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	00e2      	lsls	r2, r4, #3
 8002414:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002418:	00d9      	lsls	r1, r3, #3
 800241a:	460b      	mov	r3, r1
 800241c:	4614      	mov	r4, r2
 800241e:	195b      	adds	r3, r3, r5
 8002420:	eb44 0406 	adc.w	r4, r4, r6
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	02a2      	lsls	r2, r4, #10
 800242e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002432:	0299      	lsls	r1, r3, #10
 8002434:	460b      	mov	r3, r1
 8002436:	4614      	mov	r4, r2
 8002438:	4618      	mov	r0, r3
 800243a:	4621      	mov	r1, r4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	461a      	mov	r2, r3
 8002444:	4623      	mov	r3, r4
 8002446:	f7fd fec7 	bl	80001d8 <__aeabi_uldivmod>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	60bb      	str	r3, [r7, #8]
      break;
 800246a:	e002      	b.n	8002472 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800246e:	60bb      	str	r3, [r7, #8]
      break;
 8002470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002472:	68bb      	ldr	r3, [r7, #8]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	00f42400 	.word	0x00f42400
 8002484:	007a1200 	.word	0x007a1200

08002488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_RCC_GetHCLKFreq+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000010 	.word	0x20000010

080024a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a4:	f7ff fff0 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024a8:	4601      	mov	r1, r0
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b6:	5cd3      	ldrb	r3, [r2, r3]
 80024b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08003ea4 	.word	0x08003ea4

080024c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024cc:	f7ff ffdc 	bl	8002488 <HAL_RCC_GetHCLKFreq>
 80024d0:	4601      	mov	r1, r0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	4a03      	ldr	r2, [pc, #12]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08003ea4 	.word	0x08003ea4

080024f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e01d      	b.n	800253e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fed4 	bl	80012c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f000 f9bc 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e01d      	b.n	8002594 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f815 	bl	800259c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f000 f991 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0b4      	b.n	8002734 <HAL_TIM_PWM_ConfigChannel+0x184>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b0c      	cmp	r3, #12
 80025de:	f200 809f 	bhi.w	8002720 <HAL_TIM_PWM_ConfigChannel+0x170>
 80025e2:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e8:	0800261d 	.word	0x0800261d
 80025ec:	08002721 	.word	0x08002721
 80025f0:	08002721 	.word	0x08002721
 80025f4:	08002721 	.word	0x08002721
 80025f8:	0800265d 	.word	0x0800265d
 80025fc:	08002721 	.word	0x08002721
 8002600:	08002721 	.word	0x08002721
 8002604:	08002721 	.word	0x08002721
 8002608:	0800269f 	.word	0x0800269f
 800260c:	08002721 	.word	0x08002721
 8002610:	08002721 	.word	0x08002721
 8002614:	08002721 	.word	0x08002721
 8002618:	080026df 	.word	0x080026df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f9c2 	bl	80029ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0208 	orr.w	r2, r2, #8
 8002636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6999      	ldr	r1, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	619a      	str	r2, [r3, #24]
      break;
 800265a:	e062      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fa08 	bl	8002a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699a      	ldr	r2, [r3, #24]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6999      	ldr	r1, [r3, #24]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	021a      	lsls	r2, r3, #8
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
      break;
 800269c:	e041      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fa53 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69da      	ldr	r2, [r3, #28]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0208 	orr.w	r2, r2, #8
 80026b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
      break;
 80026dc:	e021      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fa9d 	bl	8002c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69d9      	ldr	r1, [r3, #28]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	021a      	lsls	r2, r3, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	61da      	str	r2, [r3, #28]
      break;
 800271e:	e000      	b.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002720:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIM_ConfigClockSource+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e0a6      	b.n	80028a2 <HAL_TIM_ConfigClockSource+0x166>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800277a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d067      	beq.n	800285c <HAL_TIM_ConfigClockSource+0x120>
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d80b      	bhi.n	80027a8 <HAL_TIM_ConfigClockSource+0x6c>
 8002790:	2b10      	cmp	r3, #16
 8002792:	d073      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
 8002794:	2b10      	cmp	r3, #16
 8002796:	d802      	bhi.n	800279e <HAL_TIM_ConfigClockSource+0x62>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d06f      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800279c:	e078      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d06c      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
 80027a2:	2b30      	cmp	r3, #48	; 0x30
 80027a4:	d06a      	beq.n	800287c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80027a6:	e073      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027a8:	2b70      	cmp	r3, #112	; 0x70
 80027aa:	d00d      	beq.n	80027c8 <HAL_TIM_ConfigClockSource+0x8c>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d804      	bhi.n	80027ba <HAL_TIM_ConfigClockSource+0x7e>
 80027b0:	2b50      	cmp	r3, #80	; 0x50
 80027b2:	d033      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xe0>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d041      	beq.n	800283c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80027b8:	e06a      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d066      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x152>
 80027c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c4:	d017      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80027c6:	e063      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6899      	ldr	r1, [r3, #8]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f000 faee 	bl	8002db8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]
      break;
 80027f4:	e04c      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f000 fad7 	bl	8002db8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002818:	609a      	str	r2, [r3, #8]
      break;
 800281a:	e039      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	f000 fa4b 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2150      	movs	r1, #80	; 0x50
 8002834:	4618      	mov	r0, r3
 8002836:	f000 faa4 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800283a:	e029      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f000 fa6a 	bl	8002d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2160      	movs	r1, #96	; 0x60
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fa94 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800285a:	e019      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	461a      	mov	r2, r3
 800286a:	f000 fa2b 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2140      	movs	r1, #64	; 0x40
 8002874:	4618      	mov	r0, r3
 8002876:	f000 fa84 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800287a:	e009      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fa7b 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 800288c:	e000      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800288e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a34      	ldr	r2, [pc, #208]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00f      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d00b      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a31      	ldr	r2, [pc, #196]	; (8002994 <TIM_Base_SetConfig+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d007      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <TIM_Base_SetConfig+0xec>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <TIM_Base_SetConfig+0x38>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2f      	ldr	r2, [pc, #188]	; (800299c <TIM_Base_SetConfig+0xf0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d108      	bne.n	80028f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a25      	ldr	r2, [pc, #148]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d017      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a22      	ldr	r2, [pc, #136]	; (8002994 <TIM_Base_SetConfig+0xe8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <TIM_Base_SetConfig+0xec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00f      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <TIM_Base_SetConfig+0xf0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <TIM_Base_SetConfig+0xf4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <TIM_Base_SetConfig+0xf8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0x8a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <TIM_Base_SetConfig+0xfc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <TIM_Base_SetConfig+0xe4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	615a      	str	r2, [r3, #20]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40010000 	.word	0x40010000
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800

080029ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 0302 	bic.w	r3, r3, #2
 80029f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <TIM_OC1_SetConfig+0xc8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10c      	bne.n	8002a22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0308 	bic.w	r3, r3, #8
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <TIM_OC1_SetConfig+0xc8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d111      	bne.n	8002a4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	621a      	str	r2, [r3, #32]
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40010000 	.word	0x40010000

08002a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f023 0210 	bic.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0320 	bic.w	r3, r3, #32
 8002ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	; (8002b4c <TIM_OC2_SetConfig+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d10d      	bne.n	8002af4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC2_SetConfig+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d113      	bne.n	8002b24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10d      	bne.n	8002bca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a14      	ldr	r2, [pc, #80]	; (8002c20 <TIM_OC3_SetConfig+0xd0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d113      	bne.n	8002bfa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010000 	.word	0x40010000

08002c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	031b      	lsls	r3, r3, #12
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <TIM_OC4_SetConfig+0x9c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d109      	bne.n	8002c98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0201 	bic.w	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 030a 	bic.w	r3, r3, #10
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0210 	bic.w	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f043 0307 	orr.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e050      	b.n	8002eb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d013      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a15      	ldr	r2, [pc, #84]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d10c      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40014000 	.word	0x40014000

08002ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e03f      	b.n	8002f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fa3e 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2224      	movs	r2, #36	; 0x24
 8002f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb8d 	bl	8003638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b088      	sub	sp, #32
 8002f72:	af02      	add	r7, sp, #8
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	f040 8083 	bne.w	8003096 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_Transmit+0x2e>
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07b      	b.n	8003098 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x40>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e074      	b.n	8003098 <HAL_UART_Transmit+0x12a>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fb34 	bl	8001630 <HAL_GetTick>
 8002fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	88fa      	ldrh	r2, [r7, #6]
 8002fd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fde:	e042      	b.n	8003066 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	d122      	bne.n	800303e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2180      	movs	r1, #128	; 0x80
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f9ac 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e042      	b.n	8003098 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003024:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3302      	adds	r3, #2
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	e017      	b.n	8003066 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3301      	adds	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	e013      	b.n	8003066 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f989 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e01f      	b.n	8003098 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	60ba      	str	r2, [r7, #8]
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1b7      	bne.n	8002fe0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	2140      	movs	r1, #64	; 0x40
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f970 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e006      	b.n	8003098 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	4613      	mov	r3, r2
 80030ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d140      	bne.n	800313c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_UART_Receive_IT+0x26>
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e039      	b.n	800313e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Receive_IT+0x38>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e032      	b.n	800313e <HAL_UART_Receive_IT+0x9e>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2222      	movs	r2, #34	; 0x22
 80030fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003116:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x52>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9cc 	bl	8003534 <UART_Receive_IT>
      return;
 800319c:	e0d1      	b.n	8003342 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80b0 	beq.w	8003306 <HAL_UART_IRQHandler+0x1ba>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_UART_IRQHandler+0x70>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a5 	beq.w	8003306 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_UART_IRQHandler+0x90>
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_UART_IRQHandler+0xb0>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	f043 0202 	orr.w	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_UART_IRQHandler+0xd0>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00f      	beq.n	8003246 <HAL_UART_IRQHandler+0xfa>
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <HAL_UART_IRQHandler+0xee>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	f043 0208 	orr.w	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d078      	beq.n	8003340 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_UART_IRQHandler+0x11c>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f966 	bl	8003534 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_UART_IRQHandler+0x144>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d031      	beq.n	80032f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8af 	bl	80033f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d123      	bne.n	80032ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <HAL_UART_IRQHandler+0x1fc>)
 80032c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe faf0 	bl	80018ae <HAL_DMA_Abort_IT>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032de:	4610      	mov	r0, r2
 80032e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e2:	e00e      	b.n	8003302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f831 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ea:	e00a      	b.n	8003302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f82d 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f2:	e006      	b.n	8003302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f829 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003300:	e01e      	b.n	8003340 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003302:	bf00      	nop
    return;
 8003304:	e01c      	b.n	8003340 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_UART_IRQHandler+0x1d6>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f89c 	bl	8003458 <UART_Transmit_IT>
    return;
 8003320:	e00f      	b.n	8003342 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_UART_IRQHandler+0x1f6>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8e4 	bl	8003504 <UART_EndTransmit_IT>
    return;
 800333c:	bf00      	nop
 800333e:	e000      	b.n	8003342 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003340:	bf00      	nop
  }
}
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	08003431 	.word	0x08003431

0800334c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003370:	e02c      	b.n	80033cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	d028      	beq.n	80033cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <UART_WaitOnFlagUntilTimeout+0x30>
 8003380:	f7fe f956 	bl	8001630 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	429a      	cmp	r2, r3
 800338e:	d21d      	bcs.n	80033cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800339e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e00f      	b.n	80033ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	461a      	mov	r2, r3
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d0c3      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800340a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff ff7e 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b21      	cmp	r3, #33	; 0x21
 800346a:	d144      	bne.n	80034f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	d11a      	bne.n	80034ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	1c9a      	adds	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]
 800349e:	e00e      	b.n	80034be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]
 80034aa:	e008      	b.n	80034be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	1c59      	adds	r1, r3, #1
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6211      	str	r1, [r2, #32]
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4619      	mov	r1, r3
 80034cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
  }
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800351a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fd fa4b 	bl	80009c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b22      	cmp	r3, #34	; 0x22
 8003546:	d171      	bne.n	800362c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d123      	bne.n	800359a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10e      	bne.n	800357e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	1c9a      	adds	r2, r3, #2
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	629a      	str	r2, [r3, #40]	; 0x28
 800357c:	e029      	b.n	80035d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	b29b      	uxth	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
 8003598:	e01b      	b.n	80035d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6858      	ldr	r0, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	1c59      	adds	r1, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6291      	str	r1, [r2, #40]	; 0x28
 80035b2:	b2c2      	uxtb	r2, r0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e00c      	b.n	80035d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	1c58      	adds	r0, r3, #1
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6288      	str	r0, [r1, #40]	; 0x28
 80035ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29b      	uxth	r3, r3
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4619      	mov	r1, r3
 80035e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d120      	bne.n	8003628 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0220 	bic.w	r2, r2, #32
 80035f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd f90a 	bl	8000838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e002      	b.n	800362e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	b085      	sub	sp, #20
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800367a:	f023 030c 	bic.w	r3, r3, #12
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	430b      	orrs	r3, r1
 8003686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a6:	f040 818b 	bne.w	80039c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4ac1      	ldr	r2, [pc, #772]	; (80039b4 <UART_SetConfig+0x37c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d005      	beq.n	80036c0 <UART_SetConfig+0x88>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4abf      	ldr	r2, [pc, #764]	; (80039b8 <UART_SetConfig+0x380>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f040 80bd 	bne.w	800383a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe ff02 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 80036c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	461d      	mov	r5, r3
 80036ca:	f04f 0600 	mov.w	r6, #0
 80036ce:	46a8      	mov	r8, r5
 80036d0:	46b1      	mov	r9, r6
 80036d2:	eb18 0308 	adds.w	r3, r8, r8
 80036d6:	eb49 0409 	adc.w	r4, r9, r9
 80036da:	4698      	mov	r8, r3
 80036dc:	46a1      	mov	r9, r4
 80036de:	eb18 0805 	adds.w	r8, r8, r5
 80036e2:	eb49 0906 	adc.w	r9, r9, r6
 80036e6:	f04f 0100 	mov.w	r1, #0
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036fa:	4688      	mov	r8, r1
 80036fc:	4691      	mov	r9, r2
 80036fe:	eb18 0005 	adds.w	r0, r8, r5
 8003702:	eb49 0106 	adc.w	r1, r9, r6
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	461d      	mov	r5, r3
 800370c:	f04f 0600 	mov.w	r6, #0
 8003710:	196b      	adds	r3, r5, r5
 8003712:	eb46 0406 	adc.w	r4, r6, r6
 8003716:	461a      	mov	r2, r3
 8003718:	4623      	mov	r3, r4
 800371a:	f7fc fd5d 	bl	80001d8 <__aeabi_uldivmod>
 800371e:	4603      	mov	r3, r0
 8003720:	460c      	mov	r4, r1
 8003722:	461a      	mov	r2, r3
 8003724:	4ba5      	ldr	r3, [pc, #660]	; (80039bc <UART_SetConfig+0x384>)
 8003726:	fba3 2302 	umull	r2, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	461d      	mov	r5, r3
 8003734:	f04f 0600 	mov.w	r6, #0
 8003738:	46a9      	mov	r9, r5
 800373a:	46b2      	mov	sl, r6
 800373c:	eb19 0309 	adds.w	r3, r9, r9
 8003740:	eb4a 040a 	adc.w	r4, sl, sl
 8003744:	4699      	mov	r9, r3
 8003746:	46a2      	mov	sl, r4
 8003748:	eb19 0905 	adds.w	r9, r9, r5
 800374c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800375c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003764:	4689      	mov	r9, r1
 8003766:	4692      	mov	sl, r2
 8003768:	eb19 0005 	adds.w	r0, r9, r5
 800376c:	eb4a 0106 	adc.w	r1, sl, r6
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	461d      	mov	r5, r3
 8003776:	f04f 0600 	mov.w	r6, #0
 800377a:	196b      	adds	r3, r5, r5
 800377c:	eb46 0406 	adc.w	r4, r6, r6
 8003780:	461a      	mov	r2, r3
 8003782:	4623      	mov	r3, r4
 8003784:	f7fc fd28 	bl	80001d8 <__aeabi_uldivmod>
 8003788:	4603      	mov	r3, r0
 800378a:	460c      	mov	r4, r1
 800378c:	461a      	mov	r2, r3
 800378e:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <UART_SetConfig+0x384>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a86      	ldr	r2, [pc, #536]	; (80039bc <UART_SetConfig+0x384>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b0:	4498      	add	r8, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	461d      	mov	r5, r3
 80037b6:	f04f 0600 	mov.w	r6, #0
 80037ba:	46a9      	mov	r9, r5
 80037bc:	46b2      	mov	sl, r6
 80037be:	eb19 0309 	adds.w	r3, r9, r9
 80037c2:	eb4a 040a 	adc.w	r4, sl, sl
 80037c6:	4699      	mov	r9, r3
 80037c8:	46a2      	mov	sl, r4
 80037ca:	eb19 0905 	adds.w	r9, r9, r5
 80037ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037e6:	4689      	mov	r9, r1
 80037e8:	4692      	mov	sl, r2
 80037ea:	eb19 0005 	adds.w	r0, r9, r5
 80037ee:	eb4a 0106 	adc.w	r1, sl, r6
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	461d      	mov	r5, r3
 80037f8:	f04f 0600 	mov.w	r6, #0
 80037fc:	196b      	adds	r3, r5, r5
 80037fe:	eb46 0406 	adc.w	r4, r6, r6
 8003802:	461a      	mov	r2, r3
 8003804:	4623      	mov	r3, r4
 8003806:	f7fc fce7 	bl	80001d8 <__aeabi_uldivmod>
 800380a:	4603      	mov	r3, r0
 800380c:	460c      	mov	r4, r1
 800380e:	461a      	mov	r2, r3
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <UART_SetConfig+0x384>)
 8003812:	fba3 1302 	umull	r1, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a65      	ldr	r2, [pc, #404]	; (80039bc <UART_SetConfig+0x384>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 0207 	and.w	r2, r3, #7
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4442      	add	r2, r8
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	e26f      	b.n	8003d1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7fe fe31 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 800383e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	461d      	mov	r5, r3
 8003844:	f04f 0600 	mov.w	r6, #0
 8003848:	46a8      	mov	r8, r5
 800384a:	46b1      	mov	r9, r6
 800384c:	eb18 0308 	adds.w	r3, r8, r8
 8003850:	eb49 0409 	adc.w	r4, r9, r9
 8003854:	4698      	mov	r8, r3
 8003856:	46a1      	mov	r9, r4
 8003858:	eb18 0805 	adds.w	r8, r8, r5
 800385c:	eb49 0906 	adc.w	r9, r9, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800386c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003874:	4688      	mov	r8, r1
 8003876:	4691      	mov	r9, r2
 8003878:	eb18 0005 	adds.w	r0, r8, r5
 800387c:	eb49 0106 	adc.w	r1, r9, r6
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	461d      	mov	r5, r3
 8003886:	f04f 0600 	mov.w	r6, #0
 800388a:	196b      	adds	r3, r5, r5
 800388c:	eb46 0406 	adc.w	r4, r6, r6
 8003890:	461a      	mov	r2, r3
 8003892:	4623      	mov	r3, r4
 8003894:	f7fc fca0 	bl	80001d8 <__aeabi_uldivmod>
 8003898:	4603      	mov	r3, r0
 800389a:	460c      	mov	r4, r1
 800389c:	461a      	mov	r2, r3
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <UART_SetConfig+0x384>)
 80038a0:	fba3 2302 	umull	r2, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	461d      	mov	r5, r3
 80038ae:	f04f 0600 	mov.w	r6, #0
 80038b2:	46a9      	mov	r9, r5
 80038b4:	46b2      	mov	sl, r6
 80038b6:	eb19 0309 	adds.w	r3, r9, r9
 80038ba:	eb4a 040a 	adc.w	r4, sl, sl
 80038be:	4699      	mov	r9, r3
 80038c0:	46a2      	mov	sl, r4
 80038c2:	eb19 0905 	adds.w	r9, r9, r5
 80038c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038de:	4689      	mov	r9, r1
 80038e0:	4692      	mov	sl, r2
 80038e2:	eb19 0005 	adds.w	r0, r9, r5
 80038e6:	eb4a 0106 	adc.w	r1, sl, r6
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	461d      	mov	r5, r3
 80038f0:	f04f 0600 	mov.w	r6, #0
 80038f4:	196b      	adds	r3, r5, r5
 80038f6:	eb46 0406 	adc.w	r4, r6, r6
 80038fa:	461a      	mov	r2, r3
 80038fc:	4623      	mov	r3, r4
 80038fe:	f7fc fc6b 	bl	80001d8 <__aeabi_uldivmod>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	461a      	mov	r2, r3
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <UART_SetConfig+0x384>)
 800390a:	fba3 1302 	umull	r1, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2164      	movs	r1, #100	; 0x64
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <UART_SetConfig+0x384>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800392a:	4498      	add	r8, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	461d      	mov	r5, r3
 8003930:	f04f 0600 	mov.w	r6, #0
 8003934:	46a9      	mov	r9, r5
 8003936:	46b2      	mov	sl, r6
 8003938:	eb19 0309 	adds.w	r3, r9, r9
 800393c:	eb4a 040a 	adc.w	r4, sl, sl
 8003940:	4699      	mov	r9, r3
 8003942:	46a2      	mov	sl, r4
 8003944:	eb19 0905 	adds.w	r9, r9, r5
 8003948:	eb4a 0a06 	adc.w	sl, sl, r6
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800395c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003960:	4689      	mov	r9, r1
 8003962:	4692      	mov	sl, r2
 8003964:	eb19 0005 	adds.w	r0, r9, r5
 8003968:	eb4a 0106 	adc.w	r1, sl, r6
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	196b      	adds	r3, r5, r5
 8003978:	eb46 0406 	adc.w	r4, r6, r6
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	f7fc fc2a 	bl	80001d8 <__aeabi_uldivmod>
 8003984:	4603      	mov	r3, r0
 8003986:	460c      	mov	r4, r1
 8003988:	461a      	mov	r2, r3
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <UART_SetConfig+0x384>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a07      	ldr	r2, [pc, #28]	; (80039bc <UART_SetConfig+0x384>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 0207 	and.w	r2, r3, #7
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4442      	add	r2, r8
 80039b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039b2:	e1b2      	b.n	8003d1a <UART_SetConfig+0x6e2>
 80039b4:	40011000 	.word	0x40011000
 80039b8:	40011400 	.word	0x40011400
 80039bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4ad7      	ldr	r2, [pc, #860]	; (8003d24 <UART_SetConfig+0x6ec>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d005      	beq.n	80039d6 <UART_SetConfig+0x39e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4ad6      	ldr	r2, [pc, #856]	; (8003d28 <UART_SetConfig+0x6f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	f040 80d1 	bne.w	8003b78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d6:	f7fe fd77 	bl	80024c8 <HAL_RCC_GetPCLK2Freq>
 80039da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	469a      	mov	sl, r3
 80039e0:	f04f 0b00 	mov.w	fp, #0
 80039e4:	46d0      	mov	r8, sl
 80039e6:	46d9      	mov	r9, fp
 80039e8:	eb18 0308 	adds.w	r3, r8, r8
 80039ec:	eb49 0409 	adc.w	r4, r9, r9
 80039f0:	4698      	mov	r8, r3
 80039f2:	46a1      	mov	r9, r4
 80039f4:	eb18 080a 	adds.w	r8, r8, sl
 80039f8:	eb49 090b 	adc.w	r9, r9, fp
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a10:	4688      	mov	r8, r1
 8003a12:	4691      	mov	r9, r2
 8003a14:	eb1a 0508 	adds.w	r5, sl, r8
 8003a18:	eb4b 0609 	adc.w	r6, fp, r9
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	0094      	lsls	r4, r2, #2
 8003a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a34:	008b      	lsls	r3, r1, #2
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	f7fc fbcb 	bl	80001d8 <__aeabi_uldivmod>
 8003a42:	4603      	mov	r3, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	461a      	mov	r2, r3
 8003a48:	4bb8      	ldr	r3, [pc, #736]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	469b      	mov	fp, r3
 8003a58:	f04f 0c00 	mov.w	ip, #0
 8003a5c:	46d9      	mov	r9, fp
 8003a5e:	46e2      	mov	sl, ip
 8003a60:	eb19 0309 	adds.w	r3, r9, r9
 8003a64:	eb4a 040a 	adc.w	r4, sl, sl
 8003a68:	4699      	mov	r9, r3
 8003a6a:	46a2      	mov	sl, r4
 8003a6c:	eb19 090b 	adds.w	r9, r9, fp
 8003a70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a88:	4689      	mov	r9, r1
 8003a8a:	4692      	mov	sl, r2
 8003a8c:	eb1b 0509 	adds.w	r5, fp, r9
 8003a90:	eb4c 060a 	adc.w	r6, ip, sl
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	0094      	lsls	r4, r2, #2
 8003aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aac:	008b      	lsls	r3, r1, #2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	4631      	mov	r1, r6
 8003ab6:	f7fc fb8f 	bl	80001d8 <__aeabi_uldivmod>
 8003aba:	4603      	mov	r3, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b9a      	ldr	r3, [pc, #616]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003ac2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2164      	movs	r1, #100	; 0x64
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	3332      	adds	r3, #50	; 0x32
 8003ad4:	4a95      	ldr	r2, [pc, #596]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae0:	4498      	add	r8, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	469b      	mov	fp, r3
 8003ae6:	f04f 0c00 	mov.w	ip, #0
 8003aea:	46d9      	mov	r9, fp
 8003aec:	46e2      	mov	sl, ip
 8003aee:	eb19 0309 	adds.w	r3, r9, r9
 8003af2:	eb4a 040a 	adc.w	r4, sl, sl
 8003af6:	4699      	mov	r9, r3
 8003af8:	46a2      	mov	sl, r4
 8003afa:	eb19 090b 	adds.w	r9, r9, fp
 8003afe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b16:	4689      	mov	r9, r1
 8003b18:	4692      	mov	sl, r2
 8003b1a:	eb1b 0509 	adds.w	r5, fp, r9
 8003b1e:	eb4c 060a 	adc.w	r6, ip, sl
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4619      	mov	r1, r3
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	0094      	lsls	r4, r2, #2
 8003b36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	4628      	mov	r0, r5
 8003b42:	4631      	mov	r1, r6
 8003b44:	f7fc fb48 	bl	80001d8 <__aeabi_uldivmod>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	460c      	mov	r4, r1
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b77      	ldr	r3, [pc, #476]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003b50:	fba3 1302 	umull	r1, r3, r3, r2
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	2164      	movs	r1, #100	; 0x64
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	3332      	adds	r3, #50	; 0x32
 8003b62:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	095b      	lsrs	r3, r3, #5
 8003b6a:	f003 020f 	and.w	r2, r3, #15
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4442      	add	r2, r8
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	e0d0      	b.n	8003d1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b78:	f7fe fc92 	bl	80024a0 <HAL_RCC_GetPCLK1Freq>
 8003b7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	469a      	mov	sl, r3
 8003b82:	f04f 0b00 	mov.w	fp, #0
 8003b86:	46d0      	mov	r8, sl
 8003b88:	46d9      	mov	r9, fp
 8003b8a:	eb18 0308 	adds.w	r3, r8, r8
 8003b8e:	eb49 0409 	adc.w	r4, r9, r9
 8003b92:	4698      	mov	r8, r3
 8003b94:	46a1      	mov	r9, r4
 8003b96:	eb18 080a 	adds.w	r8, r8, sl
 8003b9a:	eb49 090b 	adc.w	r9, r9, fp
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003baa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bb2:	4688      	mov	r8, r1
 8003bb4:	4691      	mov	r9, r2
 8003bb6:	eb1a 0508 	adds.w	r5, sl, r8
 8003bba:	eb4b 0609 	adc.w	r6, fp, r9
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	0094      	lsls	r4, r2, #2
 8003bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bd6:	008b      	lsls	r3, r1, #2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4623      	mov	r3, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	4631      	mov	r1, r6
 8003be0:	f7fc fafa 	bl	80001d8 <__aeabi_uldivmod>
 8003be4:	4603      	mov	r3, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003bec:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	469b      	mov	fp, r3
 8003bfa:	f04f 0c00 	mov.w	ip, #0
 8003bfe:	46d9      	mov	r9, fp
 8003c00:	46e2      	mov	sl, ip
 8003c02:	eb19 0309 	adds.w	r3, r9, r9
 8003c06:	eb4a 040a 	adc.w	r4, sl, sl
 8003c0a:	4699      	mov	r9, r3
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	eb19 090b 	adds.w	r9, r9, fp
 8003c12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c2a:	4689      	mov	r9, r1
 8003c2c:	4692      	mov	sl, r2
 8003c2e:	eb1b 0509 	adds.w	r5, fp, r9
 8003c32:	eb4c 060a 	adc.w	r6, ip, sl
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	0094      	lsls	r4, r2, #2
 8003c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	4628      	mov	r0, r5
 8003c56:	4631      	mov	r1, r6
 8003c58:	f7fc fabe 	bl	80001d8 <__aeabi_uldivmod>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003c64:	fba3 1302 	umull	r1, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	2164      	movs	r1, #100	; 0x64
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	3332      	adds	r3, #50	; 0x32
 8003c76:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	4498      	add	r8, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	469b      	mov	fp, r3
 8003c88:	f04f 0c00 	mov.w	ip, #0
 8003c8c:	46d9      	mov	r9, fp
 8003c8e:	46e2      	mov	sl, ip
 8003c90:	eb19 0309 	adds.w	r3, r9, r9
 8003c94:	eb4a 040a 	adc.w	r4, sl, sl
 8003c98:	4699      	mov	r9, r3
 8003c9a:	46a2      	mov	sl, r4
 8003c9c:	eb19 090b 	adds.w	r9, r9, fp
 8003ca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ca4:	f04f 0100 	mov.w	r1, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cb8:	4689      	mov	r9, r1
 8003cba:	4692      	mov	sl, r2
 8003cbc:	eb1b 0509 	adds.w	r5, fp, r9
 8003cc0:	eb4c 060a 	adc.w	r6, ip, sl
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	f04f 0400 	mov.w	r4, #0
 8003cd6:	0094      	lsls	r4, r2, #2
 8003cd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cdc:	008b      	lsls	r3, r1, #2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	f7fc fa77 	bl	80001d8 <__aeabi_uldivmod>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <UART_SetConfig+0x6f4>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4442      	add	r2, r8
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	e7ff      	b.n	8003d1a <UART_SetConfig+0x6e2>
 8003d1a:	bf00      	nop
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d24:	40011000 	.word	0x40011000
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	51eb851f 	.word	0x51eb851f

08003d30 <__errno>:
 8003d30:	4b01      	ldr	r3, [pc, #4]	; (8003d38 <__errno+0x8>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000001c 	.word	0x2000001c

08003d3c <__libc_init_array>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	4e0d      	ldr	r6, [pc, #52]	; (8003d74 <__libc_init_array+0x38>)
 8003d40:	4c0d      	ldr	r4, [pc, #52]	; (8003d78 <__libc_init_array+0x3c>)
 8003d42:	1ba4      	subs	r4, r4, r6
 8003d44:	10a4      	asrs	r4, r4, #2
 8003d46:	2500      	movs	r5, #0
 8003d48:	42a5      	cmp	r5, r4
 8003d4a:	d109      	bne.n	8003d60 <__libc_init_array+0x24>
 8003d4c:	4e0b      	ldr	r6, [pc, #44]	; (8003d7c <__libc_init_array+0x40>)
 8003d4e:	4c0c      	ldr	r4, [pc, #48]	; (8003d80 <__libc_init_array+0x44>)
 8003d50:	f000 f894 	bl	8003e7c <_init>
 8003d54:	1ba4      	subs	r4, r4, r6
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	2500      	movs	r5, #0
 8003d5a:	42a5      	cmp	r5, r4
 8003d5c:	d105      	bne.n	8003d6a <__libc_init_array+0x2e>
 8003d5e:	bd70      	pop	{r4, r5, r6, pc}
 8003d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d64:	4798      	blx	r3
 8003d66:	3501      	adds	r5, #1
 8003d68:	e7ee      	b.n	8003d48 <__libc_init_array+0xc>
 8003d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d6e:	4798      	blx	r3
 8003d70:	3501      	adds	r5, #1
 8003d72:	e7f2      	b.n	8003d5a <__libc_init_array+0x1e>
 8003d74:	08003eb4 	.word	0x08003eb4
 8003d78:	08003eb4 	.word	0x08003eb4
 8003d7c:	08003eb4 	.word	0x08003eb4
 8003d80:	08003eb8 	.word	0x08003eb8

08003d84 <malloc>:
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <malloc+0xc>)
 8003d86:	4601      	mov	r1, r0
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	f000 b80b 	b.w	8003da4 <_malloc_r>
 8003d8e:	bf00      	nop
 8003d90:	2000001c 	.word	0x2000001c

08003d94 <memset>:
 8003d94:	4402      	add	r2, r0
 8003d96:	4603      	mov	r3, r0
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <_malloc_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	1ccd      	adds	r5, r1, #3
 8003da8:	f025 0503 	bic.w	r5, r5, #3
 8003dac:	3508      	adds	r5, #8
 8003dae:	2d0c      	cmp	r5, #12
 8003db0:	bf38      	it	cc
 8003db2:	250c      	movcc	r5, #12
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	4606      	mov	r6, r0
 8003db8:	db01      	blt.n	8003dbe <_malloc_r+0x1a>
 8003dba:	42a9      	cmp	r1, r5
 8003dbc:	d903      	bls.n	8003dc6 <_malloc_r+0x22>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	f000 f857 	bl	8003e78 <__malloc_lock>
 8003dca:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <_malloc_r+0xac>)
 8003dcc:	6814      	ldr	r4, [r2, #0]
 8003dce:	4621      	mov	r1, r4
 8003dd0:	b991      	cbnz	r1, 8003df8 <_malloc_r+0x54>
 8003dd2:	4c20      	ldr	r4, [pc, #128]	; (8003e54 <_malloc_r+0xb0>)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	b91b      	cbnz	r3, 8003de0 <_malloc_r+0x3c>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f000 f83d 	bl	8003e58 <_sbrk_r>
 8003dde:	6020      	str	r0, [r4, #0]
 8003de0:	4629      	mov	r1, r5
 8003de2:	4630      	mov	r0, r6
 8003de4:	f000 f838 	bl	8003e58 <_sbrk_r>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d124      	bne.n	8003e36 <_malloc_r+0x92>
 8003dec:	230c      	movs	r3, #12
 8003dee:	6033      	str	r3, [r6, #0]
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 f842 	bl	8003e7a <__malloc_unlock>
 8003df6:	e7e4      	b.n	8003dc2 <_malloc_r+0x1e>
 8003df8:	680b      	ldr	r3, [r1, #0]
 8003dfa:	1b5b      	subs	r3, r3, r5
 8003dfc:	d418      	bmi.n	8003e30 <_malloc_r+0x8c>
 8003dfe:	2b0b      	cmp	r3, #11
 8003e00:	d90f      	bls.n	8003e22 <_malloc_r+0x7e>
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	50cd      	str	r5, [r1, r3]
 8003e06:	18cc      	adds	r4, r1, r3
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f836 	bl	8003e7a <__malloc_unlock>
 8003e0e:	f104 000b 	add.w	r0, r4, #11
 8003e12:	1d23      	adds	r3, r4, #4
 8003e14:	f020 0007 	bic.w	r0, r0, #7
 8003e18:	1ac3      	subs	r3, r0, r3
 8003e1a:	d0d3      	beq.n	8003dc4 <_malloc_r+0x20>
 8003e1c:	425a      	negs	r2, r3
 8003e1e:	50e2      	str	r2, [r4, r3]
 8003e20:	e7d0      	b.n	8003dc4 <_malloc_r+0x20>
 8003e22:	428c      	cmp	r4, r1
 8003e24:	684b      	ldr	r3, [r1, #4]
 8003e26:	bf16      	itet	ne
 8003e28:	6063      	strne	r3, [r4, #4]
 8003e2a:	6013      	streq	r3, [r2, #0]
 8003e2c:	460c      	movne	r4, r1
 8003e2e:	e7eb      	b.n	8003e08 <_malloc_r+0x64>
 8003e30:	460c      	mov	r4, r1
 8003e32:	6849      	ldr	r1, [r1, #4]
 8003e34:	e7cc      	b.n	8003dd0 <_malloc_r+0x2c>
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d005      	beq.n	8003e4c <_malloc_r+0xa8>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4630      	mov	r0, r6
 8003e44:	f000 f808 	bl	8003e58 <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0cf      	beq.n	8003dec <_malloc_r+0x48>
 8003e4c:	6025      	str	r5, [r4, #0]
 8003e4e:	e7db      	b.n	8003e08 <_malloc_r+0x64>
 8003e50:	200000b8 	.word	0x200000b8
 8003e54:	200000bc 	.word	0x200000bc

08003e58 <_sbrk_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4c06      	ldr	r4, [pc, #24]	; (8003e74 <_sbrk_r+0x1c>)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4608      	mov	r0, r1
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	f7fd fb12 	bl	800148c <_sbrk>
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	d102      	bne.n	8003e72 <_sbrk_r+0x1a>
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	b103      	cbz	r3, 8003e72 <_sbrk_r+0x1a>
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	200008d0 	.word	0x200008d0

08003e78 <__malloc_lock>:
 8003e78:	4770      	bx	lr

08003e7a <__malloc_unlock>:
 8003e7a:	4770      	bx	lr

08003e7c <_init>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr

08003e88 <_fini>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr
