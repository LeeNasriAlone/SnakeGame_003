
SnakeGame_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e4  080048e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048ec  080048ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000078  0800496c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800496c  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cffc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d7  00000000  00000000  0002d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  0002f180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  0002fe80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001743a  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a7f  00000000  00000000  00047eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dd14  00000000  00000000  00051931  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  000df6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080047fc 	.word	0x080047fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080047fc 	.word	0x080047fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <scene_mainmenu>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void scene_mainmenu(char scene[1920]){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	/* For observing the beginning of a pixel */
	scene[0] = 'S'; scene[1] = 'T'; scene[2] = 'A'; scene[3] = 'R'; scene[4] = 'T';
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2253      	movs	r2, #83	; 0x53
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3301      	adds	r3, #1
 8000592:	2254      	movs	r2, #84	; 0x54
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3302      	adds	r3, #2
 800059a:	2241      	movs	r2, #65	; 0x41
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3303      	adds	r3, #3
 80005a2:	2252      	movs	r2, #82	; 0x52
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3304      	adds	r3, #4
 80005aa:	2254      	movs	r2, #84	; 0x54
 80005ac:	701a      	strb	r2, [r3, #0]

	scene[80*11 + 36] = 'S';
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f503 7365 	add.w	r3, r3, #916	; 0x394
 80005b4:	2253      	movs	r2, #83	; 0x53
 80005b6:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 37] = 'N';
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f203 3395 	addw	r3, r3, #917	; 0x395
 80005be:	224e      	movs	r2, #78	; 0x4e
 80005c0:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 38] = 'A';
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f203 3396 	addw	r3, r3, #918	; 0x396
 80005c8:	2241      	movs	r2, #65	; 0x41
 80005ca:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 39] = 'K';
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f203 3397 	addw	r3, r3, #919	; 0x397
 80005d2:	224b      	movs	r2, #75	; 0x4b
 80005d4:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 40] = 'E';
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80005dc:	2245      	movs	r2, #69	; 0x45
 80005de:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 43] = 'G';
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f203 339b 	addw	r3, r3, #923	; 0x39b
 80005e6:	2247      	movs	r2, #71	; 0x47
 80005e8:	701a      	strb	r2, [r3, #0]
	scene[80*11 + 44] = 'O';
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f503 7367 	add.w	r3, r3, #924	; 0x39c
 80005f0:	224f      	movs	r2, #79	; 0x4f
 80005f2:	701a      	strb	r2, [r3, #0]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <scene_clear>:

void scene_clear(char scene[1920]){
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	for(int i=0;i<1920; i++) scene[i] = ' ';
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e007      	b.n	800061e <scene_clear+0x1e>
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	2220      	movs	r2, #32
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8000624:	dbf3      	blt.n	800060e <scene_clear+0xe>
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fddc 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f832 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f93a 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f90e 	bl	8000864 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000648:	f000 f896 	bl	8000778 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  scene_clear(scene);
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0x58>)
 800064e:	f7ff ffd7 	bl	8000600 <scene_clear>
  scene_mainmenu(scene);
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <main+0x58>)
 8000654:	f7ff ff94 	bl	8000580 <scene_mainmenu>

  printf("\033[2J\033[H"); /* Clear putty screen */
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0x5c>)
 800065a:	f003 fa93 	bl	8003b84 <iprintf>
  HAL_UART_Receive_IT( &huart2, buffer, sizeof(buffer));
 800065e:	2201      	movs	r2, #1
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <main+0x60>)
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <main+0x64>)
 8000664:	f002 fb64 	bl	8002d30 <HAL_UART_Receive_IT>
  HAL_Delay(delay_mainmenu);
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <main+0x68>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fe33 	bl	80012d8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //snake_move(scene);
	  HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <main+0x6c>)
 8000674:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000678:	4904      	ldr	r1, [pc, #16]	; (800068c <main+0x58>)
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0x64>)
 800067c:	f002 fabf 	bl	8002bfe <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fe28 	bl	80012d8 <HAL_Delay>
	  HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 8000688:	e7f3      	b.n	8000672 <main+0x3e>
 800068a:	bf00      	nop
 800068c:	20000134 	.word	0x20000134
 8000690:	08004814 	.word	0x08004814
 8000694:	200000f0 	.word	0x200000f0
 8000698:	200000f4 	.word	0x200000f4
 800069c:	20000000 	.word	0x20000000
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 f9b6 	bl	8003a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <SystemClock_Config+0xcc>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <SystemClock_Config+0xd0>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000722:	2304      	movs	r3, #4
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	4618      	mov	r0, r3
 800072c:	f001 f8c6 	bl	80018bc <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000736:	f000 f9e9 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fb20 	bl	8001d9c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000762:	f000 f9d3 	bl	8000b0c <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	; 0x38
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <MX_TIM4_Init+0xe4>)
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <MX_TIM4_Init+0xe8>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_TIM4_Init+0xe4>)
 80007b0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80007b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <MX_TIM4_Init+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <MX_TIM4_Init+0xe4>)
 80007be:	22c7      	movs	r2, #199	; 0xc7
 80007c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <MX_TIM4_Init+0xe4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <MX_TIM4_Init+0xe4>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <MX_TIM4_Init+0xe4>)
 80007d0:	f001 fcd6 	bl	8002180 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80007da:	f000 f997 	bl	8000b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4619      	mov	r1, r3
 80007ea:	481c      	ldr	r0, [pc, #112]	; (800085c <MX_TIM4_Init+0xe4>)
 80007ec:	f001 fdee 	bl	80023cc <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80007f6:	f000 f989 	bl	8000b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007fa:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_TIM4_Init+0xe4>)
 80007fc:	f001 fceb 	bl	80021d6 <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000806:	f000 f981 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	4619      	mov	r1, r3
 8000818:	4810      	ldr	r0, [pc, #64]	; (800085c <MX_TIM4_Init+0xe4>)
 800081a:	f002 f935 	bl	8002a88 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000824:	f000 f972 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 99;
 800082c:	2363      	movs	r3, #99	; 0x63
 800082e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2208      	movs	r2, #8
 800083c:	4619      	mov	r1, r3
 800083e:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM4_Init+0xe4>)
 8000840:	f001 fcfe 	bl	8002240 <HAL_TIM_PWM_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800084a:	f000 f95f 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM4_Init+0xe4>)
 8000850:	f000 fb34 	bl	8000ebc <HAL_TIM_MspPostInit>

}
 8000854:	bf00      	nop
 8000856:	3738      	adds	r7, #56	; 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000b0 	.word	0x200000b0
 8000860:	40000800 	.word	0x40000800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MX_USART2_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x4c>)
 800089c:	f002 f962 	bl	8002b64 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f000 f931 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000f4 	.word	0x200000f4
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a2c      	ldr	r2, [pc, #176]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_GPIO_Init+0xd0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <MX_GPIO_Init+0xd0>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_GPIO_Init+0xd4>)
 8000944:	f000 ffa0 	bl	8001888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_GPIO_Init+0xd8>)
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_GPIO_Init+0xdc>)
 800095e:	f000 fe11 	bl	8001584 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_GPIO_Init+0xd4>)
 800097a:	f000 fe03 	bl	8001584 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	10210000 	.word	0x10210000
 8000994:	40020800 	.word	0x40020800

08000998 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    /* Get character from UART. Note that does not read two byte characters like arrows. */
    char c = buffer[0];
 80009a0:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_UART_RxCpltCallback+0x158>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	73fb      	strb	r3, [r7, #15]

    switch(c) {
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	3b41      	subs	r3, #65	; 0x41
 80009aa:	2b36      	cmp	r3, #54	; 0x36
 80009ac:	f200 809a 	bhi.w	8000ae4 <HAL_UART_RxCpltCallback+0x14c>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <HAL_UART_RxCpltCallback+0x20>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	08000abd 	.word	0x08000abd
 80009bc:	08000ae5 	.word	0x08000ae5
 80009c0:	08000ae5 	.word	0x08000ae5
 80009c4:	08000acd 	.word	0x08000acd
 80009c8:	08000ae5 	.word	0x08000ae5
 80009cc:	08000ae5 	.word	0x08000ae5
 80009d0:	08000ae5 	.word	0x08000ae5
 80009d4:	08000ae5 	.word	0x08000ae5
 80009d8:	08000ae5 	.word	0x08000ae5
 80009dc:	08000ae5 	.word	0x08000ae5
 80009e0:	08000ad5 	.word	0x08000ad5
 80009e4:	08000ae5 	.word	0x08000ae5
 80009e8:	08000ae5 	.word	0x08000ae5
 80009ec:	08000ae5 	.word	0x08000ae5
 80009f0:	08000ae5 	.word	0x08000ae5
 80009f4:	08000ae5 	.word	0x08000ae5
 80009f8:	08000ae5 	.word	0x08000ae5
 80009fc:	08000ae5 	.word	0x08000ae5
 8000a00:	08000aad 	.word	0x08000aad
 8000a04:	08000ae5 	.word	0x08000ae5
 8000a08:	08000ae5 	.word	0x08000ae5
 8000a0c:	08000ae5 	.word	0x08000ae5
 8000a10:	08000a9d 	.word	0x08000a9d
 8000a14:	08000ae5 	.word	0x08000ae5
 8000a18:	08000ae5 	.word	0x08000ae5
 8000a1c:	08000ae5 	.word	0x08000ae5
 8000a20:	08000ae5 	.word	0x08000ae5
 8000a24:	08000ae5 	.word	0x08000ae5
 8000a28:	08000ae5 	.word	0x08000ae5
 8000a2c:	08000ae5 	.word	0x08000ae5
 8000a30:	08000ae5 	.word	0x08000ae5
 8000a34:	08000ae5 	.word	0x08000ae5
 8000a38:	08000ab5 	.word	0x08000ab5
 8000a3c:	08000ae5 	.word	0x08000ae5
 8000a40:	08000ae5 	.word	0x08000ae5
 8000a44:	08000ac5 	.word	0x08000ac5
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000ae5 	.word	0x08000ae5
 8000a50:	08000ae5 	.word	0x08000ae5
 8000a54:	08000ae5 	.word	0x08000ae5
 8000a58:	08000ae5 	.word	0x08000ae5
 8000a5c:	08000ae5 	.word	0x08000ae5
 8000a60:	08000add 	.word	0x08000add
 8000a64:	08000ae5 	.word	0x08000ae5
 8000a68:	08000ae5 	.word	0x08000ae5
 8000a6c:	08000ae5 	.word	0x08000ae5
 8000a70:	08000ae5 	.word	0x08000ae5
 8000a74:	08000ae5 	.word	0x08000ae5
 8000a78:	08000ae5 	.word	0x08000ae5
 8000a7c:	08000ae5 	.word	0x08000ae5
 8000a80:	08000aa5 	.word	0x08000aa5
 8000a84:	08000ae5 	.word	0x08000ae5
 8000a88:	08000ae5 	.word	0x08000ae5
 8000a8c:	08000ae5 	.word	0x08000ae5
 8000a90:	08000a95 	.word	0x08000a95
    case 'w' :
        snake_set_direction(UP);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 f981 	bl	8000d9c <snake_set_direction>
        break;
 8000a9a:	e024      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'W' :
        snake_set_direction(UP);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 f97d 	bl	8000d9c <snake_set_direction>
        break;
 8000aa2:	e020      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
        /* Move snake in DOWN direction if allowed */
    case 's' :
        snake_set_direction(DOWN);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f979 	bl	8000d9c <snake_set_direction>
        break;
 8000aaa:	e01c      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'S' :
        snake_set_direction(DOWN);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f975 	bl	8000d9c <snake_set_direction>
        break;
 8000ab2:	e018      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
        /* Move snake in LEFT direction if allowed */
    case 'a' :
        snake_set_direction(LEFT);
 8000ab4:	2004      	movs	r0, #4
 8000ab6:	f000 f971 	bl	8000d9c <snake_set_direction>
        break;
 8000aba:	e014      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'A' :
        snake_set_direction(LEFT);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f000 f96d 	bl	8000d9c <snake_set_direction>
        break;
 8000ac2:	e010      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
        /* Move snake in RIGHT direction if allowed */
    case 'd' :
        snake_set_direction(RIGHT);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 f969 	bl	8000d9c <snake_set_direction>
        break;
 8000aca:	e00c      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'D' :
        snake_set_direction(RIGHT);
 8000acc:	2002      	movs	r0, #2
 8000ace:	f000 f965 	bl	8000d9c <snake_set_direction>
        break;
 8000ad2:	e008      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'K' :
    	snake_init(scene);
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <HAL_UART_RxCpltCallback+0x15c>)
 8000ad6:	f000 f8cf 	bl	8000c78 <snake_init>
    	break;
 8000ada:	e004      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    case 'k' :
        snake_init(scene);
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_RxCpltCallback+0x15c>)
 8000ade:	f000 f8cb 	bl	8000c78 <snake_init>
        break;
 8000ae2:	e000      	b.n	8000ae6 <HAL_UART_RxCpltCallback+0x14e>
    default :
        break;
 8000ae4:	bf00      	nop
    }
    /* Clear interrupt flag */
    //USART_ClearFlag(USART2, USART_FLAG_RXNE);
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000f0 	.word	0x200000f0
 8000af4:	20000134 	.word	0x20000134

08000af8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <createQueue>:



// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity){
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
 8000b22:	2014      	movs	r0, #20
 8000b24:	f002 ff76 	bl	8003a14 <malloc>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	601a      	str	r2, [r3, #0]
    queue->rear = capacity - 1;  // This is important, see the enqueue
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	605a      	str	r2, [r3, #4]
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 ff5f 	bl	8003a14 <malloc>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
    return queue;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <isFull>:

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <isEmpty>:

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffd2 	bl	8000b68 <isFull>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11f      	bne.n	8000c0a <enqueue+0x56>
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	fbb2 f1f3 	udiv	r1, r2, r3
 8000bda:	fb03 f301 	mul.w	r3, r3, r1
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
    printf("%d enqueued to queue\n", item);
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	4804      	ldr	r0, [pc, #16]	; (8000c14 <enqueue+0x60>)
 8000c04:	f002 ffbe 	bl	8003b84 <iprintf>
 8000c08:	e000      	b.n	8000c0c <enqueue+0x58>
        return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	0800481c 	.word	0x0800481c

08000c18 <front>:
    return item;
}

// Function to get front of queue
int front(struct Queue* queue)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ffb5 	bl	8000b90 <isEmpty>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <front+0x1a>
        return INT_MIN;
 8000c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c30:	e006      	b.n	8000c40 <front+0x28>
    return queue->array[queue->front];
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <rear>:

// Function to get rear of queue
int rear(struct Queue* queue)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff9d 	bl	8000b90 <isEmpty>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <rear+0x1a>
        return INT_MIN;
 8000c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c60:	e006      	b.n	8000c70 <rear+0x28>
    return queue->array[queue->rear];
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <snake_init>:
static int *snake_tail_x;
static int *snake_tail_y;

// declare function before call

void snake_init(char scene[1920]){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	snake_x = createQueue(1000);
 8000c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c84:	f7ff ff49 	bl	8000b1a <createQueue>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <snake_init+0x90>)
 8000c8c:	601a      	str	r2, [r3, #0]
	snake_y = createQueue(1000);
 8000c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c92:	f7ff ff42 	bl	8000b1a <createQueue>
 8000c96:	4602      	mov	r2, r0
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <snake_init+0x94>)
 8000c9a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; ++i) { snake_enqueue(0, i, scene); }
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e007      	b.n	8000cb2 <snake_init+0x3a>
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f83a 	bl	8000d20 <snake_enqueue>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	ddf4      	ble.n	8000ca2 <snake_init+0x2a>
	snake_head_x = rear(snake_x);
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <snake_init+0x90>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffc3 	bl	8000c48 <rear>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <snake_init+0x98>)
 8000cc8:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <snake_init+0x94>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffba 	bl	8000c48 <rear>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <snake_init+0x9c>)
 8000cda:	601a      	str	r2, [r3, #0]
	snake_tail_x = front(snake_x);
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <snake_init+0x90>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff99 	bl	8000c18 <front>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <snake_init+0xa0>)
 8000cec:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <snake_init+0x94>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff90 	bl	8000c18 <front>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <snake_init+0xa4>)
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200008b8 	.word	0x200008b8
 8000d0c:	200008b4 	.word	0x200008b4
 8000d10:	20000094 	.word	0x20000094
 8000d14:	20000098 	.word	0x20000098
 8000d18:	2000009c 	.word	0x2000009c
 8000d1c:	200000a0 	.word	0x200000a0

08000d20 <snake_enqueue>:

void snake_enqueue(int x, int y, char scene[1920]){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	scene[80*x + y] = '@';
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	461a      	mov	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	701a      	strb	r2, [r3, #0]
	enqueue(snake_x, x);
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <snake_enqueue+0x6c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68f9      	ldr	r1, [r7, #12]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff31 	bl	8000bb4 <enqueue>
	enqueue(snake_y, y);
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <snake_enqueue+0x70>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff2b 	bl	8000bb4 <enqueue>
	snake_head_x = rear(snake_x);
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <snake_enqueue+0x6c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff70 	bl	8000c48 <rear>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <snake_enqueue+0x74>)
 8000d6e:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <snake_enqueue+0x70>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff67 	bl	8000c48 <rear>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <snake_enqueue+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200008b8 	.word	0x200008b8
 8000d90:	200008b4 	.word	0x200008b4
 8000d94:	20000094 	.word	0x20000094
 8000d98:	20000098 	.word	0x20000098

08000d9c <snake_set_direction>:
	snake_tail_x = front(snake_x);
	snake_tail_y = front(snake_y);
	scene[80*x + y] = ' ';
}

void snake_set_direction(int direction) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

    /* Sets a legal direction for the snake. */
    /* Note that the snake cannot turn back on itself*/
    switch(direction) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d82b      	bhi.n	8000e04 <snake_set_direction+0x68>
 8000dac:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <snake_set_direction+0x18>)
 8000dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db2:	bf00      	nop
 8000db4:	08000de5 	.word	0x08000de5
 8000db8:	08000dd5 	.word	0x08000dd5
 8000dbc:	08000df5 	.word	0x08000df5
 8000dc0:	08000dc5 	.word	0x08000dc5
    case LEFT :
        if(snake_direction != RIGHT) {
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <snake_set_direction+0x88>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d01d      	beq.n	8000e08 <snake_set_direction+0x6c>
            snake_direction = LEFT;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <snake_set_direction+0x88>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000dd2:	e019      	b.n	8000e08 <snake_set_direction+0x6c>

    case RIGHT :
        if(snake_direction != LEFT) {
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <snake_set_direction+0x88>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d017      	beq.n	8000e0c <snake_set_direction+0x70>
            snake_direction = RIGHT;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <snake_set_direction+0x88>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000de2:	e013      	b.n	8000e0c <snake_set_direction+0x70>

    case UP :
        if(snake_direction != DOWN) {
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <snake_set_direction+0x88>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d011      	beq.n	8000e10 <snake_set_direction+0x74>
            snake_direction = UP;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <snake_set_direction+0x88>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
        }
        break;
 8000df2:	e00d      	b.n	8000e10 <snake_set_direction+0x74>

    case DOWN :
        if(snake_direction != UP) {
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <snake_set_direction+0x88>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d00b      	beq.n	8000e14 <snake_set_direction+0x78>
            snake_direction = DOWN;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <snake_set_direction+0x88>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	601a      	str	r2, [r3, #0]
        }
        break;
 8000e02:	e007      	b.n	8000e14 <snake_set_direction+0x78>
    default :
        break;
 8000e04:	bf00      	nop
 8000e06:	e006      	b.n	8000e16 <snake_set_direction+0x7a>
        break;
 8000e08:	bf00      	nop
 8000e0a:	e004      	b.n	8000e16 <snake_set_direction+0x7a>
        break;
 8000e0c:	bf00      	nop
 8000e0e:	e002      	b.n	8000e16 <snake_set_direction+0x7a>
        break;
 8000e10:	bf00      	nop
 8000e12:	e000      	b.n	8000e16 <snake_set_direction+0x7a>
        break;
 8000e14:	bf00      	nop
    }

}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e66:	2007      	movs	r0, #7
 8000e68:	f000 fb28 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d10d      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_TIM_Base_MspInit+0x40>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40000800 	.word	0x40000800
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_TIM_MspPostInit+0x68>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d11e      	bne.n	8000f1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_TIM_MspPostInit+0x6c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_TIM_MspPostInit+0x70>)
 8000f18:	f000 fb34 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40000800 	.word	0x40000800
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <HAL_UART_MspInit+0x94>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d133      	bne.n	8000fba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_UART_MspInit+0x98>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <HAL_UART_MspInit+0x9c>)
 8000fa6:	f000 faed 	bl	8001584 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	2026      	movs	r0, #38	; 0x26
 8000fb0:	f000 fa8f 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fb4:	2026      	movs	r0, #38	; 0x26
 8000fb6:	f000 faa8 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f938 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <USART2_IRQHandler+0x10>)
 8001032:	f001 fed3 	bl	8002ddc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000f4 	.word	0x200000f4

08001040 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
	}

return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	60ba      	str	r2, [r7, #8]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	dbf1      	blt.n	800108c <_write+0x12>
	}
	return len;
 80010a8:	687b      	ldr	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_close>:

int _close(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	return -1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010da:	605a      	str	r2, [r3, #4]
	return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <_isatty>:

int _isatty(int file)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	return 1;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <_sbrk+0x50>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x16>
		heap_end = &end;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <_sbrk+0x50>)
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <_sbrk+0x54>)
 8001130:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <_sbrk+0x50>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <_sbrk+0x50>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	466a      	mov	r2, sp
 8001142:	4293      	cmp	r3, r2
 8001144:	d907      	bls.n	8001156 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001146:	f002 fc3b 	bl	80039c0 <__errno>
 800114a:	4602      	mov	r2, r0
 800114c:	230c      	movs	r3, #12
 800114e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	e006      	b.n	8001164 <_sbrk+0x48>
	}

	heap_end += incr;
 8001156:	4b05      	ldr	r3, [pc, #20]	; (800116c <_sbrk+0x50>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a03      	ldr	r2, [pc, #12]	; (800116c <_sbrk+0x50>)
 8001160:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000a4 	.word	0x200000a4
 8001170:	200008c8 	.word	0x200008c8

08001174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <SystemInit+0x28>)
 800117a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <SystemInit+0x28>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <SystemInit+0x28>)
 800118a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118e:	609a      	str	r2, [r3, #8]
#endif
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011a6:	e003      	b.n	80011b0 <LoopCopyDataInit>

080011a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ae:	3104      	adds	r1, #4

080011b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011b8:	d3f6      	bcc.n	80011a8 <CopyDataInit>
  ldr  r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011bc:	e002      	b.n	80011c4 <LoopFillZerobss>

080011be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011c0:	f842 3b04 	str.w	r3, [r2], #4

080011c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011c8:	d3f9      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ca:	f7ff ffd3 	bl	8001174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f002 fbfd 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fa2f 	bl	8000634 <main>
  bx  lr    
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011dc:	080048f4 	.word	0x080048f4
  ldr  r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011e4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80011e8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80011ec:	200008c4 	.word	0x200008c4

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f94d 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f808 	bl	8001238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fdfe 	bl	8000e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x54>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x58>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f965 	bl	8001526 <HAL_SYSTICK_Config>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00e      	b.n	8001284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d80a      	bhi.n	8001282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f92d 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001278:	4a06      	ldr	r2, [pc, #24]	; (8001294 <HAL_InitTick+0x5c>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	e000      	b.n	8001284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000008 	.word	0x20000008
 8001290:	20000010 	.word	0x20000010
 8001294:	2000000c 	.word	0x2000000c

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000010 	.word	0x20000010
 80012bc:	200008bc 	.word	0x200008bc

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200008bc 	.word	0x200008bc

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_Delay+0x40>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000010 	.word	0x20000010

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d004      	beq.n	800155c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e00c      	b.n	8001576 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2205      	movs	r2, #5
 8001560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e159      	b.n	8001854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8148 	bne.w	800184e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0x5a>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0xfc>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b12      	cmp	r3, #18
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a2 	beq.w	800184e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a55      	ldr	r2, [pc, #340]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_GPIO_Init+0x2e4>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a48      	ldr	r2, [pc, #288]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x202>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a47      	ldr	r2, [pc, #284]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x1fe>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a46      	ldr	r2, [pc, #280]	; (8001878 <HAL_GPIO_Init+0x2f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x1fa>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a45      	ldr	r2, [pc, #276]	; (800187c <HAL_GPIO_Init+0x2f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x1f6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a44      	ldr	r2, [pc, #272]	; (8001880 <HAL_GPIO_Init+0x2fc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x1f2>
 8001772:	2304      	movs	r3, #4
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001776:	2307      	movs	r3, #7
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_GPIO_Init+0x2e8>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_GPIO_Init+0x300>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_GPIO_Init+0x300>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_GPIO_Init+0x300>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_GPIO_Init+0x300>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f aea2 	bls.w	80015a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40013c00 	.word	0x40013c00

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	807b      	strh	r3, [r7, #2]
 8001894:	4613      	mov	r3, r2
 8001896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	041a      	lsls	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e25b      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d075      	beq.n	80019c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018da:	4ba3      	ldr	r3, [pc, #652]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d00c      	beq.n	8001900 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018e6:	4ba0      	ldr	r3, [pc, #640]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d112      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f2:	4b9d      	ldr	r3, [pc, #628]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018fe:	d10b      	bne.n	8001918 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4b99      	ldr	r3, [pc, #612]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d05b      	beq.n	80019c4 <HAL_RCC_OscConfig+0x108>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d157      	bne.n	80019c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e236      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x74>
 8001922:	4b91      	ldr	r3, [pc, #580]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a90      	ldr	r2, [pc, #576]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x98>
 800193a:	4b8b      	ldr	r3, [pc, #556]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a8a      	ldr	r2, [pc, #552]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b88      	ldr	r3, [pc, #544]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a87      	ldr	r2, [pc, #540]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xb0>
 8001954:	4b84      	ldr	r3, [pc, #528]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a83      	ldr	r2, [pc, #524]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b81      	ldr	r3, [pc, #516]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a80      	ldr	r2, [pc, #512]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fca4 	bl	80012c0 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fca0 	bl	80012c0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1fb      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b76      	ldr	r3, [pc, #472]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xc0>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fc90 	bl	80012c0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc8c 	bl	80012c0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1e7      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b6c      	ldr	r3, [pc, #432]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0xe8>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019de:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1bb      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4952      	ldr	r1, [pc, #328]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <HAL_RCC_OscConfig+0x2b0>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc45 	bl	80012c0 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fc41 	bl	80012c0 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e19c      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4940      	ldr	r1, [pc, #256]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <HAL_RCC_OscConfig+0x2b0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc24 	bl	80012c0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc20 	bl	80012c0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e17b      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d030      	beq.n	8001b08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d016      	beq.n	8001adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_OscConfig+0x2b4>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fc04 	bl	80012c0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc00 	bl	80012c0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e15b      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x200>
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x2b4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fbed 	bl	80012c0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aea:	f7ff fbe9 	bl	80012c0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e144      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a0 	beq.w	8001c56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_OscConfig+0x2b8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d121      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x2b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_RCC_OscConfig+0x2b8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fbaf 	bl	80012c0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	e011      	b.n	8001b8a <HAL_RCC_OscConfig+0x2ce>
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	42470000 	.word	0x42470000
 8001b70:	42470e80 	.word	0x42470e80
 8001b74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7ff fba2 	bl	80012c0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0fd      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_RCC_OscConfig+0x4d4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0x2f0>
 8001b9e:	4b7d      	ldr	r3, [pc, #500]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	4a7c      	ldr	r2, [pc, #496]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8001baa:	e01c      	b.n	8001be6 <HAL_RCC_OscConfig+0x32a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10c      	bne.n	8001bce <HAL_RCC_OscConfig+0x312>
 8001bb4:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a76      	ldr	r2, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc4:	4a73      	ldr	r2, [pc, #460]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6713      	str	r3, [r2, #112]	; 0x70
 8001bcc:	e00b      	b.n	8001be6 <HAL_RCC_OscConfig+0x32a>
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a70      	ldr	r2, [pc, #448]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bde:	4a6d      	ldr	r2, [pc, #436]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d015      	beq.n	8001c1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb67 	bl	80012c0 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fb63 	bl	80012c0 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0bc      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	4b61      	ldr	r3, [pc, #388]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ee      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x33a>
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fb51 	bl	80012c0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff fb4d 	bl	80012c0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0a6      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ee      	bne.n	8001c22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8092 	beq.w	8001d84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d05c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d141      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	4b48      	ldr	r3, [pc, #288]	; (8001d98 <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fb21 	bl	80012c0 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fb1d 	bl	80012c0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e078      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	019b      	lsls	r3, r3, #6
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc2:	061b      	lsls	r3, r3, #24
 8001cc4:	4933      	ldr	r1, [pc, #204]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cca:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x4dc>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff faf6 	bl	80012c0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff faf2 	bl	80012c0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e04d      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x41c>
 8001cf6:	e045      	b.n	8001d84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x4dc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fadf 	bl	80012c0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff fadb 	bl	80012c0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e036      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x44a>
 8001d24:	e02e      	b.n	8001d84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e029      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_OscConfig+0x4d8>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d115      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d10d      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d106      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000
 8001d94:	40023800 	.word	0x40023800
 8001d98:	42470060 	.word	0x42470060

08001d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0cc      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d90c      	bls.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0b8      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e08:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	494d      	ldr	r1, [pc, #308]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d044      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d119      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e067      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4934      	ldr	r1, [pc, #208]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff fa18 	bl	80012c0 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7ff fa14 	bl	80012c0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e04f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d20c      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e032      	b.n	8001f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f22:	f000 f821 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f26:	4601      	mov	r1, r0
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	fa21 f303 	lsr.w	r3, r1, r3
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f978 	bl	8001238 <HAL_InitTick>

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023c00 	.word	0x40023c00
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08004834 	.word	0x08004834
 8001f60:	20000008 	.word	0x20000008
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	2300      	movs	r3, #0
 8001f78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d007      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x32>
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80b4 	bne.w	80020fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b5e      	ldr	r3, [pc, #376]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f96:	60bb      	str	r3, [r7, #8]
       break;
 8001f98:	e0b3      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f9a:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001f9c:	60bb      	str	r3, [r7, #8]
      break;
 8001f9e:	e0b0      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d04a      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb6:	4b55      	ldr	r3, [pc, #340]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	099b      	lsrs	r3, r3, #6
 8001fbc:	f04f 0400 	mov.w	r4, #0
 8001fc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	ea03 0501 	and.w	r5, r3, r1
 8001fcc:	ea04 0602 	and.w	r6, r4, r2
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	4632      	mov	r2, r6
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	0154      	lsls	r4, r2, #5
 8001fde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe2:	014b      	lsls	r3, r1, #5
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	1b49      	subs	r1, r1, r5
 8001fea:	eb62 0206 	sbc.w	r2, r2, r6
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	f04f 0400 	mov.w	r4, #0
 8001ff6:	0194      	lsls	r4, r2, #6
 8001ff8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ffc:	018b      	lsls	r3, r1, #6
 8001ffe:	1a5b      	subs	r3, r3, r1
 8002000:	eb64 0402 	sbc.w	r4, r4, r2
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	00e2      	lsls	r2, r4, #3
 800200e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002012:	00d9      	lsls	r1, r3, #3
 8002014:	460b      	mov	r3, r1
 8002016:	4614      	mov	r4, r2
 8002018:	195b      	adds	r3, r3, r5
 800201a:	eb44 0406 	adc.w	r4, r4, r6
 800201e:	f04f 0100 	mov.w	r1, #0
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	0262      	lsls	r2, r4, #9
 8002028:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800202c:	0259      	lsls	r1, r3, #9
 800202e:	460b      	mov	r3, r1
 8002030:	4614      	mov	r4, r2
 8002032:	4618      	mov	r0, r3
 8002034:	4621      	mov	r1, r4
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f04f 0400 	mov.w	r4, #0
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	f7fe f91e 	bl	8000280 <__aeabi_uldivmod>
 8002044:	4603      	mov	r3, r0
 8002046:	460c      	mov	r4, r1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e049      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800204c:	4b2f      	ldr	r3, [pc, #188]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	f04f 0400 	mov.w	r4, #0
 8002056:	f240 11ff 	movw	r1, #511	; 0x1ff
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	ea03 0501 	and.w	r5, r3, r1
 8002062:	ea04 0602 	and.w	r6, r4, r2
 8002066:	4629      	mov	r1, r5
 8002068:	4632      	mov	r2, r6
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	0154      	lsls	r4, r2, #5
 8002074:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002078:	014b      	lsls	r3, r1, #5
 800207a:	4619      	mov	r1, r3
 800207c:	4622      	mov	r2, r4
 800207e:	1b49      	subs	r1, r1, r5
 8002080:	eb62 0206 	sbc.w	r2, r2, r6
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	f04f 0400 	mov.w	r4, #0
 800208c:	0194      	lsls	r4, r2, #6
 800208e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002092:	018b      	lsls	r3, r1, #6
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	eb64 0402 	sbc.w	r4, r4, r2
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	00e2      	lsls	r2, r4, #3
 80020a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020a8:	00d9      	lsls	r1, r3, #3
 80020aa:	460b      	mov	r3, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	195b      	adds	r3, r3, r5
 80020b0:	eb44 0406 	adc.w	r4, r4, r6
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	02a2      	lsls	r2, r4, #10
 80020be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020c2:	0299      	lsls	r1, r3, #10
 80020c4:	460b      	mov	r3, r1
 80020c6:	4614      	mov	r4, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	4621      	mov	r1, r4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	f7fe f8d3 	bl	8000280 <__aeabi_uldivmod>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	0c1b      	lsrs	r3, r3, #16
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	60bb      	str	r3, [r7, #8]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80020fe:	60bb      	str	r3, [r7, #8]
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	68bb      	ldr	r3, [r7, #8]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCC_GetHCLKFreq+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002134:	f7ff fff0 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002138:	4601      	mov	r1, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0a9b      	lsrs	r3, r3, #10
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002146:	5cd3      	ldrb	r3, [r2, r3]
 8002148:	fa21 f303 	lsr.w	r3, r1, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08004844 	.word	0x08004844

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800215c:	f7ff ffdc 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002160:	4601      	mov	r1, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0b5b      	lsrs	r3, r3, #13
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4a03      	ldr	r2, [pc, #12]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08004844 	.word	0x08004844

08002180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e01d      	b.n	80021ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fe66 	bl	8000e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3304      	adds	r3, #4
 80021bc:	4619      	mov	r1, r3
 80021be:	4610      	mov	r0, r2
 80021c0:	f000 f9bc 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e01d      	b.n	8002224 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f815 	bl	800222c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f000 f991 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002256:	2302      	movs	r3, #2
 8002258:	e0b4      	b.n	80023c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	f200 809f 	bhi.w	80023b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022ad 	.word	0x080022ad
 800227c:	080023b1 	.word	0x080023b1
 8002280:	080023b1 	.word	0x080023b1
 8002284:	080023b1 	.word	0x080023b1
 8002288:	080022ed 	.word	0x080022ed
 800228c:	080023b1 	.word	0x080023b1
 8002290:	080023b1 	.word	0x080023b1
 8002294:	080023b1 	.word	0x080023b1
 8002298:	0800232f 	.word	0x0800232f
 800229c:	080023b1 	.word	0x080023b1
 80022a0:	080023b1 	.word	0x080023b1
 80022a4:	080023b1 	.word	0x080023b1
 80022a8:	0800236f 	.word	0x0800236f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f9c2 	bl	800263c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6999      	ldr	r1, [r3, #24]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	619a      	str	r2, [r3, #24]
      break;
 80022ea:	e062      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fa08 	bl	8002708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]
      break;
 800232c:	e041      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa53 	bl	80027e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0208 	orr.w	r2, r2, #8
 8002348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0204 	bic.w	r2, r2, #4
 8002358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	61da      	str	r2, [r3, #28]
      break;
 800236c:	e021      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fa9d 	bl	80028b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	61da      	str	r2, [r3, #28]
      break;
 80023ae:	e000      	b.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80023b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_TIM_ConfigClockSource+0x18>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0a6      	b.n	8002532 <HAL_TIM_ConfigClockSource+0x166>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800240a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d067      	beq.n	80024ec <HAL_TIM_ConfigClockSource+0x120>
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d80b      	bhi.n	8002438 <HAL_TIM_ConfigClockSource+0x6c>
 8002420:	2b10      	cmp	r3, #16
 8002422:	d073      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d802      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x62>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d06f      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800242c:	e078      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800242e:	2b20      	cmp	r3, #32
 8002430:	d06c      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
 8002432:	2b30      	cmp	r3, #48	; 0x30
 8002434:	d06a      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002436:	e073      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002438:	2b70      	cmp	r3, #112	; 0x70
 800243a:	d00d      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0x8c>
 800243c:	2b70      	cmp	r3, #112	; 0x70
 800243e:	d804      	bhi.n	800244a <HAL_TIM_ConfigClockSource+0x7e>
 8002440:	2b50      	cmp	r3, #80	; 0x50
 8002442:	d033      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xe0>
 8002444:	2b60      	cmp	r3, #96	; 0x60
 8002446:	d041      	beq.n	80024cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002448:	e06a      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d066      	beq.n	800251e <HAL_TIM_ConfigClockSource+0x152>
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002454:	d017      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002456:	e063      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f000 faee 	bl	8002a48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800247a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
      break;
 8002484:	e04c      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f000 fad7 	bl	8002a48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a8:	609a      	str	r2, [r3, #8]
      break;
 80024aa:	e039      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f000 fa4b 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2150      	movs	r1, #80	; 0x50
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 faa4 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80024ca:	e029      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	461a      	mov	r2, r3
 80024da:	f000 fa6a 	bl	80029b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2160      	movs	r1, #96	; 0x60
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fa94 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 80024ea:	e019      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f000 fa2b 	bl	8002954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa84 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 800250a:	e009      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f000 fa7b 	bl	8002a12 <TIM_ITRx_SetConfig>
      break;
 800251c:	e000      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800251e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a34      	ldr	r2, [pc, #208]	; (8002620 <TIM_Base_SetConfig+0xe4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00f      	beq.n	8002574 <TIM_Base_SetConfig+0x38>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255a:	d00b      	beq.n	8002574 <TIM_Base_SetConfig+0x38>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <TIM_Base_SetConfig+0xe8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <TIM_Base_SetConfig+0x38>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a30      	ldr	r2, [pc, #192]	; (8002628 <TIM_Base_SetConfig+0xec>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_Base_SetConfig+0x38>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a2f      	ldr	r2, [pc, #188]	; (800262c <TIM_Base_SetConfig+0xf0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <TIM_Base_SetConfig+0xe4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01b      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d017      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <TIM_Base_SetConfig+0xe8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <TIM_Base_SetConfig+0xec>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00f      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <TIM_Base_SetConfig+0xf0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <TIM_Base_SetConfig+0xf4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <TIM_Base_SetConfig+0xf8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d003      	beq.n	80025c6 <TIM_Base_SetConfig+0x8a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <TIM_Base_SetConfig+0xfc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d108      	bne.n	80025d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <TIM_Base_SetConfig+0xe4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]
}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40014000 	.word	0x40014000
 8002634:	40014400 	.word	0x40014400
 8002638:	40014800 	.word	0x40014800

0800263c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0201 	bic.w	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f023 0302 	bic.w	r3, r3, #2
 8002684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <TIM_OC1_SetConfig+0xc8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10c      	bne.n	80026b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0308 	bic.w	r3, r3, #8
 800269e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a13      	ldr	r2, [pc, #76]	; (8002704 <TIM_OC1_SetConfig+0xc8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40010000 	.word	0x40010000

08002708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0210 	bic.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f023 0320 	bic.w	r3, r3, #32
 8002752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <TIM_OC2_SetConfig+0xd4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10d      	bne.n	8002784 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002782:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <TIM_OC2_SetConfig+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d113      	bne.n	80027b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800279a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40010000 	.word	0x40010000

080027e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <TIM_OC3_SetConfig+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10d      	bne.n	800285a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <TIM_OC3_SetConfig+0xd0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d113      	bne.n	800288a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	621a      	str	r2, [r3, #32]
}
 80028a4:	bf00      	nop
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40010000 	.word	0x40010000

080028b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <TIM_OC4_SetConfig+0x9c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d109      	bne.n	8002928 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800291a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	621a      	str	r2, [r3, #32]
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000

08002954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 030a 	bic.w	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0210 	bic.w	r2, r3, #16
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	031b      	lsls	r3, r3, #12
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f043 0307 	orr.w	r3, r3, #7
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	021a      	lsls	r2, r3, #8
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e050      	b.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aec:	d013      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40014000 	.word	0x40014000

08002b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e03f      	b.n	8002bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe f9d0 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fb8d 	bl	80032c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	f040 8083 	bne.w	8002d26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_Transmit+0x2e>
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e07b      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Transmit+0x40>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e074      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fb34 	bl	80012c0 <HAL_GetTick>
 8002c58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c6e:	e042      	b.n	8002cf6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d122      	bne.n	8002cce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f9ac 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e042      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	e017      	b.n	8002cf6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	e013      	b.n	8002cf6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f989 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e01f      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	60ba      	str	r2, [r7, #8]
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1b7      	bne.n	8002c70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f970 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e006      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d140      	bne.n	8002dcc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Receive_IT+0x26>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e039      	b.n	8002dce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Receive_IT+0x38>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e032      	b.n	8002dce <HAL_UART_Receive_IT+0x9e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	88fa      	ldrh	r2, [r7, #6]
 8002d7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2222      	movs	r2, #34	; 0x22
 8002d8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_UART_IRQHandler+0x52>
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f9cc 	bl	80031c4 <UART_Receive_IT>
      return;
 8002e2c:	e0d1      	b.n	8002fd2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80b0 	beq.w	8002f96 <HAL_UART_IRQHandler+0x1ba>
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_UART_IRQHandler+0x70>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a5 	beq.w	8002f96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_UART_IRQHandler+0x90>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_UART_IRQHandler+0xb0>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_UART_IRQHandler+0xd0>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00f      	beq.n	8002ed6 <HAL_UART_IRQHandler+0xfa>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_UART_IRQHandler+0xee>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ece:	f043 0208 	orr.w	r2, r3, #8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d078      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x11c>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f966 	bl	80031c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_UART_IRQHandler+0x144>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d031      	beq.n	8002f84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8af 	bl	8003084 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d123      	bne.n	8002f7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_UART_IRQHandler+0x1fc>)
 8002f52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe faf0 	bl	800153e <HAL_DMA_Abort_IT>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f72:	e00e      	b.n	8002f92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f831 	bl	8002fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7a:	e00a      	b.n	8002f92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f82d 	bl	8002fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f82:	e006      	b.n	8002f92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f829 	bl	8002fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f90:	e01e      	b.n	8002fd0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f92:	bf00      	nop
    return;
 8002f94:	e01c      	b.n	8002fd0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x1d6>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f89c 	bl	80030e8 <UART_Transmit_IT>
    return;
 8002fb0:	e00f      	b.n	8002fd2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x1f6>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8e4 	bl	8003194 <UART_EndTransmit_IT>
    return;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002fd0:	bf00      	nop
  }
}
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	080030c1 	.word	0x080030c1

08002fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	e02c      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d028      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <UART_WaitOnFlagUntilTimeout+0x30>
 8003010:	f7fe f956 	bl	80012c0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	429a      	cmp	r2, r3
 800301e:	d21d      	bcs.n	800305c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800302e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00f      	b.n	800307c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	429a      	cmp	r2, r3
 8003078:	d0c3      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800309a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff ff7e 	bl	8002fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b21      	cmp	r3, #33	; 0x21
 80030fa:	d144      	bne.n	8003186 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003104:	d11a      	bne.n	800313c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800311a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e00e      	b.n	800314e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]
 800313a:	e008      	b.n	800314e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	1c59      	adds	r1, r3, #1
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6211      	str	r1, [r2, #32]
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4619      	mov	r1, r3
 800315c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003170:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003180:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003186:	2302      	movs	r3, #2
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fd fc9f 	bl	8000af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b22      	cmp	r3, #34	; 0x22
 80031d6:	d171      	bne.n	80032bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d123      	bne.n	800322a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10e      	bne.n	800320e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28
 800320c:	e029      	b.n	8003262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	b29b      	uxth	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
 8003228:	e01b      	b.n	8003262 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6858      	ldr	r0, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	1c59      	adds	r1, r3, #1
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6291      	str	r1, [r2, #40]	; 0x28
 8003242:	b2c2      	uxtb	r2, r0
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e00c      	b.n	8003262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	1c58      	adds	r0, r3, #1
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	6288      	str	r0, [r1, #40]	; 0x28
 800325a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4619      	mov	r1, r3
 8003270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003272:	2b00      	cmp	r3, #0
 8003274:	d120      	bne.n	80032b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0220 	bic.w	r2, r2, #32
 8003284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fb72 	bl	8000998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e002      	b.n	80032be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800330a:	f023 030c 	bic.w	r3, r3, #12
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	430b      	orrs	r3, r1
 8003316:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003336:	f040 818b 	bne.w	8003650 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4ac1      	ldr	r2, [pc, #772]	; (8003644 <UART_SetConfig+0x37c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d005      	beq.n	8003350 <UART_SetConfig+0x88>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4abf      	ldr	r2, [pc, #764]	; (8003648 <UART_SetConfig+0x380>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f040 80bd 	bne.w	80034ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7fe ff02 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8003354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	461d      	mov	r5, r3
 800335a:	f04f 0600 	mov.w	r6, #0
 800335e:	46a8      	mov	r8, r5
 8003360:	46b1      	mov	r9, r6
 8003362:	eb18 0308 	adds.w	r3, r8, r8
 8003366:	eb49 0409 	adc.w	r4, r9, r9
 800336a:	4698      	mov	r8, r3
 800336c:	46a1      	mov	r9, r4
 800336e:	eb18 0805 	adds.w	r8, r8, r5
 8003372:	eb49 0906 	adc.w	r9, r9, r6
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800338a:	4688      	mov	r8, r1
 800338c:	4691      	mov	r9, r2
 800338e:	eb18 0005 	adds.w	r0, r8, r5
 8003392:	eb49 0106 	adc.w	r1, r9, r6
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	461d      	mov	r5, r3
 800339c:	f04f 0600 	mov.w	r6, #0
 80033a0:	196b      	adds	r3, r5, r5
 80033a2:	eb46 0406 	adc.w	r4, r6, r6
 80033a6:	461a      	mov	r2, r3
 80033a8:	4623      	mov	r3, r4
 80033aa:	f7fc ff69 	bl	8000280 <__aeabi_uldivmod>
 80033ae:	4603      	mov	r3, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	461a      	mov	r2, r3
 80033b4:	4ba5      	ldr	r3, [pc, #660]	; (800364c <UART_SetConfig+0x384>)
 80033b6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	461d      	mov	r5, r3
 80033c4:	f04f 0600 	mov.w	r6, #0
 80033c8:	46a9      	mov	r9, r5
 80033ca:	46b2      	mov	sl, r6
 80033cc:	eb19 0309 	adds.w	r3, r9, r9
 80033d0:	eb4a 040a 	adc.w	r4, sl, sl
 80033d4:	4699      	mov	r9, r3
 80033d6:	46a2      	mov	sl, r4
 80033d8:	eb19 0905 	adds.w	r9, r9, r5
 80033dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033f4:	4689      	mov	r9, r1
 80033f6:	4692      	mov	sl, r2
 80033f8:	eb19 0005 	adds.w	r0, r9, r5
 80033fc:	eb4a 0106 	adc.w	r1, sl, r6
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	461d      	mov	r5, r3
 8003406:	f04f 0600 	mov.w	r6, #0
 800340a:	196b      	adds	r3, r5, r5
 800340c:	eb46 0406 	adc.w	r4, r6, r6
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc ff34 	bl	8000280 <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	461a      	mov	r2, r3
 800341e:	4b8b      	ldr	r3, [pc, #556]	; (800364c <UART_SetConfig+0x384>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a86      	ldr	r2, [pc, #536]	; (800364c <UART_SetConfig+0x384>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003440:	4498      	add	r8, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	461d      	mov	r5, r3
 8003446:	f04f 0600 	mov.w	r6, #0
 800344a:	46a9      	mov	r9, r5
 800344c:	46b2      	mov	sl, r6
 800344e:	eb19 0309 	adds.w	r3, r9, r9
 8003452:	eb4a 040a 	adc.w	r4, sl, sl
 8003456:	4699      	mov	r9, r3
 8003458:	46a2      	mov	sl, r4
 800345a:	eb19 0905 	adds.w	r9, r9, r5
 800345e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003476:	4689      	mov	r9, r1
 8003478:	4692      	mov	sl, r2
 800347a:	eb19 0005 	adds.w	r0, r9, r5
 800347e:	eb4a 0106 	adc.w	r1, sl, r6
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	461d      	mov	r5, r3
 8003488:	f04f 0600 	mov.w	r6, #0
 800348c:	196b      	adds	r3, r5, r5
 800348e:	eb46 0406 	adc.w	r4, r6, r6
 8003492:	461a      	mov	r2, r3
 8003494:	4623      	mov	r3, r4
 8003496:	f7fc fef3 	bl	8000280 <__aeabi_uldivmod>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	461a      	mov	r2, r3
 80034a0:	4b6a      	ldr	r3, [pc, #424]	; (800364c <UART_SetConfig+0x384>)
 80034a2:	fba3 1302 	umull	r1, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	4a65      	ldr	r2, [pc, #404]	; (800364c <UART_SetConfig+0x384>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	f003 0207 	and.w	r2, r3, #7
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4442      	add	r2, r8
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e26f      	b.n	80039aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ca:	f7fe fe31 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 80034ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	461d      	mov	r5, r3
 80034d4:	f04f 0600 	mov.w	r6, #0
 80034d8:	46a8      	mov	r8, r5
 80034da:	46b1      	mov	r9, r6
 80034dc:	eb18 0308 	adds.w	r3, r8, r8
 80034e0:	eb49 0409 	adc.w	r4, r9, r9
 80034e4:	4698      	mov	r8, r3
 80034e6:	46a1      	mov	r9, r4
 80034e8:	eb18 0805 	adds.w	r8, r8, r5
 80034ec:	eb49 0906 	adc.w	r9, r9, r6
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003504:	4688      	mov	r8, r1
 8003506:	4691      	mov	r9, r2
 8003508:	eb18 0005 	adds.w	r0, r8, r5
 800350c:	eb49 0106 	adc.w	r1, r9, r6
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	461d      	mov	r5, r3
 8003516:	f04f 0600 	mov.w	r6, #0
 800351a:	196b      	adds	r3, r5, r5
 800351c:	eb46 0406 	adc.w	r4, r6, r6
 8003520:	461a      	mov	r2, r3
 8003522:	4623      	mov	r3, r4
 8003524:	f7fc feac 	bl	8000280 <__aeabi_uldivmod>
 8003528:	4603      	mov	r3, r0
 800352a:	460c      	mov	r4, r1
 800352c:	461a      	mov	r2, r3
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <UART_SetConfig+0x384>)
 8003530:	fba3 2302 	umull	r2, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	461d      	mov	r5, r3
 800353e:	f04f 0600 	mov.w	r6, #0
 8003542:	46a9      	mov	r9, r5
 8003544:	46b2      	mov	sl, r6
 8003546:	eb19 0309 	adds.w	r3, r9, r9
 800354a:	eb4a 040a 	adc.w	r4, sl, sl
 800354e:	4699      	mov	r9, r3
 8003550:	46a2      	mov	sl, r4
 8003552:	eb19 0905 	adds.w	r9, r9, r5
 8003556:	eb4a 0a06 	adc.w	sl, sl, r6
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800356e:	4689      	mov	r9, r1
 8003570:	4692      	mov	sl, r2
 8003572:	eb19 0005 	adds.w	r0, r9, r5
 8003576:	eb4a 0106 	adc.w	r1, sl, r6
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	461d      	mov	r5, r3
 8003580:	f04f 0600 	mov.w	r6, #0
 8003584:	196b      	adds	r3, r5, r5
 8003586:	eb46 0406 	adc.w	r4, r6, r6
 800358a:	461a      	mov	r2, r3
 800358c:	4623      	mov	r3, r4
 800358e:	f7fc fe77 	bl	8000280 <__aeabi_uldivmod>
 8003592:	4603      	mov	r3, r0
 8003594:	460c      	mov	r4, r1
 8003596:	461a      	mov	r2, r3
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <UART_SetConfig+0x384>)
 800359a:	fba3 1302 	umull	r1, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2164      	movs	r1, #100	; 0x64
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	3332      	adds	r3, #50	; 0x32
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <UART_SetConfig+0x384>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035ba:	4498      	add	r8, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	461d      	mov	r5, r3
 80035c0:	f04f 0600 	mov.w	r6, #0
 80035c4:	46a9      	mov	r9, r5
 80035c6:	46b2      	mov	sl, r6
 80035c8:	eb19 0309 	adds.w	r3, r9, r9
 80035cc:	eb4a 040a 	adc.w	r4, sl, sl
 80035d0:	4699      	mov	r9, r3
 80035d2:	46a2      	mov	sl, r4
 80035d4:	eb19 0905 	adds.w	r9, r9, r5
 80035d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80035dc:	f04f 0100 	mov.w	r1, #0
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035f0:	4689      	mov	r9, r1
 80035f2:	4692      	mov	sl, r2
 80035f4:	eb19 0005 	adds.w	r0, r9, r5
 80035f8:	eb4a 0106 	adc.w	r1, sl, r6
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	461d      	mov	r5, r3
 8003602:	f04f 0600 	mov.w	r6, #0
 8003606:	196b      	adds	r3, r5, r5
 8003608:	eb46 0406 	adc.w	r4, r6, r6
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	f7fc fe36 	bl	8000280 <__aeabi_uldivmod>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	461a      	mov	r2, r3
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <UART_SetConfig+0x384>)
 800361c:	fba3 1302 	umull	r1, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	2164      	movs	r1, #100	; 0x64
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	3332      	adds	r3, #50	; 0x32
 800362e:	4a07      	ldr	r2, [pc, #28]	; (800364c <UART_SetConfig+0x384>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	f003 0207 	and.w	r2, r3, #7
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4442      	add	r2, r8
 8003640:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003642:	e1b2      	b.n	80039aa <UART_SetConfig+0x6e2>
 8003644:	40011000 	.word	0x40011000
 8003648:	40011400 	.word	0x40011400
 800364c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4ad7      	ldr	r2, [pc, #860]	; (80039b4 <UART_SetConfig+0x6ec>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d005      	beq.n	8003666 <UART_SetConfig+0x39e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4ad6      	ldr	r2, [pc, #856]	; (80039b8 <UART_SetConfig+0x6f0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	f040 80d1 	bne.w	8003808 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003666:	f7fe fd77 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 800366a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	469a      	mov	sl, r3
 8003670:	f04f 0b00 	mov.w	fp, #0
 8003674:	46d0      	mov	r8, sl
 8003676:	46d9      	mov	r9, fp
 8003678:	eb18 0308 	adds.w	r3, r8, r8
 800367c:	eb49 0409 	adc.w	r4, r9, r9
 8003680:	4698      	mov	r8, r3
 8003682:	46a1      	mov	r9, r4
 8003684:	eb18 080a 	adds.w	r8, r8, sl
 8003688:	eb49 090b 	adc.w	r9, r9, fp
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800369c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036a0:	4688      	mov	r8, r1
 80036a2:	4691      	mov	r9, r2
 80036a4:	eb1a 0508 	adds.w	r5, sl, r8
 80036a8:	eb4b 0609 	adc.w	r6, fp, r9
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4619      	mov	r1, r3
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	0094      	lsls	r4, r2, #2
 80036c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036c4:	008b      	lsls	r3, r1, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	4623      	mov	r3, r4
 80036ca:	4628      	mov	r0, r5
 80036cc:	4631      	mov	r1, r6
 80036ce:	f7fc fdd7 	bl	8000280 <__aeabi_uldivmod>
 80036d2:	4603      	mov	r3, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	461a      	mov	r2, r3
 80036d8:	4bb8      	ldr	r3, [pc, #736]	; (80039bc <UART_SetConfig+0x6f4>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	469b      	mov	fp, r3
 80036e8:	f04f 0c00 	mov.w	ip, #0
 80036ec:	46d9      	mov	r9, fp
 80036ee:	46e2      	mov	sl, ip
 80036f0:	eb19 0309 	adds.w	r3, r9, r9
 80036f4:	eb4a 040a 	adc.w	r4, sl, sl
 80036f8:	4699      	mov	r9, r3
 80036fa:	46a2      	mov	sl, r4
 80036fc:	eb19 090b 	adds.w	r9, r9, fp
 8003700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003704:	f04f 0100 	mov.w	r1, #0
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003718:	4689      	mov	r9, r1
 800371a:	4692      	mov	sl, r2
 800371c:	eb1b 0509 	adds.w	r5, fp, r9
 8003720:	eb4c 060a 	adc.w	r6, ip, sl
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4619      	mov	r1, r3
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	0094      	lsls	r4, r2, #2
 8003738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800373c:	008b      	lsls	r3, r1, #2
 800373e:	461a      	mov	r2, r3
 8003740:	4623      	mov	r3, r4
 8003742:	4628      	mov	r0, r5
 8003744:	4631      	mov	r1, r6
 8003746:	f7fc fd9b 	bl	8000280 <__aeabi_uldivmod>
 800374a:	4603      	mov	r3, r0
 800374c:	460c      	mov	r4, r1
 800374e:	461a      	mov	r2, r3
 8003750:	4b9a      	ldr	r3, [pc, #616]	; (80039bc <UART_SetConfig+0x6f4>)
 8003752:	fba3 1302 	umull	r1, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	3332      	adds	r3, #50	; 0x32
 8003764:	4a95      	ldr	r2, [pc, #596]	; (80039bc <UART_SetConfig+0x6f4>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	4498      	add	r8, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	469b      	mov	fp, r3
 8003776:	f04f 0c00 	mov.w	ip, #0
 800377a:	46d9      	mov	r9, fp
 800377c:	46e2      	mov	sl, ip
 800377e:	eb19 0309 	adds.w	r3, r9, r9
 8003782:	eb4a 040a 	adc.w	r4, sl, sl
 8003786:	4699      	mov	r9, r3
 8003788:	46a2      	mov	sl, r4
 800378a:	eb19 090b 	adds.w	r9, r9, fp
 800378e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037a6:	4689      	mov	r9, r1
 80037a8:	4692      	mov	sl, r2
 80037aa:	eb1b 0509 	adds.w	r5, fp, r9
 80037ae:	eb4c 060a 	adc.w	r6, ip, sl
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4619      	mov	r1, r3
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	f04f 0400 	mov.w	r4, #0
 80037c4:	0094      	lsls	r4, r2, #2
 80037c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ca:	008b      	lsls	r3, r1, #2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	4631      	mov	r1, r6
 80037d4:	f7fc fd54 	bl	8000280 <__aeabi_uldivmod>
 80037d8:	4603      	mov	r3, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	461a      	mov	r2, r3
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <UART_SetConfig+0x6f4>)
 80037e0:	fba3 1302 	umull	r1, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2164      	movs	r1, #100	; 0x64
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a72      	ldr	r2, [pc, #456]	; (80039bc <UART_SetConfig+0x6f4>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4442      	add	r2, r8
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	e0d0      	b.n	80039aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe fc92 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 800380c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	469a      	mov	sl, r3
 8003812:	f04f 0b00 	mov.w	fp, #0
 8003816:	46d0      	mov	r8, sl
 8003818:	46d9      	mov	r9, fp
 800381a:	eb18 0308 	adds.w	r3, r8, r8
 800381e:	eb49 0409 	adc.w	r4, r9, r9
 8003822:	4698      	mov	r8, r3
 8003824:	46a1      	mov	r9, r4
 8003826:	eb18 080a 	adds.w	r8, r8, sl
 800382a:	eb49 090b 	adc.w	r9, r9, fp
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800383a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800383e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003842:	4688      	mov	r8, r1
 8003844:	4691      	mov	r9, r2
 8003846:	eb1a 0508 	adds.w	r5, sl, r8
 800384a:	eb4b 0609 	adc.w	r6, fp, r9
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	f04f 0400 	mov.w	r4, #0
 8003860:	0094      	lsls	r4, r2, #2
 8003862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003866:	008b      	lsls	r3, r1, #2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	4628      	mov	r0, r5
 800386e:	4631      	mov	r1, r6
 8003870:	f7fc fd06 	bl	8000280 <__aeabi_uldivmod>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	461a      	mov	r2, r3
 800387a:	4b50      	ldr	r3, [pc, #320]	; (80039bc <UART_SetConfig+0x6f4>)
 800387c:	fba3 2302 	umull	r2, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	469b      	mov	fp, r3
 800388a:	f04f 0c00 	mov.w	ip, #0
 800388e:	46d9      	mov	r9, fp
 8003890:	46e2      	mov	sl, ip
 8003892:	eb19 0309 	adds.w	r3, r9, r9
 8003896:	eb4a 040a 	adc.w	r4, sl, sl
 800389a:	4699      	mov	r9, r3
 800389c:	46a2      	mov	sl, r4
 800389e:	eb19 090b 	adds.w	r9, r9, fp
 80038a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ba:	4689      	mov	r9, r1
 80038bc:	4692      	mov	sl, r2
 80038be:	eb1b 0509 	adds.w	r5, fp, r9
 80038c2:	eb4c 060a 	adc.w	r6, ip, sl
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4619      	mov	r1, r3
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	0094      	lsls	r4, r2, #2
 80038da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038de:	008b      	lsls	r3, r1, #2
 80038e0:	461a      	mov	r2, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	4631      	mov	r1, r6
 80038e8:	f7fc fcca 	bl	8000280 <__aeabi_uldivmod>
 80038ec:	4603      	mov	r3, r0
 80038ee:	460c      	mov	r4, r1
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b32      	ldr	r3, [pc, #200]	; (80039bc <UART_SetConfig+0x6f4>)
 80038f4:	fba3 1302 	umull	r1, r3, r3, r2
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	2164      	movs	r1, #100	; 0x64
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	3332      	adds	r3, #50	; 0x32
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <UART_SetConfig+0x6f4>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	095b      	lsrs	r3, r3, #5
 800390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003912:	4498      	add	r8, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	469b      	mov	fp, r3
 8003918:	f04f 0c00 	mov.w	ip, #0
 800391c:	46d9      	mov	r9, fp
 800391e:	46e2      	mov	sl, ip
 8003920:	eb19 0309 	adds.w	r3, r9, r9
 8003924:	eb4a 040a 	adc.w	r4, sl, sl
 8003928:	4699      	mov	r9, r3
 800392a:	46a2      	mov	sl, r4
 800392c:	eb19 090b 	adds.w	r9, r9, fp
 8003930:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003934:	f04f 0100 	mov.w	r1, #0
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003948:	4689      	mov	r9, r1
 800394a:	4692      	mov	sl, r2
 800394c:	eb1b 0509 	adds.w	r5, fp, r9
 8003950:	eb4c 060a 	adc.w	r6, ip, sl
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	f04f 0400 	mov.w	r4, #0
 8003966:	0094      	lsls	r4, r2, #2
 8003968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800396c:	008b      	lsls	r3, r1, #2
 800396e:	461a      	mov	r2, r3
 8003970:	4623      	mov	r3, r4
 8003972:	4628      	mov	r0, r5
 8003974:	4631      	mov	r1, r6
 8003976:	f7fc fc83 	bl	8000280 <__aeabi_uldivmod>
 800397a:	4603      	mov	r3, r0
 800397c:	460c      	mov	r4, r1
 800397e:	461a      	mov	r2, r3
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <UART_SetConfig+0x6f4>)
 8003982:	fba3 1302 	umull	r1, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2164      	movs	r1, #100	; 0x64
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	3332      	adds	r3, #50	; 0x32
 8003994:	4a09      	ldr	r2, [pc, #36]	; (80039bc <UART_SetConfig+0x6f4>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4442      	add	r2, r8
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	e7ff      	b.n	80039aa <UART_SetConfig+0x6e2>
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b4:	40011000 	.word	0x40011000
 80039b8:	40011400 	.word	0x40011400
 80039bc:	51eb851f 	.word	0x51eb851f

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000014 	.word	0x20000014

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4e0d      	ldr	r6, [pc, #52]	; (8003a04 <__libc_init_array+0x38>)
 80039d0:	4c0d      	ldr	r4, [pc, #52]	; (8003a08 <__libc_init_array+0x3c>)
 80039d2:	1ba4      	subs	r4, r4, r6
 80039d4:	10a4      	asrs	r4, r4, #2
 80039d6:	2500      	movs	r5, #0
 80039d8:	42a5      	cmp	r5, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	4e0b      	ldr	r6, [pc, #44]	; (8003a0c <__libc_init_array+0x40>)
 80039de:	4c0c      	ldr	r4, [pc, #48]	; (8003a10 <__libc_init_array+0x44>)
 80039e0:	f000 ff0c 	bl	80047fc <_init>
 80039e4:	1ba4      	subs	r4, r4, r6
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	2500      	movs	r5, #0
 80039ea:	42a5      	cmp	r5, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039f4:	4798      	blx	r3
 80039f6:	3501      	adds	r5, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039fe:	4798      	blx	r3
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	080048ec 	.word	0x080048ec
 8003a08:	080048ec 	.word	0x080048ec
 8003a0c:	080048ec 	.word	0x080048ec
 8003a10:	080048f0 	.word	0x080048f0

08003a14 <malloc>:
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <malloc+0xc>)
 8003a16:	4601      	mov	r1, r0
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f000 b859 	b.w	8003ad0 <_malloc_r>
 8003a1e:	bf00      	nop
 8003a20:	20000014 	.word	0x20000014

08003a24 <memset>:
 8003a24:	4402      	add	r2, r0
 8003a26:	4603      	mov	r3, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <_free_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4605      	mov	r5, r0
 8003a38:	2900      	cmp	r1, #0
 8003a3a:	d045      	beq.n	8003ac8 <_free_r+0x94>
 8003a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a40:	1f0c      	subs	r4, r1, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	18e4      	addlt	r4, r4, r3
 8003a48:	f000 f98e 	bl	8003d68 <__malloc_lock>
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <_free_r+0x98>)
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	b933      	cbnz	r3, 8003a62 <_free_r+0x2e>
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	6014      	str	r4, [r2, #0]
 8003a58:	4628      	mov	r0, r5
 8003a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a5e:	f000 b984 	b.w	8003d6a <__malloc_unlock>
 8003a62:	42a3      	cmp	r3, r4
 8003a64:	d90c      	bls.n	8003a80 <_free_r+0x4c>
 8003a66:	6821      	ldr	r1, [r4, #0]
 8003a68:	1862      	adds	r2, r4, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	bf04      	itt	eq
 8003a6e:	681a      	ldreq	r2, [r3, #0]
 8003a70:	685b      	ldreq	r3, [r3, #4]
 8003a72:	6063      	str	r3, [r4, #4]
 8003a74:	bf04      	itt	eq
 8003a76:	1852      	addeq	r2, r2, r1
 8003a78:	6022      	streq	r2, [r4, #0]
 8003a7a:	6004      	str	r4, [r0, #0]
 8003a7c:	e7ec      	b.n	8003a58 <_free_r+0x24>
 8003a7e:	4613      	mov	r3, r2
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	b10a      	cbz	r2, 8003a88 <_free_r+0x54>
 8003a84:	42a2      	cmp	r2, r4
 8003a86:	d9fa      	bls.n	8003a7e <_free_r+0x4a>
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	1858      	adds	r0, r3, r1
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d10b      	bne.n	8003aa8 <_free_r+0x74>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	4401      	add	r1, r0
 8003a94:	1858      	adds	r0, r3, r1
 8003a96:	4282      	cmp	r2, r0
 8003a98:	6019      	str	r1, [r3, #0]
 8003a9a:	d1dd      	bne.n	8003a58 <_free_r+0x24>
 8003a9c:	6810      	ldr	r0, [r2, #0]
 8003a9e:	6852      	ldr	r2, [r2, #4]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	6019      	str	r1, [r3, #0]
 8003aa6:	e7d7      	b.n	8003a58 <_free_r+0x24>
 8003aa8:	d902      	bls.n	8003ab0 <_free_r+0x7c>
 8003aaa:	230c      	movs	r3, #12
 8003aac:	602b      	str	r3, [r5, #0]
 8003aae:	e7d3      	b.n	8003a58 <_free_r+0x24>
 8003ab0:	6820      	ldr	r0, [r4, #0]
 8003ab2:	1821      	adds	r1, r4, r0
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	bf04      	itt	eq
 8003ab8:	6811      	ldreq	r1, [r2, #0]
 8003aba:	6852      	ldreq	r2, [r2, #4]
 8003abc:	6062      	str	r2, [r4, #4]
 8003abe:	bf04      	itt	eq
 8003ac0:	1809      	addeq	r1, r1, r0
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	605c      	str	r4, [r3, #4]
 8003ac6:	e7c7      	b.n	8003a58 <_free_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	200000a8 	.word	0x200000a8

08003ad0 <_malloc_r>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	1ccd      	adds	r5, r1, #3
 8003ad4:	f025 0503 	bic.w	r5, r5, #3
 8003ad8:	3508      	adds	r5, #8
 8003ada:	2d0c      	cmp	r5, #12
 8003adc:	bf38      	it	cc
 8003ade:	250c      	movcc	r5, #12
 8003ae0:	2d00      	cmp	r5, #0
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	db01      	blt.n	8003aea <_malloc_r+0x1a>
 8003ae6:	42a9      	cmp	r1, r5
 8003ae8:	d903      	bls.n	8003af2 <_malloc_r+0x22>
 8003aea:	230c      	movs	r3, #12
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	2000      	movs	r0, #0
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	f000 f939 	bl	8003d68 <__malloc_lock>
 8003af6:	4a21      	ldr	r2, [pc, #132]	; (8003b7c <_malloc_r+0xac>)
 8003af8:	6814      	ldr	r4, [r2, #0]
 8003afa:	4621      	mov	r1, r4
 8003afc:	b991      	cbnz	r1, 8003b24 <_malloc_r+0x54>
 8003afe:	4c20      	ldr	r4, [pc, #128]	; (8003b80 <_malloc_r+0xb0>)
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	b91b      	cbnz	r3, 8003b0c <_malloc_r+0x3c>
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 f855 	bl	8003bb4 <_sbrk_r>
 8003b0a:	6020      	str	r0, [r4, #0]
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f000 f850 	bl	8003bb4 <_sbrk_r>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d124      	bne.n	8003b62 <_malloc_r+0x92>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	6033      	str	r3, [r6, #0]
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 f924 	bl	8003d6a <__malloc_unlock>
 8003b22:	e7e4      	b.n	8003aee <_malloc_r+0x1e>
 8003b24:	680b      	ldr	r3, [r1, #0]
 8003b26:	1b5b      	subs	r3, r3, r5
 8003b28:	d418      	bmi.n	8003b5c <_malloc_r+0x8c>
 8003b2a:	2b0b      	cmp	r3, #11
 8003b2c:	d90f      	bls.n	8003b4e <_malloc_r+0x7e>
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	50cd      	str	r5, [r1, r3]
 8003b32:	18cc      	adds	r4, r1, r3
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f918 	bl	8003d6a <__malloc_unlock>
 8003b3a:	f104 000b 	add.w	r0, r4, #11
 8003b3e:	1d23      	adds	r3, r4, #4
 8003b40:	f020 0007 	bic.w	r0, r0, #7
 8003b44:	1ac3      	subs	r3, r0, r3
 8003b46:	d0d3      	beq.n	8003af0 <_malloc_r+0x20>
 8003b48:	425a      	negs	r2, r3
 8003b4a:	50e2      	str	r2, [r4, r3]
 8003b4c:	e7d0      	b.n	8003af0 <_malloc_r+0x20>
 8003b4e:	428c      	cmp	r4, r1
 8003b50:	684b      	ldr	r3, [r1, #4]
 8003b52:	bf16      	itet	ne
 8003b54:	6063      	strne	r3, [r4, #4]
 8003b56:	6013      	streq	r3, [r2, #0]
 8003b58:	460c      	movne	r4, r1
 8003b5a:	e7eb      	b.n	8003b34 <_malloc_r+0x64>
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	6849      	ldr	r1, [r1, #4]
 8003b60:	e7cc      	b.n	8003afc <_malloc_r+0x2c>
 8003b62:	1cc4      	adds	r4, r0, #3
 8003b64:	f024 0403 	bic.w	r4, r4, #3
 8003b68:	42a0      	cmp	r0, r4
 8003b6a:	d005      	beq.n	8003b78 <_malloc_r+0xa8>
 8003b6c:	1a21      	subs	r1, r4, r0
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f000 f820 	bl	8003bb4 <_sbrk_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d0cf      	beq.n	8003b18 <_malloc_r+0x48>
 8003b78:	6025      	str	r5, [r4, #0]
 8003b7a:	e7db      	b.n	8003b34 <_malloc_r+0x64>
 8003b7c:	200000a8 	.word	0x200000a8
 8003b80:	200000ac 	.word	0x200000ac

08003b84 <iprintf>:
 8003b84:	b40f      	push	{r0, r1, r2, r3}
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <iprintf+0x2c>)
 8003b88:	b513      	push	{r0, r1, r4, lr}
 8003b8a:	681c      	ldr	r4, [r3, #0]
 8003b8c:	b124      	cbz	r4, 8003b98 <iprintf+0x14>
 8003b8e:	69a3      	ldr	r3, [r4, #24]
 8003b90:	b913      	cbnz	r3, 8003b98 <iprintf+0x14>
 8003b92:	4620      	mov	r0, r4
 8003b94:	f000 f85e 	bl	8003c54 <__sinit>
 8003b98:	ab05      	add	r3, sp, #20
 8003b9a:	9a04      	ldr	r2, [sp, #16]
 8003b9c:	68a1      	ldr	r1, [r4, #8]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f000 f90d 	bl	8003dc0 <_vfiprintf_r>
 8003ba6:	b002      	add	sp, #8
 8003ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bac:	b004      	add	sp, #16
 8003bae:	4770      	bx	lr
 8003bb0:	20000014 	.word	0x20000014

08003bb4 <_sbrk_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4c06      	ldr	r4, [pc, #24]	; (8003bd0 <_sbrk_r+0x1c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4605      	mov	r5, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	f7fd faac 	bl	800111c <_sbrk>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_sbrk_r+0x1a>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_sbrk_r+0x1a>
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	200008c0 	.word	0x200008c0

08003bd4 <std>:
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	e9c0 3300 	strd	r3, r3, [r0]
 8003bde:	6083      	str	r3, [r0, #8]
 8003be0:	8181      	strh	r1, [r0, #12]
 8003be2:	6643      	str	r3, [r0, #100]	; 0x64
 8003be4:	81c2      	strh	r2, [r0, #14]
 8003be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bea:	6183      	str	r3, [r0, #24]
 8003bec:	4619      	mov	r1, r3
 8003bee:	2208      	movs	r2, #8
 8003bf0:	305c      	adds	r0, #92	; 0x5c
 8003bf2:	f7ff ff17 	bl	8003a24 <memset>
 8003bf6:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <std+0x38>)
 8003bf8:	6263      	str	r3, [r4, #36]	; 0x24
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <std+0x3c>)
 8003bfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <std+0x40>)
 8003c00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <std+0x44>)
 8003c04:	6224      	str	r4, [r4, #32]
 8003c06:	6323      	str	r3, [r4, #48]	; 0x30
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	080042fd 	.word	0x080042fd
 8003c10:	0800431f 	.word	0x0800431f
 8003c14:	08004357 	.word	0x08004357
 8003c18:	0800437b 	.word	0x0800437b

08003c1c <_cleanup_r>:
 8003c1c:	4901      	ldr	r1, [pc, #4]	; (8003c24 <_cleanup_r+0x8>)
 8003c1e:	f000 b885 	b.w	8003d2c <_fwalk_reent>
 8003c22:	bf00      	nop
 8003c24:	08004655 	.word	0x08004655

08003c28 <__sfmoreglue>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	1e4a      	subs	r2, r1, #1
 8003c2c:	2568      	movs	r5, #104	; 0x68
 8003c2e:	4355      	muls	r5, r2
 8003c30:	460e      	mov	r6, r1
 8003c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c36:	f7ff ff4b 	bl	8003ad0 <_malloc_r>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	b140      	cbz	r0, 8003c50 <__sfmoreglue+0x28>
 8003c3e:	2100      	movs	r1, #0
 8003c40:	e9c0 1600 	strd	r1, r6, [r0]
 8003c44:	300c      	adds	r0, #12
 8003c46:	60a0      	str	r0, [r4, #8]
 8003c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c4c:	f7ff feea 	bl	8003a24 <memset>
 8003c50:	4620      	mov	r0, r4
 8003c52:	bd70      	pop	{r4, r5, r6, pc}

08003c54 <__sinit>:
 8003c54:	6983      	ldr	r3, [r0, #24]
 8003c56:	b510      	push	{r4, lr}
 8003c58:	4604      	mov	r4, r0
 8003c5a:	bb33      	cbnz	r3, 8003caa <__sinit+0x56>
 8003c5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003c60:	6503      	str	r3, [r0, #80]	; 0x50
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <__sinit+0x58>)
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <__sinit+0x5c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6282      	str	r2, [r0, #40]	; 0x28
 8003c6a:	4298      	cmp	r0, r3
 8003c6c:	bf04      	itt	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	6183      	streq	r3, [r0, #24]
 8003c72:	f000 f81f 	bl	8003cb4 <__sfp>
 8003c76:	6060      	str	r0, [r4, #4]
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 f81b 	bl	8003cb4 <__sfp>
 8003c7e:	60a0      	str	r0, [r4, #8]
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 f817 	bl	8003cb4 <__sfp>
 8003c86:	2200      	movs	r2, #0
 8003c88:	60e0      	str	r0, [r4, #12]
 8003c8a:	2104      	movs	r1, #4
 8003c8c:	6860      	ldr	r0, [r4, #4]
 8003c8e:	f7ff ffa1 	bl	8003bd4 <std>
 8003c92:	2201      	movs	r2, #1
 8003c94:	2109      	movs	r1, #9
 8003c96:	68a0      	ldr	r0, [r4, #8]
 8003c98:	f7ff ff9c 	bl	8003bd4 <std>
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	2112      	movs	r1, #18
 8003ca0:	68e0      	ldr	r0, [r4, #12]
 8003ca2:	f7ff ff97 	bl	8003bd4 <std>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61a3      	str	r3, [r4, #24]
 8003caa:	bd10      	pop	{r4, pc}
 8003cac:	0800484c 	.word	0x0800484c
 8003cb0:	08003c1d 	.word	0x08003c1d

08003cb4 <__sfp>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <__sfp+0x70>)
 8003cb8:	681e      	ldr	r6, [r3, #0]
 8003cba:	69b3      	ldr	r3, [r6, #24]
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	b913      	cbnz	r3, 8003cc6 <__sfp+0x12>
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f7ff ffc7 	bl	8003c54 <__sinit>
 8003cc6:	3648      	adds	r6, #72	; 0x48
 8003cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	d503      	bpl.n	8003cd8 <__sfp+0x24>
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	b133      	cbz	r3, 8003ce2 <__sfp+0x2e>
 8003cd4:	6836      	ldr	r6, [r6, #0]
 8003cd6:	e7f7      	b.n	8003cc8 <__sfp+0x14>
 8003cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003cdc:	b16d      	cbz	r5, 8003cfa <__sfp+0x46>
 8003cde:	3468      	adds	r4, #104	; 0x68
 8003ce0:	e7f4      	b.n	8003ccc <__sfp+0x18>
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f7ff ff9f 	bl	8003c28 <__sfmoreglue>
 8003cea:	6030      	str	r0, [r6, #0]
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d1f1      	bne.n	8003cd4 <__sfp+0x20>
 8003cf0:	230c      	movs	r3, #12
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <__sfp+0x74>)
 8003cfc:	6665      	str	r5, [r4, #100]	; 0x64
 8003cfe:	e9c4 5500 	strd	r5, r5, [r4]
 8003d02:	60a5      	str	r5, [r4, #8]
 8003d04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003d08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d14:	f7ff fe86 	bl	8003a24 <memset>
 8003d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d20:	e7e9      	b.n	8003cf6 <__sfp+0x42>
 8003d22:	bf00      	nop
 8003d24:	0800484c 	.word	0x0800484c
 8003d28:	ffff0001 	.word	0xffff0001

08003d2c <_fwalk_reent>:
 8003d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d30:	4680      	mov	r8, r0
 8003d32:	4689      	mov	r9, r1
 8003d34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003d38:	2600      	movs	r6, #0
 8003d3a:	b914      	cbnz	r4, 8003d42 <_fwalk_reent+0x16>
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003d46:	3f01      	subs	r7, #1
 8003d48:	d501      	bpl.n	8003d4e <_fwalk_reent+0x22>
 8003d4a:	6824      	ldr	r4, [r4, #0]
 8003d4c:	e7f5      	b.n	8003d3a <_fwalk_reent+0xe>
 8003d4e:	89ab      	ldrh	r3, [r5, #12]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d907      	bls.n	8003d64 <_fwalk_reent+0x38>
 8003d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <_fwalk_reent+0x38>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	4640      	mov	r0, r8
 8003d60:	47c8      	blx	r9
 8003d62:	4306      	orrs	r6, r0
 8003d64:	3568      	adds	r5, #104	; 0x68
 8003d66:	e7ee      	b.n	8003d46 <_fwalk_reent+0x1a>

08003d68 <__malloc_lock>:
 8003d68:	4770      	bx	lr

08003d6a <__malloc_unlock>:
 8003d6a:	4770      	bx	lr

08003d6c <__sfputc_r>:
 8003d6c:	6893      	ldr	r3, [r2, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	b410      	push	{r4}
 8003d74:	6093      	str	r3, [r2, #8]
 8003d76:	da08      	bge.n	8003d8a <__sfputc_r+0x1e>
 8003d78:	6994      	ldr	r4, [r2, #24]
 8003d7a:	42a3      	cmp	r3, r4
 8003d7c:	db01      	blt.n	8003d82 <__sfputc_r+0x16>
 8003d7e:	290a      	cmp	r1, #10
 8003d80:	d103      	bne.n	8003d8a <__sfputc_r+0x1e>
 8003d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d86:	f000 bafd 	b.w	8004384 <__swbuf_r>
 8003d8a:	6813      	ldr	r3, [r2, #0]
 8003d8c:	1c58      	adds	r0, r3, #1
 8003d8e:	6010      	str	r0, [r2, #0]
 8003d90:	7019      	strb	r1, [r3, #0]
 8003d92:	4608      	mov	r0, r1
 8003d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <__sfputs_r>:
 8003d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	4614      	mov	r4, r2
 8003da2:	18d5      	adds	r5, r2, r3
 8003da4:	42ac      	cmp	r4, r5
 8003da6:	d101      	bne.n	8003dac <__sfputs_r+0x12>
 8003da8:	2000      	movs	r0, #0
 8003daa:	e007      	b.n	8003dbc <__sfputs_r+0x22>
 8003dac:	463a      	mov	r2, r7
 8003dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff ffda 	bl	8003d6c <__sfputc_r>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d1f3      	bne.n	8003da4 <__sfputs_r+0xa>
 8003dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003dc0 <_vfiprintf_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	b09d      	sub	sp, #116	; 0x74
 8003dc8:	4617      	mov	r7, r2
 8003dca:	461d      	mov	r5, r3
 8003dcc:	4606      	mov	r6, r0
 8003dce:	b118      	cbz	r0, 8003dd8 <_vfiprintf_r+0x18>
 8003dd0:	6983      	ldr	r3, [r0, #24]
 8003dd2:	b90b      	cbnz	r3, 8003dd8 <_vfiprintf_r+0x18>
 8003dd4:	f7ff ff3e 	bl	8003c54 <__sinit>
 8003dd8:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <_vfiprintf_r+0x20c>)
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	d158      	bne.n	8003e90 <_vfiprintf_r+0xd0>
 8003dde:	6874      	ldr	r4, [r6, #4]
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	0718      	lsls	r0, r3, #28
 8003de4:	d55e      	bpl.n	8003ea4 <_vfiprintf_r+0xe4>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <_vfiprintf_r+0xe4>
 8003dec:	2300      	movs	r3, #0
 8003dee:	9309      	str	r3, [sp, #36]	; 0x24
 8003df0:	2320      	movs	r3, #32
 8003df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003df6:	2330      	movs	r3, #48	; 0x30
 8003df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003dfc:	9503      	str	r5, [sp, #12]
 8003dfe:	f04f 0b01 	mov.w	fp, #1
 8003e02:	46b8      	mov	r8, r7
 8003e04:	4645      	mov	r5, r8
 8003e06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e0a:	b10b      	cbz	r3, 8003e10 <_vfiprintf_r+0x50>
 8003e0c:	2b25      	cmp	r3, #37	; 0x25
 8003e0e:	d154      	bne.n	8003eba <_vfiprintf_r+0xfa>
 8003e10:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e14:	d00b      	beq.n	8003e2e <_vfiprintf_r+0x6e>
 8003e16:	4653      	mov	r3, sl
 8003e18:	463a      	mov	r2, r7
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f7ff ffbc 	bl	8003d9a <__sfputs_r>
 8003e22:	3001      	adds	r0, #1
 8003e24:	f000 80c2 	beq.w	8003fac <_vfiprintf_r+0x1ec>
 8003e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2a:	4453      	add	r3, sl
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	f898 3000 	ldrb.w	r3, [r8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80ba 	beq.w	8003fac <_vfiprintf_r+0x1ec>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	9307      	str	r3, [sp, #28]
 8003e46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003e4c:	46a8      	mov	r8, r5
 8003e4e:	2205      	movs	r2, #5
 8003e50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e54:	485e      	ldr	r0, [pc, #376]	; (8003fd0 <_vfiprintf_r+0x210>)
 8003e56:	f7fc f9c3 	bl	80001e0 <memchr>
 8003e5a:	9b04      	ldr	r3, [sp, #16]
 8003e5c:	bb78      	cbnz	r0, 8003ebe <_vfiprintf_r+0xfe>
 8003e5e:	06d9      	lsls	r1, r3, #27
 8003e60:	bf44      	itt	mi
 8003e62:	2220      	movmi	r2, #32
 8003e64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e68:	071a      	lsls	r2, r3, #28
 8003e6a:	bf44      	itt	mi
 8003e6c:	222b      	movmi	r2, #43	; 0x2b
 8003e6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e72:	782a      	ldrb	r2, [r5, #0]
 8003e74:	2a2a      	cmp	r2, #42	; 0x2a
 8003e76:	d02a      	beq.n	8003ece <_vfiprintf_r+0x10e>
 8003e78:	9a07      	ldr	r2, [sp, #28]
 8003e7a:	46a8      	mov	r8, r5
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	250a      	movs	r5, #10
 8003e80:	4641      	mov	r1, r8
 8003e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e86:	3b30      	subs	r3, #48	; 0x30
 8003e88:	2b09      	cmp	r3, #9
 8003e8a:	d969      	bls.n	8003f60 <_vfiprintf_r+0x1a0>
 8003e8c:	b360      	cbz	r0, 8003ee8 <_vfiprintf_r+0x128>
 8003e8e:	e024      	b.n	8003eda <_vfiprintf_r+0x11a>
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <_vfiprintf_r+0x214>)
 8003e92:	429c      	cmp	r4, r3
 8003e94:	d101      	bne.n	8003e9a <_vfiprintf_r+0xda>
 8003e96:	68b4      	ldr	r4, [r6, #8]
 8003e98:	e7a2      	b.n	8003de0 <_vfiprintf_r+0x20>
 8003e9a:	4b4f      	ldr	r3, [pc, #316]	; (8003fd8 <_vfiprintf_r+0x218>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	bf08      	it	eq
 8003ea0:	68f4      	ldreq	r4, [r6, #12]
 8003ea2:	e79d      	b.n	8003de0 <_vfiprintf_r+0x20>
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	f000 fad0 	bl	800444c <__swsetup_r>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d09d      	beq.n	8003dec <_vfiprintf_r+0x2c>
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	b01d      	add	sp, #116	; 0x74
 8003eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eba:	46a8      	mov	r8, r5
 8003ebc:	e7a2      	b.n	8003e04 <_vfiprintf_r+0x44>
 8003ebe:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <_vfiprintf_r+0x210>)
 8003ec0:	1a80      	subs	r0, r0, r2
 8003ec2:	fa0b f000 	lsl.w	r0, fp, r0
 8003ec6:	4318      	orrs	r0, r3
 8003ec8:	9004      	str	r0, [sp, #16]
 8003eca:	4645      	mov	r5, r8
 8003ecc:	e7be      	b.n	8003e4c <_vfiprintf_r+0x8c>
 8003ece:	9a03      	ldr	r2, [sp, #12]
 8003ed0:	1d11      	adds	r1, r2, #4
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	9103      	str	r1, [sp, #12]
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	db01      	blt.n	8003ede <_vfiprintf_r+0x11e>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e004      	b.n	8003ee8 <_vfiprintf_r+0x128>
 8003ede:	4252      	negs	r2, r2
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	f898 3000 	ldrb.w	r3, [r8]
 8003eec:	2b2e      	cmp	r3, #46	; 0x2e
 8003eee:	d10e      	bne.n	8003f0e <_vfiprintf_r+0x14e>
 8003ef0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef6:	d138      	bne.n	8003f6a <_vfiprintf_r+0x1aa>
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	9203      	str	r2, [sp, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfb8      	it	lt
 8003f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f08:	f108 0802 	add.w	r8, r8, #2
 8003f0c:	9305      	str	r3, [sp, #20]
 8003f0e:	4d33      	ldr	r5, [pc, #204]	; (8003fdc <_vfiprintf_r+0x21c>)
 8003f10:	f898 1000 	ldrb.w	r1, [r8]
 8003f14:	2203      	movs	r2, #3
 8003f16:	4628      	mov	r0, r5
 8003f18:	f7fc f962 	bl	80001e0 <memchr>
 8003f1c:	b140      	cbz	r0, 8003f30 <_vfiprintf_r+0x170>
 8003f1e:	2340      	movs	r3, #64	; 0x40
 8003f20:	1b40      	subs	r0, r0, r5
 8003f22:	fa03 f000 	lsl.w	r0, r3, r0
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	4303      	orrs	r3, r0
 8003f2a:	f108 0801 	add.w	r8, r8, #1
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	f898 1000 	ldrb.w	r1, [r8]
 8003f34:	482a      	ldr	r0, [pc, #168]	; (8003fe0 <_vfiprintf_r+0x220>)
 8003f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f3a:	2206      	movs	r2, #6
 8003f3c:	f108 0701 	add.w	r7, r8, #1
 8003f40:	f7fc f94e 	bl	80001e0 <memchr>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d037      	beq.n	8003fb8 <_vfiprintf_r+0x1f8>
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <_vfiprintf_r+0x224>)
 8003f4a:	bb1b      	cbnz	r3, 8003f94 <_vfiprintf_r+0x1d4>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	3307      	adds	r3, #7
 8003f50:	f023 0307 	bic.w	r3, r3, #7
 8003f54:	3308      	adds	r3, #8
 8003f56:	9303      	str	r3, [sp, #12]
 8003f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5a:	444b      	add	r3, r9
 8003f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5e:	e750      	b.n	8003e02 <_vfiprintf_r+0x42>
 8003f60:	fb05 3202 	mla	r2, r5, r2, r3
 8003f64:	2001      	movs	r0, #1
 8003f66:	4688      	mov	r8, r1
 8003f68:	e78a      	b.n	8003e80 <_vfiprintf_r+0xc0>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f108 0801 	add.w	r8, r8, #1
 8003f70:	9305      	str	r3, [sp, #20]
 8003f72:	4619      	mov	r1, r3
 8003f74:	250a      	movs	r5, #10
 8003f76:	4640      	mov	r0, r8
 8003f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f7c:	3a30      	subs	r2, #48	; 0x30
 8003f7e:	2a09      	cmp	r2, #9
 8003f80:	d903      	bls.n	8003f8a <_vfiprintf_r+0x1ca>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0c3      	beq.n	8003f0e <_vfiprintf_r+0x14e>
 8003f86:	9105      	str	r1, [sp, #20]
 8003f88:	e7c1      	b.n	8003f0e <_vfiprintf_r+0x14e>
 8003f8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4680      	mov	r8, r0
 8003f92:	e7f0      	b.n	8003f76 <_vfiprintf_r+0x1b6>
 8003f94:	ab03      	add	r3, sp, #12
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <_vfiprintf_r+0x228>)
 8003f9c:	a904      	add	r1, sp, #16
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f3af 8000 	nop.w
 8003fa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fa8:	4681      	mov	r9, r0
 8003faa:	d1d5      	bne.n	8003f58 <_vfiprintf_r+0x198>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	065b      	lsls	r3, r3, #25
 8003fb0:	f53f af7e 	bmi.w	8003eb0 <_vfiprintf_r+0xf0>
 8003fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fb6:	e77d      	b.n	8003eb4 <_vfiprintf_r+0xf4>
 8003fb8:	ab03      	add	r3, sp, #12
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <_vfiprintf_r+0x228>)
 8003fc0:	a904      	add	r1, sp, #16
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f888 	bl	80040d8 <_printf_i>
 8003fc8:	e7ec      	b.n	8003fa4 <_vfiprintf_r+0x1e4>
 8003fca:	bf00      	nop
 8003fcc:	08004870 	.word	0x08004870
 8003fd0:	080048b0 	.word	0x080048b0
 8003fd4:	08004890 	.word	0x08004890
 8003fd8:	08004850 	.word	0x08004850
 8003fdc:	080048b6 	.word	0x080048b6
 8003fe0:	080048ba 	.word	0x080048ba
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d9b 	.word	0x08003d9b

08003fec <_printf_common>:
 8003fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	4691      	mov	r9, r2
 8003ff2:	461f      	mov	r7, r3
 8003ff4:	688a      	ldr	r2, [r1, #8]
 8003ff6:	690b      	ldr	r3, [r1, #16]
 8003ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bfb8      	it	lt
 8004000:	4613      	movlt	r3, r2
 8004002:	f8c9 3000 	str.w	r3, [r9]
 8004006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400a:	4606      	mov	r6, r0
 800400c:	460c      	mov	r4, r1
 800400e:	b112      	cbz	r2, 8004016 <_printf_common+0x2a>
 8004010:	3301      	adds	r3, #1
 8004012:	f8c9 3000 	str.w	r3, [r9]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004020:	3302      	addmi	r3, #2
 8004022:	f8c9 3000 	strmi.w	r3, [r9]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d107      	bne.n	800403e <_printf_common+0x52>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	f8d9 2000 	ldr.w	r2, [r9]
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	42ab      	cmp	r3, r5
 800403c:	dc28      	bgt.n	8004090 <_printf_common+0xa4>
 800403e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	3300      	adds	r3, #0
 8004046:	bf18      	it	ne
 8004048:	2301      	movne	r3, #1
 800404a:	0692      	lsls	r2, r2, #26
 800404c:	d42d      	bmi.n	80040aa <_printf_common+0xbe>
 800404e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004052:	4639      	mov	r1, r7
 8004054:	4630      	mov	r0, r6
 8004056:	47c0      	blx	r8
 8004058:	3001      	adds	r0, #1
 800405a:	d020      	beq.n	800409e <_printf_common+0xb2>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	68e5      	ldr	r5, [r4, #12]
 8004060:	f8d9 2000 	ldr.w	r2, [r9]
 8004064:	f003 0306 	and.w	r3, r3, #6
 8004068:	2b04      	cmp	r3, #4
 800406a:	bf08      	it	eq
 800406c:	1aad      	subeq	r5, r5, r2
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	6922      	ldr	r2, [r4, #16]
 8004072:	bf0c      	ite	eq
 8004074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004078:	2500      	movne	r5, #0
 800407a:	4293      	cmp	r3, r2
 800407c:	bfc4      	itt	gt
 800407e:	1a9b      	subgt	r3, r3, r2
 8004080:	18ed      	addgt	r5, r5, r3
 8004082:	f04f 0900 	mov.w	r9, #0
 8004086:	341a      	adds	r4, #26
 8004088:	454d      	cmp	r5, r9
 800408a:	d11a      	bne.n	80040c2 <_printf_common+0xd6>
 800408c:	2000      	movs	r0, #0
 800408e:	e008      	b.n	80040a2 <_printf_common+0xb6>
 8004090:	2301      	movs	r3, #1
 8004092:	4652      	mov	r2, sl
 8004094:	4639      	mov	r1, r7
 8004096:	4630      	mov	r0, r6
 8004098:	47c0      	blx	r8
 800409a:	3001      	adds	r0, #1
 800409c:	d103      	bne.n	80040a6 <_printf_common+0xba>
 800409e:	f04f 30ff 	mov.w	r0, #4294967295
 80040a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a6:	3501      	adds	r5, #1
 80040a8:	e7c3      	b.n	8004032 <_printf_common+0x46>
 80040aa:	18e1      	adds	r1, r4, r3
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	2030      	movs	r0, #48	; 0x30
 80040b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b4:	4422      	add	r2, r4
 80040b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040be:	3302      	adds	r3, #2
 80040c0:	e7c5      	b.n	800404e <_printf_common+0x62>
 80040c2:	2301      	movs	r3, #1
 80040c4:	4622      	mov	r2, r4
 80040c6:	4639      	mov	r1, r7
 80040c8:	4630      	mov	r0, r6
 80040ca:	47c0      	blx	r8
 80040cc:	3001      	adds	r0, #1
 80040ce:	d0e6      	beq.n	800409e <_printf_common+0xb2>
 80040d0:	f109 0901 	add.w	r9, r9, #1
 80040d4:	e7d8      	b.n	8004088 <_printf_common+0x9c>
	...

080040d8 <_printf_i>:
 80040d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040e0:	460c      	mov	r4, r1
 80040e2:	7e09      	ldrb	r1, [r1, #24]
 80040e4:	b085      	sub	sp, #20
 80040e6:	296e      	cmp	r1, #110	; 0x6e
 80040e8:	4617      	mov	r7, r2
 80040ea:	4606      	mov	r6, r0
 80040ec:	4698      	mov	r8, r3
 80040ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040f0:	f000 80b3 	beq.w	800425a <_printf_i+0x182>
 80040f4:	d822      	bhi.n	800413c <_printf_i+0x64>
 80040f6:	2963      	cmp	r1, #99	; 0x63
 80040f8:	d036      	beq.n	8004168 <_printf_i+0x90>
 80040fa:	d80a      	bhi.n	8004112 <_printf_i+0x3a>
 80040fc:	2900      	cmp	r1, #0
 80040fe:	f000 80b9 	beq.w	8004274 <_printf_i+0x19c>
 8004102:	2958      	cmp	r1, #88	; 0x58
 8004104:	f000 8083 	beq.w	800420e <_printf_i+0x136>
 8004108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800410c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004110:	e032      	b.n	8004178 <_printf_i+0xa0>
 8004112:	2964      	cmp	r1, #100	; 0x64
 8004114:	d001      	beq.n	800411a <_printf_i+0x42>
 8004116:	2969      	cmp	r1, #105	; 0x69
 8004118:	d1f6      	bne.n	8004108 <_printf_i+0x30>
 800411a:	6820      	ldr	r0, [r4, #0]
 800411c:	6813      	ldr	r3, [r2, #0]
 800411e:	0605      	lsls	r5, r0, #24
 8004120:	f103 0104 	add.w	r1, r3, #4
 8004124:	d52a      	bpl.n	800417c <_printf_i+0xa4>
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6011      	str	r1, [r2, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da03      	bge.n	8004136 <_printf_i+0x5e>
 800412e:	222d      	movs	r2, #45	; 0x2d
 8004130:	425b      	negs	r3, r3
 8004132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004136:	486f      	ldr	r0, [pc, #444]	; (80042f4 <_printf_i+0x21c>)
 8004138:	220a      	movs	r2, #10
 800413a:	e039      	b.n	80041b0 <_printf_i+0xd8>
 800413c:	2973      	cmp	r1, #115	; 0x73
 800413e:	f000 809d 	beq.w	800427c <_printf_i+0x1a4>
 8004142:	d808      	bhi.n	8004156 <_printf_i+0x7e>
 8004144:	296f      	cmp	r1, #111	; 0x6f
 8004146:	d020      	beq.n	800418a <_printf_i+0xb2>
 8004148:	2970      	cmp	r1, #112	; 0x70
 800414a:	d1dd      	bne.n	8004108 <_printf_i+0x30>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f043 0320 	orr.w	r3, r3, #32
 8004152:	6023      	str	r3, [r4, #0]
 8004154:	e003      	b.n	800415e <_printf_i+0x86>
 8004156:	2975      	cmp	r1, #117	; 0x75
 8004158:	d017      	beq.n	800418a <_printf_i+0xb2>
 800415a:	2978      	cmp	r1, #120	; 0x78
 800415c:	d1d4      	bne.n	8004108 <_printf_i+0x30>
 800415e:	2378      	movs	r3, #120	; 0x78
 8004160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004164:	4864      	ldr	r0, [pc, #400]	; (80042f8 <_printf_i+0x220>)
 8004166:	e055      	b.n	8004214 <_printf_i+0x13c>
 8004168:	6813      	ldr	r3, [r2, #0]
 800416a:	1d19      	adds	r1, r3, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6011      	str	r1, [r2, #0]
 8004170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004178:	2301      	movs	r3, #1
 800417a:	e08c      	b.n	8004296 <_printf_i+0x1be>
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6011      	str	r1, [r2, #0]
 8004180:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004184:	bf18      	it	ne
 8004186:	b21b      	sxthne	r3, r3
 8004188:	e7cf      	b.n	800412a <_printf_i+0x52>
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	1d18      	adds	r0, r3, #4
 8004190:	6010      	str	r0, [r2, #0]
 8004192:	0628      	lsls	r0, r5, #24
 8004194:	d501      	bpl.n	800419a <_printf_i+0xc2>
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	e002      	b.n	80041a0 <_printf_i+0xc8>
 800419a:	0668      	lsls	r0, r5, #25
 800419c:	d5fb      	bpl.n	8004196 <_printf_i+0xbe>
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	4854      	ldr	r0, [pc, #336]	; (80042f4 <_printf_i+0x21c>)
 80041a2:	296f      	cmp	r1, #111	; 0x6f
 80041a4:	bf14      	ite	ne
 80041a6:	220a      	movne	r2, #10
 80041a8:	2208      	moveq	r2, #8
 80041aa:	2100      	movs	r1, #0
 80041ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b0:	6865      	ldr	r5, [r4, #4]
 80041b2:	60a5      	str	r5, [r4, #8]
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	f2c0 8095 	blt.w	80042e4 <_printf_i+0x20c>
 80041ba:	6821      	ldr	r1, [r4, #0]
 80041bc:	f021 0104 	bic.w	r1, r1, #4
 80041c0:	6021      	str	r1, [r4, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d13d      	bne.n	8004242 <_printf_i+0x16a>
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	f040 808e 	bne.w	80042e8 <_printf_i+0x210>
 80041cc:	4665      	mov	r5, ip
 80041ce:	2a08      	cmp	r2, #8
 80041d0:	d10b      	bne.n	80041ea <_printf_i+0x112>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	07db      	lsls	r3, r3, #31
 80041d6:	d508      	bpl.n	80041ea <_printf_i+0x112>
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	bfde      	ittt	le
 80041e0:	2330      	movle	r3, #48	; 0x30
 80041e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ea:	ebac 0305 	sub.w	r3, ip, r5
 80041ee:	6123      	str	r3, [r4, #16]
 80041f0:	f8cd 8000 	str.w	r8, [sp]
 80041f4:	463b      	mov	r3, r7
 80041f6:	aa03      	add	r2, sp, #12
 80041f8:	4621      	mov	r1, r4
 80041fa:	4630      	mov	r0, r6
 80041fc:	f7ff fef6 	bl	8003fec <_printf_common>
 8004200:	3001      	adds	r0, #1
 8004202:	d14d      	bne.n	80042a0 <_printf_i+0x1c8>
 8004204:	f04f 30ff 	mov.w	r0, #4294967295
 8004208:	b005      	add	sp, #20
 800420a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800420e:	4839      	ldr	r0, [pc, #228]	; (80042f4 <_printf_i+0x21c>)
 8004210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004214:	6813      	ldr	r3, [r2, #0]
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	1d1d      	adds	r5, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6015      	str	r5, [r2, #0]
 800421e:	060a      	lsls	r2, r1, #24
 8004220:	d50b      	bpl.n	800423a <_printf_i+0x162>
 8004222:	07ca      	lsls	r2, r1, #31
 8004224:	bf44      	itt	mi
 8004226:	f041 0120 	orrmi.w	r1, r1, #32
 800422a:	6021      	strmi	r1, [r4, #0]
 800422c:	b91b      	cbnz	r3, 8004236 <_printf_i+0x15e>
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	f022 0220 	bic.w	r2, r2, #32
 8004234:	6022      	str	r2, [r4, #0]
 8004236:	2210      	movs	r2, #16
 8004238:	e7b7      	b.n	80041aa <_printf_i+0xd2>
 800423a:	064d      	lsls	r5, r1, #25
 800423c:	bf48      	it	mi
 800423e:	b29b      	uxthmi	r3, r3
 8004240:	e7ef      	b.n	8004222 <_printf_i+0x14a>
 8004242:	4665      	mov	r5, ip
 8004244:	fbb3 f1f2 	udiv	r1, r3, r2
 8004248:	fb02 3311 	mls	r3, r2, r1, r3
 800424c:	5cc3      	ldrb	r3, [r0, r3]
 800424e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004252:	460b      	mov	r3, r1
 8004254:	2900      	cmp	r1, #0
 8004256:	d1f5      	bne.n	8004244 <_printf_i+0x16c>
 8004258:	e7b9      	b.n	80041ce <_printf_i+0xf6>
 800425a:	6813      	ldr	r3, [r2, #0]
 800425c:	6825      	ldr	r5, [r4, #0]
 800425e:	6961      	ldr	r1, [r4, #20]
 8004260:	1d18      	adds	r0, r3, #4
 8004262:	6010      	str	r0, [r2, #0]
 8004264:	0628      	lsls	r0, r5, #24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	d501      	bpl.n	800426e <_printf_i+0x196>
 800426a:	6019      	str	r1, [r3, #0]
 800426c:	e002      	b.n	8004274 <_printf_i+0x19c>
 800426e:	066a      	lsls	r2, r5, #25
 8004270:	d5fb      	bpl.n	800426a <_printf_i+0x192>
 8004272:	8019      	strh	r1, [r3, #0]
 8004274:	2300      	movs	r3, #0
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	4665      	mov	r5, ip
 800427a:	e7b9      	b.n	80041f0 <_printf_i+0x118>
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	1d19      	adds	r1, r3, #4
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	681d      	ldr	r5, [r3, #0]
 8004284:	6862      	ldr	r2, [r4, #4]
 8004286:	2100      	movs	r1, #0
 8004288:	4628      	mov	r0, r5
 800428a:	f7fb ffa9 	bl	80001e0 <memchr>
 800428e:	b108      	cbz	r0, 8004294 <_printf_i+0x1bc>
 8004290:	1b40      	subs	r0, r0, r5
 8004292:	6060      	str	r0, [r4, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	6123      	str	r3, [r4, #16]
 8004298:	2300      	movs	r3, #0
 800429a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800429e:	e7a7      	b.n	80041f0 <_printf_i+0x118>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	462a      	mov	r2, r5
 80042a4:	4639      	mov	r1, r7
 80042a6:	4630      	mov	r0, r6
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d0aa      	beq.n	8004204 <_printf_i+0x12c>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	079b      	lsls	r3, r3, #30
 80042b2:	d413      	bmi.n	80042dc <_printf_i+0x204>
 80042b4:	68e0      	ldr	r0, [r4, #12]
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	4298      	cmp	r0, r3
 80042ba:	bfb8      	it	lt
 80042bc:	4618      	movlt	r0, r3
 80042be:	e7a3      	b.n	8004208 <_printf_i+0x130>
 80042c0:	2301      	movs	r3, #1
 80042c2:	464a      	mov	r2, r9
 80042c4:	4639      	mov	r1, r7
 80042c6:	4630      	mov	r0, r6
 80042c8:	47c0      	blx	r8
 80042ca:	3001      	adds	r0, #1
 80042cc:	d09a      	beq.n	8004204 <_printf_i+0x12c>
 80042ce:	3501      	adds	r5, #1
 80042d0:	68e3      	ldr	r3, [r4, #12]
 80042d2:	9a03      	ldr	r2, [sp, #12]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	42ab      	cmp	r3, r5
 80042d8:	dcf2      	bgt.n	80042c0 <_printf_i+0x1e8>
 80042da:	e7eb      	b.n	80042b4 <_printf_i+0x1dc>
 80042dc:	2500      	movs	r5, #0
 80042de:	f104 0919 	add.w	r9, r4, #25
 80042e2:	e7f5      	b.n	80042d0 <_printf_i+0x1f8>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ac      	bne.n	8004242 <_printf_i+0x16a>
 80042e8:	7803      	ldrb	r3, [r0, #0]
 80042ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f2:	e76c      	b.n	80041ce <_printf_i+0xf6>
 80042f4:	080048c1 	.word	0x080048c1
 80042f8:	080048d2 	.word	0x080048d2

080042fc <__sread>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	460c      	mov	r4, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	f000 fa46 	bl	8004794 <_read_r>
 8004308:	2800      	cmp	r0, #0
 800430a:	bfab      	itete	ge
 800430c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800430e:	89a3      	ldrhlt	r3, [r4, #12]
 8004310:	181b      	addge	r3, r3, r0
 8004312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004316:	bfac      	ite	ge
 8004318:	6563      	strge	r3, [r4, #84]	; 0x54
 800431a:	81a3      	strhlt	r3, [r4, #12]
 800431c:	bd10      	pop	{r4, pc}

0800431e <__swrite>:
 800431e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004322:	461f      	mov	r7, r3
 8004324:	898b      	ldrh	r3, [r1, #12]
 8004326:	05db      	lsls	r3, r3, #23
 8004328:	4605      	mov	r5, r0
 800432a:	460c      	mov	r4, r1
 800432c:	4616      	mov	r6, r2
 800432e:	d505      	bpl.n	800433c <__swrite+0x1e>
 8004330:	2302      	movs	r3, #2
 8004332:	2200      	movs	r2, #0
 8004334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004338:	f000 f9b6 	bl	80046a8 <_lseek_r>
 800433c:	89a3      	ldrh	r3, [r4, #12]
 800433e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	4632      	mov	r2, r6
 800434a:	463b      	mov	r3, r7
 800434c:	4628      	mov	r0, r5
 800434e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	f000 b869 	b.w	8004428 <_write_r>

08004356 <__sseek>:
 8004356:	b510      	push	{r4, lr}
 8004358:	460c      	mov	r4, r1
 800435a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800435e:	f000 f9a3 	bl	80046a8 <_lseek_r>
 8004362:	1c43      	adds	r3, r0, #1
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	bf15      	itete	ne
 8004368:	6560      	strne	r0, [r4, #84]	; 0x54
 800436a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800436e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004372:	81a3      	strheq	r3, [r4, #12]
 8004374:	bf18      	it	ne
 8004376:	81a3      	strhne	r3, [r4, #12]
 8004378:	bd10      	pop	{r4, pc}

0800437a <__sclose>:
 800437a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437e:	f000 b8d3 	b.w	8004528 <_close_r>
	...

08004384 <__swbuf_r>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	460e      	mov	r6, r1
 8004388:	4614      	mov	r4, r2
 800438a:	4605      	mov	r5, r0
 800438c:	b118      	cbz	r0, 8004396 <__swbuf_r+0x12>
 800438e:	6983      	ldr	r3, [r0, #24]
 8004390:	b90b      	cbnz	r3, 8004396 <__swbuf_r+0x12>
 8004392:	f7ff fc5f 	bl	8003c54 <__sinit>
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <__swbuf_r+0x98>)
 8004398:	429c      	cmp	r4, r3
 800439a:	d12a      	bne.n	80043f2 <__swbuf_r+0x6e>
 800439c:	686c      	ldr	r4, [r5, #4]
 800439e:	69a3      	ldr	r3, [r4, #24]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	89a3      	ldrh	r3, [r4, #12]
 80043a4:	071a      	lsls	r2, r3, #28
 80043a6:	d52e      	bpl.n	8004406 <__swbuf_r+0x82>
 80043a8:	6923      	ldr	r3, [r4, #16]
 80043aa:	b363      	cbz	r3, 8004406 <__swbuf_r+0x82>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	6820      	ldr	r0, [r4, #0]
 80043b0:	1ac0      	subs	r0, r0, r3
 80043b2:	6963      	ldr	r3, [r4, #20]
 80043b4:	b2f6      	uxtb	r6, r6
 80043b6:	4283      	cmp	r3, r0
 80043b8:	4637      	mov	r7, r6
 80043ba:	dc04      	bgt.n	80043c6 <__swbuf_r+0x42>
 80043bc:	4621      	mov	r1, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	f000 f948 	bl	8004654 <_fflush_r>
 80043c4:	bb28      	cbnz	r0, 8004412 <__swbuf_r+0x8e>
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	6022      	str	r2, [r4, #0]
 80043d2:	701e      	strb	r6, [r3, #0]
 80043d4:	6963      	ldr	r3, [r4, #20]
 80043d6:	3001      	adds	r0, #1
 80043d8:	4283      	cmp	r3, r0
 80043da:	d004      	beq.n	80043e6 <__swbuf_r+0x62>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d519      	bpl.n	8004416 <__swbuf_r+0x92>
 80043e2:	2e0a      	cmp	r6, #10
 80043e4:	d117      	bne.n	8004416 <__swbuf_r+0x92>
 80043e6:	4621      	mov	r1, r4
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 f933 	bl	8004654 <_fflush_r>
 80043ee:	b190      	cbz	r0, 8004416 <__swbuf_r+0x92>
 80043f0:	e00f      	b.n	8004412 <__swbuf_r+0x8e>
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <__swbuf_r+0x9c>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d101      	bne.n	80043fc <__swbuf_r+0x78>
 80043f8:	68ac      	ldr	r4, [r5, #8]
 80043fa:	e7d0      	b.n	800439e <__swbuf_r+0x1a>
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <__swbuf_r+0xa0>)
 80043fe:	429c      	cmp	r4, r3
 8004400:	bf08      	it	eq
 8004402:	68ec      	ldreq	r4, [r5, #12]
 8004404:	e7cb      	b.n	800439e <__swbuf_r+0x1a>
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f81f 	bl	800444c <__swsetup_r>
 800440e:	2800      	cmp	r0, #0
 8004410:	d0cc      	beq.n	80043ac <__swbuf_r+0x28>
 8004412:	f04f 37ff 	mov.w	r7, #4294967295
 8004416:	4638      	mov	r0, r7
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441a:	bf00      	nop
 800441c:	08004870 	.word	0x08004870
 8004420:	08004890 	.word	0x08004890
 8004424:	08004850 	.word	0x08004850

08004428 <_write_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4c07      	ldr	r4, [pc, #28]	; (8004448 <_write_r+0x20>)
 800442c:	4605      	mov	r5, r0
 800442e:	4608      	mov	r0, r1
 8004430:	4611      	mov	r1, r2
 8004432:	2200      	movs	r2, #0
 8004434:	6022      	str	r2, [r4, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	f7fc fe1f 	bl	800107a <_write>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_write_r+0x1e>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	b103      	cbz	r3, 8004446 <_write_r+0x1e>
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200008c0 	.word	0x200008c0

0800444c <__swsetup_r>:
 800444c:	4b32      	ldr	r3, [pc, #200]	; (8004518 <__swsetup_r+0xcc>)
 800444e:	b570      	push	{r4, r5, r6, lr}
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	4606      	mov	r6, r0
 8004454:	460c      	mov	r4, r1
 8004456:	b125      	cbz	r5, 8004462 <__swsetup_r+0x16>
 8004458:	69ab      	ldr	r3, [r5, #24]
 800445a:	b913      	cbnz	r3, 8004462 <__swsetup_r+0x16>
 800445c:	4628      	mov	r0, r5
 800445e:	f7ff fbf9 	bl	8003c54 <__sinit>
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <__swsetup_r+0xd0>)
 8004464:	429c      	cmp	r4, r3
 8004466:	d10f      	bne.n	8004488 <__swsetup_r+0x3c>
 8004468:	686c      	ldr	r4, [r5, #4]
 800446a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446e:	b29a      	uxth	r2, r3
 8004470:	0715      	lsls	r5, r2, #28
 8004472:	d42c      	bmi.n	80044ce <__swsetup_r+0x82>
 8004474:	06d0      	lsls	r0, r2, #27
 8004476:	d411      	bmi.n	800449c <__swsetup_r+0x50>
 8004478:	2209      	movs	r2, #9
 800447a:	6032      	str	r2, [r6, #0]
 800447c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	f04f 30ff 	mov.w	r0, #4294967295
 8004486:	e03e      	b.n	8004506 <__swsetup_r+0xba>
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <__swsetup_r+0xd4>)
 800448a:	429c      	cmp	r4, r3
 800448c:	d101      	bne.n	8004492 <__swsetup_r+0x46>
 800448e:	68ac      	ldr	r4, [r5, #8]
 8004490:	e7eb      	b.n	800446a <__swsetup_r+0x1e>
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <__swsetup_r+0xd8>)
 8004494:	429c      	cmp	r4, r3
 8004496:	bf08      	it	eq
 8004498:	68ec      	ldreq	r4, [r5, #12]
 800449a:	e7e6      	b.n	800446a <__swsetup_r+0x1e>
 800449c:	0751      	lsls	r1, r2, #29
 800449e:	d512      	bpl.n	80044c6 <__swsetup_r+0x7a>
 80044a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a2:	b141      	cbz	r1, 80044b6 <__swsetup_r+0x6a>
 80044a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044a8:	4299      	cmp	r1, r3
 80044aa:	d002      	beq.n	80044b2 <__swsetup_r+0x66>
 80044ac:	4630      	mov	r0, r6
 80044ae:	f7ff fac1 	bl	8003a34 <_free_r>
 80044b2:	2300      	movs	r3, #0
 80044b4:	6363      	str	r3, [r4, #52]	; 0x34
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	6923      	ldr	r3, [r4, #16]
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	b94b      	cbnz	r3, 80044e6 <__swsetup_r+0x9a>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044dc:	d003      	beq.n	80044e6 <__swsetup_r+0x9a>
 80044de:	4621      	mov	r1, r4
 80044e0:	4630      	mov	r0, r6
 80044e2:	f000 f917 	bl	8004714 <__smakebuf_r>
 80044e6:	89a2      	ldrh	r2, [r4, #12]
 80044e8:	f012 0301 	ands.w	r3, r2, #1
 80044ec:	d00c      	beq.n	8004508 <__swsetup_r+0xbc>
 80044ee:	2300      	movs	r3, #0
 80044f0:	60a3      	str	r3, [r4, #8]
 80044f2:	6963      	ldr	r3, [r4, #20]
 80044f4:	425b      	negs	r3, r3
 80044f6:	61a3      	str	r3, [r4, #24]
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	b953      	cbnz	r3, 8004512 <__swsetup_r+0xc6>
 80044fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004500:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004504:	d1ba      	bne.n	800447c <__swsetup_r+0x30>
 8004506:	bd70      	pop	{r4, r5, r6, pc}
 8004508:	0792      	lsls	r2, r2, #30
 800450a:	bf58      	it	pl
 800450c:	6963      	ldrpl	r3, [r4, #20]
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	e7f2      	b.n	80044f8 <__swsetup_r+0xac>
 8004512:	2000      	movs	r0, #0
 8004514:	e7f7      	b.n	8004506 <__swsetup_r+0xba>
 8004516:	bf00      	nop
 8004518:	20000014 	.word	0x20000014
 800451c:	08004870 	.word	0x08004870
 8004520:	08004890 	.word	0x08004890
 8004524:	08004850 	.word	0x08004850

08004528 <_close_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4c06      	ldr	r4, [pc, #24]	; (8004544 <_close_r+0x1c>)
 800452c:	2300      	movs	r3, #0
 800452e:	4605      	mov	r5, r0
 8004530:	4608      	mov	r0, r1
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	f7fc fdbd 	bl	80010b2 <_close>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_close_r+0x1a>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	b103      	cbz	r3, 8004542 <_close_r+0x1a>
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200008c0 	.word	0x200008c0

08004548 <__sflush_r>:
 8004548:	898a      	ldrh	r2, [r1, #12]
 800454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	4605      	mov	r5, r0
 8004550:	0710      	lsls	r0, r2, #28
 8004552:	460c      	mov	r4, r1
 8004554:	d458      	bmi.n	8004608 <__sflush_r+0xc0>
 8004556:	684b      	ldr	r3, [r1, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	dc05      	bgt.n	8004568 <__sflush_r+0x20>
 800455c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	dc02      	bgt.n	8004568 <__sflush_r+0x20>
 8004562:	2000      	movs	r0, #0
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800456a:	2e00      	cmp	r6, #0
 800456c:	d0f9      	beq.n	8004562 <__sflush_r+0x1a>
 800456e:	2300      	movs	r3, #0
 8004570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004574:	682f      	ldr	r7, [r5, #0]
 8004576:	6a21      	ldr	r1, [r4, #32]
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	d032      	beq.n	80045e2 <__sflush_r+0x9a>
 800457c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	075a      	lsls	r2, r3, #29
 8004582:	d505      	bpl.n	8004590 <__sflush_r+0x48>
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	1ac0      	subs	r0, r0, r3
 8004588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800458a:	b10b      	cbz	r3, 8004590 <__sflush_r+0x48>
 800458c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800458e:	1ac0      	subs	r0, r0, r3
 8004590:	2300      	movs	r3, #0
 8004592:	4602      	mov	r2, r0
 8004594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004596:	6a21      	ldr	r1, [r4, #32]
 8004598:	4628      	mov	r0, r5
 800459a:	47b0      	blx	r6
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	d106      	bne.n	80045b0 <__sflush_r+0x68>
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	291d      	cmp	r1, #29
 80045a6:	d848      	bhi.n	800463a <__sflush_r+0xf2>
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <__sflush_r+0x108>)
 80045aa:	40ca      	lsrs	r2, r1
 80045ac:	07d6      	lsls	r6, r2, #31
 80045ae:	d544      	bpl.n	800463a <__sflush_r+0xf2>
 80045b0:	2200      	movs	r2, #0
 80045b2:	6062      	str	r2, [r4, #4]
 80045b4:	04d9      	lsls	r1, r3, #19
 80045b6:	6922      	ldr	r2, [r4, #16]
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	d504      	bpl.n	80045c6 <__sflush_r+0x7e>
 80045bc:	1c42      	adds	r2, r0, #1
 80045be:	d101      	bne.n	80045c4 <__sflush_r+0x7c>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b903      	cbnz	r3, 80045c6 <__sflush_r+0x7e>
 80045c4:	6560      	str	r0, [r4, #84]	; 0x54
 80045c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c8:	602f      	str	r7, [r5, #0]
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d0c9      	beq.n	8004562 <__sflush_r+0x1a>
 80045ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045d2:	4299      	cmp	r1, r3
 80045d4:	d002      	beq.n	80045dc <__sflush_r+0x94>
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7ff fa2c 	bl	8003a34 <_free_r>
 80045dc:	2000      	movs	r0, #0
 80045de:	6360      	str	r0, [r4, #52]	; 0x34
 80045e0:	e7c0      	b.n	8004564 <__sflush_r+0x1c>
 80045e2:	2301      	movs	r3, #1
 80045e4:	4628      	mov	r0, r5
 80045e6:	47b0      	blx	r6
 80045e8:	1c41      	adds	r1, r0, #1
 80045ea:	d1c8      	bne.n	800457e <__sflush_r+0x36>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0c5      	beq.n	800457e <__sflush_r+0x36>
 80045f2:	2b1d      	cmp	r3, #29
 80045f4:	d001      	beq.n	80045fa <__sflush_r+0xb2>
 80045f6:	2b16      	cmp	r3, #22
 80045f8:	d101      	bne.n	80045fe <__sflush_r+0xb6>
 80045fa:	602f      	str	r7, [r5, #0]
 80045fc:	e7b1      	b.n	8004562 <__sflush_r+0x1a>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	e7ad      	b.n	8004564 <__sflush_r+0x1c>
 8004608:	690f      	ldr	r7, [r1, #16]
 800460a:	2f00      	cmp	r7, #0
 800460c:	d0a9      	beq.n	8004562 <__sflush_r+0x1a>
 800460e:	0793      	lsls	r3, r2, #30
 8004610:	680e      	ldr	r6, [r1, #0]
 8004612:	bf08      	it	eq
 8004614:	694b      	ldreq	r3, [r1, #20]
 8004616:	600f      	str	r7, [r1, #0]
 8004618:	bf18      	it	ne
 800461a:	2300      	movne	r3, #0
 800461c:	eba6 0807 	sub.w	r8, r6, r7
 8004620:	608b      	str	r3, [r1, #8]
 8004622:	f1b8 0f00 	cmp.w	r8, #0
 8004626:	dd9c      	ble.n	8004562 <__sflush_r+0x1a>
 8004628:	4643      	mov	r3, r8
 800462a:	463a      	mov	r2, r7
 800462c:	6a21      	ldr	r1, [r4, #32]
 800462e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004630:	4628      	mov	r0, r5
 8004632:	47b0      	blx	r6
 8004634:	2800      	cmp	r0, #0
 8004636:	dc06      	bgt.n	8004646 <__sflush_r+0xfe>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e78e      	b.n	8004564 <__sflush_r+0x1c>
 8004646:	4407      	add	r7, r0
 8004648:	eba8 0800 	sub.w	r8, r8, r0
 800464c:	e7e9      	b.n	8004622 <__sflush_r+0xda>
 800464e:	bf00      	nop
 8004650:	20400001 	.word	0x20400001

08004654 <_fflush_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	690b      	ldr	r3, [r1, #16]
 8004658:	4605      	mov	r5, r0
 800465a:	460c      	mov	r4, r1
 800465c:	b1db      	cbz	r3, 8004696 <_fflush_r+0x42>
 800465e:	b118      	cbz	r0, 8004668 <_fflush_r+0x14>
 8004660:	6983      	ldr	r3, [r0, #24]
 8004662:	b90b      	cbnz	r3, 8004668 <_fflush_r+0x14>
 8004664:	f7ff faf6 	bl	8003c54 <__sinit>
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <_fflush_r+0x48>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d109      	bne.n	8004682 <_fflush_r+0x2e>
 800466e:	686c      	ldr	r4, [r5, #4]
 8004670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004674:	b17b      	cbz	r3, 8004696 <_fflush_r+0x42>
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800467e:	f7ff bf63 	b.w	8004548 <__sflush_r>
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <_fflush_r+0x4c>)
 8004684:	429c      	cmp	r4, r3
 8004686:	d101      	bne.n	800468c <_fflush_r+0x38>
 8004688:	68ac      	ldr	r4, [r5, #8]
 800468a:	e7f1      	b.n	8004670 <_fflush_r+0x1c>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <_fflush_r+0x50>)
 800468e:	429c      	cmp	r4, r3
 8004690:	bf08      	it	eq
 8004692:	68ec      	ldreq	r4, [r5, #12]
 8004694:	e7ec      	b.n	8004670 <_fflush_r+0x1c>
 8004696:	2000      	movs	r0, #0
 8004698:	bd38      	pop	{r3, r4, r5, pc}
 800469a:	bf00      	nop
 800469c:	08004870 	.word	0x08004870
 80046a0:	08004890 	.word	0x08004890
 80046a4:	08004850 	.word	0x08004850

080046a8 <_lseek_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4c07      	ldr	r4, [pc, #28]	; (80046c8 <_lseek_r+0x20>)
 80046ac:	4605      	mov	r5, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	6022      	str	r2, [r4, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fc fd22 	bl	8001100 <_lseek>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_lseek_r+0x1e>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_lseek_r+0x1e>
 80046c4:	602b      	str	r3, [r5, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	200008c0 	.word	0x200008c0

080046cc <__swhatbuf_r>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	460e      	mov	r6, r1
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2900      	cmp	r1, #0
 80046d6:	b096      	sub	sp, #88	; 0x58
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	da07      	bge.n	80046ee <__swhatbuf_r+0x22>
 80046de:	2300      	movs	r3, #0
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	89b3      	ldrh	r3, [r6, #12]
 80046e4:	061a      	lsls	r2, r3, #24
 80046e6:	d410      	bmi.n	800470a <__swhatbuf_r+0x3e>
 80046e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ec:	e00e      	b.n	800470c <__swhatbuf_r+0x40>
 80046ee:	466a      	mov	r2, sp
 80046f0:	f000 f862 	bl	80047b8 <_fstat_r>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	dbf2      	blt.n	80046de <__swhatbuf_r+0x12>
 80046f8:	9a01      	ldr	r2, [sp, #4]
 80046fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004702:	425a      	negs	r2, r3
 8004704:	415a      	adcs	r2, r3
 8004706:	602a      	str	r2, [r5, #0]
 8004708:	e7ee      	b.n	80046e8 <__swhatbuf_r+0x1c>
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	2000      	movs	r0, #0
 800470e:	6023      	str	r3, [r4, #0]
 8004710:	b016      	add	sp, #88	; 0x58
 8004712:	bd70      	pop	{r4, r5, r6, pc}

08004714 <__smakebuf_r>:
 8004714:	898b      	ldrh	r3, [r1, #12]
 8004716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004718:	079d      	lsls	r5, r3, #30
 800471a:	4606      	mov	r6, r0
 800471c:	460c      	mov	r4, r1
 800471e:	d507      	bpl.n	8004730 <__smakebuf_r+0x1c>
 8004720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	2301      	movs	r3, #1
 800472a:	6163      	str	r3, [r4, #20]
 800472c:	b002      	add	sp, #8
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	ab01      	add	r3, sp, #4
 8004732:	466a      	mov	r2, sp
 8004734:	f7ff ffca 	bl	80046cc <__swhatbuf_r>
 8004738:	9900      	ldr	r1, [sp, #0]
 800473a:	4605      	mov	r5, r0
 800473c:	4630      	mov	r0, r6
 800473e:	f7ff f9c7 	bl	8003ad0 <_malloc_r>
 8004742:	b948      	cbnz	r0, 8004758 <__smakebuf_r+0x44>
 8004744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004748:	059a      	lsls	r2, r3, #22
 800474a:	d4ef      	bmi.n	800472c <__smakebuf_r+0x18>
 800474c:	f023 0303 	bic.w	r3, r3, #3
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	e7e3      	b.n	8004720 <__smakebuf_r+0xc>
 8004758:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <__smakebuf_r+0x7c>)
 800475a:	62b3      	str	r3, [r6, #40]	; 0x28
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	6163      	str	r3, [r4, #20]
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	6120      	str	r0, [r4, #16]
 800476e:	b15b      	cbz	r3, 8004788 <__smakebuf_r+0x74>
 8004770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f831 	bl	80047dc <_isatty_r>
 800477a:	b128      	cbz	r0, 8004788 <__smakebuf_r+0x74>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	431d      	orrs	r5, r3
 800478c:	81a5      	strh	r5, [r4, #12]
 800478e:	e7cd      	b.n	800472c <__smakebuf_r+0x18>
 8004790:	08003c1d 	.word	0x08003c1d

08004794 <_read_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4c07      	ldr	r4, [pc, #28]	; (80047b4 <_read_r+0x20>)
 8004798:	4605      	mov	r5, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc fc4c 	bl	8001040 <_read>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_read_r+0x1e>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_read_r+0x1e>
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	200008c0 	.word	0x200008c0

080047b8 <_fstat_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4c07      	ldr	r4, [pc, #28]	; (80047d8 <_fstat_r+0x20>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4605      	mov	r5, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	f7fc fc80 	bl	80010ca <_fstat>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d102      	bne.n	80047d4 <_fstat_r+0x1c>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	b103      	cbz	r3, 80047d4 <_fstat_r+0x1c>
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
 80047d6:	bf00      	nop
 80047d8:	200008c0 	.word	0x200008c0

080047dc <_isatty_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4c06      	ldr	r4, [pc, #24]	; (80047f8 <_isatty_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4605      	mov	r5, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	f7fc fc7f 	bl	80010ea <_isatty>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_isatty_r+0x1a>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_isatty_r+0x1a>
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	200008c0 	.word	0x200008c0

080047fc <_init>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr

08004808 <_fini>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr
