
SnakeGame_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004038  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f8  080042f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004300  08004300  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  20000080  08004388  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08004388  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e020  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f1e  00000000  00000000  0002e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002fff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00030ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001750b  00000000  00000000  00031868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c43  00000000  00000000  00048d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d2ef  00000000  00000000  000529b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000dfd20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080041b8 	.word	0x080041b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080041b8 	.word	0x080041b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 fab2 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f842 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f91e 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8f2 	bl	80006d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8a4 	bl	8000638 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f0:	4816      	ldr	r0, [pc, #88]	; (800054c <main+0x74>)
 80004f2:	f002 fab2 	bl	8002a5a <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT( &huart2, buffer, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4915      	ldr	r1, [pc, #84]	; (8000550 <main+0x78>)
 80004fa:	4816      	ldr	r0, [pc, #88]	; (8000554 <main+0x7c>)
 80004fc:	f002 ff3a 	bl	8003374 <HAL_UART_Receive_IT>
  scene_clear(scene);
 8000500:	4815      	ldr	r0, [pc, #84]	; (8000558 <main+0x80>)
 8000502:	f001 f8fd 	bl	8001700 <scene_clear>
  scene_mainmenu(scene);
 8000506:	4814      	ldr	r0, [pc, #80]	; (8000558 <main+0x80>)
 8000508:	f001 f89c 	bl	8001644 <scene_mainmenu>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
		HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <main+0x84>)
 800050e:	220d      	movs	r2, #13
 8000510:	4913      	ldr	r1, [pc, #76]	; (8000560 <main+0x88>)
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <main+0x7c>)
 8000514:	f002 fe95 	bl	8003242 <HAL_UART_Transmit>
		snake_levelUp(timeX, scene);
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <main+0x8c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	490e      	ldr	r1, [pc, #56]	; (8000558 <main+0x80>)
 800051e:	4618      	mov	r0, r3
 8000520:	f000 ff4e 	bl	80013c0 <snake_levelUp>
		snake_move(scene);
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x80>)
 8000526:	f000 fd47 	bl	8000fb8 <snake_move>
		snake_newFood(scene);
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x80>)
 800052c:	f000 fe4c 	bl	80011c8 <snake_newFood>
		snake_newObstacle(scene);
 8000530:	4809      	ldr	r0, [pc, #36]	; (8000558 <main+0x80>)
 8000532:	f000 feb7 	bl	80012a4 <snake_newObstacle>
		HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <main+0x84>)
 8000538:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800053c:	4906      	ldr	r1, [pc, #24]	; (8000558 <main+0x80>)
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x7c>)
 8000540:	f002 fe7f 	bl	8003242 <HAL_UART_Transmit>
		HAL_Delay(50);
 8000544:	2032      	movs	r0, #50	; 0x32
 8000546:	f001 faef 	bl	8001b28 <HAL_Delay>
		HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 800054a:	e7df      	b.n	800050c <main+0x34>
 800054c:	200000ec 	.word	0x200000ec
 8000550:	200000e8 	.word	0x200000e8
 8000554:	2000012c 	.word	0x2000012c
 8000558:	2000016c 	.word	0x2000016c
 800055c:	000186a0 	.word	0x000186a0
 8000560:	20000000 	.word	0x20000000
 8000564:	2000009c 	.word	0x2000009c

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fd76 	bl	8004068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005dc:	2340      	movs	r3, #64	; 0x40
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fda7 	bl	8002140 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f9e8 	bl	80009cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2101      	movs	r1, #1
 8000618:	4618      	mov	r0, r3
 800061a:	f002 f801 	bl	8002620 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 f9d2 	bl	80009cc <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_TIM2_Init+0x94>)
 8000656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_TIM2_Init+0x94>)
 800065e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000662:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_TIM2_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_TIM2_Init+0x94>)
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_TIM2_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_TIM2_Init+0x94>)
 800067e:	f002 f9c1 	bl	8002a04 <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000688:	f000 f9a0 	bl	80009cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	4619      	mov	r1, r3
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_TIM2_Init+0x94>)
 800069a:	f002 fb0a 	bl	8002cb2 <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 f992 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_TIM2_Init+0x94>)
 80006b6:	f002 fcf5 	bl	80030a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006c0:	f000 f984 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000ec 	.word	0x200000ec

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f002 fd4e 	bl	80031a8 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f95b 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000012c 	.word	0x2000012c
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	f001 fc92 	bl	80020d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_GPIO_Init+0xdc>)
 80007ca:	f001 fb03 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ce:	2320      	movs	r3, #32
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007e6:	f001 faf5 	bl	8001dd4 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	10210000 	.word	0x10210000
 8000800:	40020800 	.word	0x40020800

08000804 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){\
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	timeX++;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000814:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000816:	2120      	movs	r1, #32
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800081a:	f001 fc76 	bl	800210a <HAL_GPIO_TogglePin>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40020000 	.word	0x40020000

08000830 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    /* Get character from UART. Note that does not read two byte characters like arrows. */
    switch(buffer[0]) {
 8000838:	4b5c      	ldr	r3, [pc, #368]	; (80009ac <HAL_UART_RxCpltCallback+0x17c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3b41      	subs	r3, #65	; 0x41
 800083e:	2b36      	cmp	r3, #54	; 0x36
 8000840:	f200 80aa 	bhi.w	8000998 <HAL_UART_RxCpltCallback+0x168>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <HAL_UART_RxCpltCallback+0x1c>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	08000951 	.word	0x08000951
 8000850:	08000999 	.word	0x08000999
 8000854:	08000999 	.word	0x08000999
 8000858:	08000961 	.word	0x08000961
 800085c:	08000999 	.word	0x08000999
 8000860:	0800098f 	.word	0x0800098f
 8000864:	08000999 	.word	0x08000999
 8000868:	08000999 	.word	0x08000999
 800086c:	08000999 	.word	0x08000999
 8000870:	08000999 	.word	0x08000999
 8000874:	08000969 	.word	0x08000969
 8000878:	08000999 	.word	0x08000999
 800087c:	08000999 	.word	0x08000999
 8000880:	08000999 	.word	0x08000999
 8000884:	08000999 	.word	0x08000999
 8000888:	08000999 	.word	0x08000999
 800088c:	08000999 	.word	0x08000999
 8000890:	08000999 	.word	0x08000999
 8000894:	08000941 	.word	0x08000941
 8000898:	08000999 	.word	0x08000999
 800089c:	08000999 	.word	0x08000999
 80008a0:	08000999 	.word	0x08000999
 80008a4:	08000931 	.word	0x08000931
 80008a8:	08000999 	.word	0x08000999
 80008ac:	08000999 	.word	0x08000999
 80008b0:	08000999 	.word	0x08000999
 80008b4:	08000999 	.word	0x08000999
 80008b8:	08000999 	.word	0x08000999
 80008bc:	08000999 	.word	0x08000999
 80008c0:	08000999 	.word	0x08000999
 80008c4:	08000999 	.word	0x08000999
 80008c8:	08000999 	.word	0x08000999
 80008cc:	08000949 	.word	0x08000949
 80008d0:	08000999 	.word	0x08000999
 80008d4:	08000999 	.word	0x08000999
 80008d8:	08000959 	.word	0x08000959
 80008dc:	08000999 	.word	0x08000999
 80008e0:	08000985 	.word	0x08000985
 80008e4:	08000999 	.word	0x08000999
 80008e8:	08000999 	.word	0x08000999
 80008ec:	08000999 	.word	0x08000999
 80008f0:	08000999 	.word	0x08000999
 80008f4:	08000977 	.word	0x08000977
 80008f8:	08000999 	.word	0x08000999
 80008fc:	08000999 	.word	0x08000999
 8000900:	08000999 	.word	0x08000999
 8000904:	08000999 	.word	0x08000999
 8000908:	08000999 	.word	0x08000999
 800090c:	08000999 	.word	0x08000999
 8000910:	08000999 	.word	0x08000999
 8000914:	08000939 	.word	0x08000939
 8000918:	08000999 	.word	0x08000999
 800091c:	08000999 	.word	0x08000999
 8000920:	08000999 	.word	0x08000999
 8000924:	08000929 	.word	0x08000929
    case 'w' :
        snake_setDirection(UP);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 faff 	bl	8000f2c <snake_setDirection>
        break;
 800092e:	e034      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'W' :
        snake_setDirection(UP);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fafb 	bl	8000f2c <snake_setDirection>
        break;
 8000936:	e030      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in DOWN direction if allowed */
    case 's' :
        snake_setDirection(DOWN);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 faf7 	bl	8000f2c <snake_setDirection>
        break;
 800093e:	e02c      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'S' :
        snake_setDirection(DOWN);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 faf3 	bl	8000f2c <snake_setDirection>
        break;
 8000946:	e028      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in LEFT direction if allowed */
    case 'a' :
        snake_setDirection(LEFT);
 8000948:	2004      	movs	r0, #4
 800094a:	f000 faef 	bl	8000f2c <snake_setDirection>
        break;
 800094e:	e024      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'A' :
        snake_setDirection(LEFT);
 8000950:	2004      	movs	r0, #4
 8000952:	f000 faeb 	bl	8000f2c <snake_setDirection>
        break;
 8000956:	e020      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in RIGHT direction if allowed */
    case 'd' :
        snake_setDirection(RIGHT);
 8000958:	2002      	movs	r0, #2
 800095a:	f000 fae7 	bl	8000f2c <snake_setDirection>
        break;
 800095e:	e01c      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'D' :
        snake_setDirection(RIGHT);
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fae3 	bl	8000f2c <snake_setDirection>
        break;
 8000966:	e018      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'K' :
    	scene_clear(scene);
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 800096a:	f000 fec9 	bl	8001700 <scene_clear>
    	snake_init(scene);
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 8000970:	f000 f908 	bl	8000b84 <snake_init>
    	break;
 8000974:	e011      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'k' :
    	scene_clear(scene);
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 8000978:	f000 fec2 	bl	8001700 <scene_clear>
        snake_init(scene);
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 800097e:	f000 f901 	bl	8000b84 <snake_init>
        break;
 8000982:	e00a      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'f' :
    	snake_feed(1, scene);
 8000984:	490a      	ldr	r1, [pc, #40]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fc0a 	bl	80011a0 <snake_feed>
    	break ;
 800098c:	e005      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    case 'F' :
        snake_feed(1, scene);
 800098e:	4908      	ldr	r1, [pc, #32]	; (80009b0 <HAL_UART_RxCpltCallback+0x180>)
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fc05 	bl	80011a0 <snake_feed>
        break ;
 8000996:	e000      	b.n	800099a <HAL_UART_RxCpltCallback+0x16a>
    default :
        break;
 8000998:	bf00      	nop
    }
    /* Restart the interrupt reception mode */
    HAL_UART_Receive_IT( &huart2, buffer, 1);
 800099a:	2201      	movs	r2, #1
 800099c:	4903      	ldr	r1, [pc, #12]	; (80009ac <HAL_UART_RxCpltCallback+0x17c>)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_RxCpltCallback+0x184>)
 80009a0:	f002 fce8 	bl	8003374 <HAL_UART_Receive_IT>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200000e8 	.word	0x200000e8
 80009b0:	2000016c 	.word	0x2000016c
 80009b4:	2000012c 	.word	0x2000012c

080009b8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <createQueue>:
// C program for array implementation of queue
#include "queue.h"

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity){
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
 80009e2:	2014      	movs	r0, #20
 80009e4:	f003 fb38 	bl	8004058 <malloc>
 80009e8:	4603      	mov	r3, r0
 80009ea:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	601a      	str	r2, [r3, #0]
    queue->rear = capacity - 1;  // This is important, see the enqueue
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	605a      	str	r2, [r3, #4]
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fb21 	bl	8004058 <malloc>
 8000a16:	4603      	mov	r3, r0
 8000a18:	461a      	mov	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
    return queue;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <isFull>:

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	461a      	mov	r2, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <isEmpty>:

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf0c      	ite	eq
 8000a60:	2301      	moveq	r3, #1
 8000a62:	2300      	movne	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ffd3 	bl	8000a28 <isFull>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d11b      	bne.n	8000ac0 <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a98:	fb03 f301 	mul.w	r3, r3, r1
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	e000      	b.n	8000ac2 <enqueue+0x50>
        return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <dequeue>:

// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ffbd 	bl	8000a50 <isEmpty>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <dequeue+0x1a>
        return INT_MIN;
 8000adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ae0:	e01b      	b.n	8000b1a <dequeue+0x52>
    int item = queue->array[queue->front];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	691a      	ldr	r2, [r3, #16]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)%queue->capacity;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	461a      	mov	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	fbb2 f1f3 	udiv	r1, r2, r3
 8000b02:	fb03 f301 	mul.w	r3, r3, r1
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	609a      	str	r2, [r3, #8]
    return item;
 8000b18:	68fb      	ldr	r3, [r7, #12]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <front>:

// Function to get front of queue
int front(struct Queue* queue)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ff90 	bl	8000a50 <isEmpty>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <front+0x1a>
        return INT_MIN;
 8000b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b3a:	e006      	b.n	8000b4a <front+0x28>
    return queue->array[queue->front];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	691a      	ldr	r2, [r3, #16]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	681b      	ldr	r3, [r3, #0]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <rear>:

// Function to get rear of queue
int rear(struct Queue* queue)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff78 	bl	8000a50 <isEmpty>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <rear+0x1a>
        return INT_MIN;
 8000b66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b6a:	e006      	b.n	8000b7a <rear+0x28>
    return queue->array[queue->rear];
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	691a      	ldr	r2, [r3, #16]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	681b      	ldr	r3, [r3, #0]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <snake_init>:
static int isPlay;
static int level;
static int level_constant;


void snake_init(char scene[1920]){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	/* Initiate my snake */
	snake_x = createQueue(300); snake_y = createQueue(300);
 8000b8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b90:	f7ff ff23 	bl	80009da <createQueue>
 8000b94:	4602      	mov	r2, r0
 8000b96:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <snake_init+0x114>)
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b9e:	f7ff ff1c 	bl	80009da <createQueue>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <snake_init+0x118>)
 8000ba6:	601a      	str	r2, [r3, #0]
	snake_direction = RIGHT;
 8000ba8:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <snake_init+0x11c>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
	for (int x = 0; x < 5; ++x) { snake_enqueue(x, 0, scene); }
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e007      	b.n	8000bc4 <snake_init+0x40>
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 f897 	bl	8000cec <snake_enqueue>
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	ddf4      	ble.n	8000bb4 <snake_init+0x30>
	snake_head_x = rear(snake_x); snake_head_y = rear(snake_y);
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <snake_init+0x114>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffbf 	bl	8000b52 <rear>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <snake_init+0x120>)
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <snake_init+0x118>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ffb7 	bl	8000b52 <rear>
 8000be4:	4602      	mov	r2, r0
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <snake_init+0x124>)
 8000be8:	601a      	str	r2, [r3, #0]
	snake_tail_x = front(snake_x); snake_tail_y = front(snake_y);
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <snake_init+0x114>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff97 	bl	8000b22 <front>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <snake_init+0x128>)
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <snake_init+0x118>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff8f 	bl	8000b22 <front>
 8000c04:	4602      	mov	r2, r0
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <snake_init+0x12c>)
 8000c08:	601a      	str	r2, [r3, #0]

	/* Initiate enemy */
	enemy_1_x = createQueue(300); enemy_1_y = createQueue(300);
 8000c0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c0e:	f7ff fee4 	bl	80009da <createQueue>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <snake_init+0x130>)
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c1c:	f7ff fedd 	bl	80009da <createQueue>
 8000c20:	4602      	mov	r2, r0
 8000c22:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <snake_init+0x134>)
 8000c24:	601a      	str	r2, [r3, #0]
	enemy_2_x = createQueue(300); enemy_2_y = createQueue(300);
 8000c26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c2a:	f7ff fed6 	bl	80009da <createQueue>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <snake_init+0x138>)
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c38:	f7ff fecf 	bl	80009da <createQueue>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <snake_init+0x13c>)
 8000c40:	601a      	str	r2, [r3, #0]
	enemy_1_direction = RIGHT;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <snake_init+0x140>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	601a      	str	r2, [r3, #0]
	enemy_2_direction = LEFT;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <snake_init+0x144>)
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	601a      	str	r2, [r3, #0]
	/* Initiate game constant */
	scene_setScore(scene);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f8ea 	bl	8000e28 <scene_setScore>
	scene_setLevel(scene);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 fc59 	bl	800150c <scene_setLevel>
	score = 0; food_time = 0; food_constant = 20; isPlay = 1;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <snake_init+0x148>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <snake_init+0x14c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <snake_init+0x150>)
 8000c68:	2214      	movs	r2, #20
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <snake_init+0x154>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
	obstacle_time = 0; obstacle_constant = 20;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <snake_init+0x158>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <snake_init+0x15c>)
 8000c7a:	2214      	movs	r2, #20
 8000c7c:	601a      	str	r2, [r3, #0]
	level = 1; scene_setLevel(scene); level_constant = 60;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <snake_init+0x160>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 fc41 	bl	800150c <scene_setLevel>
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <snake_init+0x164>)
 8000c8c:	223c      	movs	r2, #60	; 0x3c
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000900 	.word	0x20000900
 8000c9c:	200008fc 	.word	0x200008fc
 8000ca0:	200000a0 	.word	0x200000a0
 8000ca4:	200000b0 	.word	0x200000b0
 8000ca8:	200000b4 	.word	0x200000b4
 8000cac:	200000b8 	.word	0x200000b8
 8000cb0:	200000bc 	.word	0x200000bc
 8000cb4:	200008f0 	.word	0x200008f0
 8000cb8:	200008f8 	.word	0x200008f8
 8000cbc:	200008f4 	.word	0x200008f4
 8000cc0:	200008ec 	.word	0x200008ec
 8000cc4:	200000a4 	.word	0x200000a4
 8000cc8:	200000a8 	.word	0x200000a8
 8000ccc:	200000ac 	.word	0x200000ac
 8000cd0:	200000c4 	.word	0x200000c4
 8000cd4:	200000c0 	.word	0x200000c0
 8000cd8:	200000d0 	.word	0x200000d0
 8000cdc:	200000cc 	.word	0x200000cc
 8000ce0:	200000c8 	.word	0x200000c8
 8000ce4:	200000d4 	.word	0x200000d4
 8000ce8:	200000d8 	.word	0x200000d8

08000cec <snake_enqueue>:

void snake_enqueue(int x, int y, char scene[1920]){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
	if ((80*y + x) >= 1760) { x = 0; y = 0;}
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000d0c:	db04      	blt.n	8000d18 <snake_enqueue+0x2c>
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	e00d      	b.n	8000d34 <snake_enqueue+0x48>
	else if ((80*y + x) < 0) { x = 0; y = 0;}
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da03      	bge.n	8000d34 <snake_enqueue+0x48>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
	enqueue(snake_x, x);
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <snake_enqueue+0xa4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe99 	bl	8000a72 <enqueue>
	enqueue(snake_y, y);
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <snake_enqueue+0xa8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe93 	bl	8000a72 <enqueue>
	snake_head_x = rear(snake_x);
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <snake_enqueue+0xa4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fefe 	bl	8000b52 <rear>
 8000d56:	4602      	mov	r2, r0
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <snake_enqueue+0xac>)
 8000d5a:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <snake_enqueue+0xa8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fef6 	bl	8000b52 <rear>
 8000d66:	4602      	mov	r2, r0
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <snake_enqueue+0xb0>)
 8000d6a:	601a      	str	r2, [r3, #0]
	scene[80 * y + x] = '@';
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	2240      	movs	r2, #64	; 0x40
 8000d84:	701a      	strb	r2, [r3, #0]
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000900 	.word	0x20000900
 8000d94:	200008fc 	.word	0x200008fc
 8000d98:	200000b0 	.word	0x200000b0
 8000d9c:	200000b4 	.word	0x200000b4

08000da0 <snake_dequeue>:

void snake_dequeue(char scene[1920]){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	int x = front(snake_x); dequeue(snake_x);
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <snake_dequeue+0x78>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff feb8 	bl	8000b22 <front>
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <snake_dequeue+0x78>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fe85 	bl	8000ac8 <dequeue>
	int y = front(snake_y); dequeue(snake_y);
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <snake_dequeue+0x7c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fead 	bl	8000b22 <front>
 8000dc8:	60b8      	str	r0, [r7, #8]
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <snake_dequeue+0x7c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe7a 	bl	8000ac8 <dequeue>
	snake_tail_x = front(snake_x);
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <snake_dequeue+0x78>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fea2 	bl	8000b22 <front>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <snake_dequeue+0x80>)
 8000de2:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <snake_dequeue+0x7c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe9a 	bl	8000b22 <front>
 8000dee:	4602      	mov	r2, r0
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <snake_dequeue+0x84>)
 8000df2:	601a      	str	r2, [r3, #0]
	scene[80*y + x] = ' ';
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	701a      	strb	r2, [r3, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000900 	.word	0x20000900
 8000e1c:	200008fc 	.word	0x200008fc
 8000e20:	200000b8 	.word	0x200000b8
 8000e24:	200000bc 	.word	0x200000bc

08000e28 <scene_setScore>:

void scene_setScore(char scene[1920]){
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	scene[80*22 + 0] = 'S';
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8000e36:	2253      	movs	r2, #83	; 0x53
 8000e38:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 1] = 'c';
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f203 63e1 	addw	r3, r3, #1761	; 0x6e1
 8000e40:	2263      	movs	r2, #99	; 0x63
 8000e42:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 2] = 'o';
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f203 63e2 	addw	r3, r3, #1762	; 0x6e2
 8000e4a:	226f      	movs	r2, #111	; 0x6f
 8000e4c:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 3] = 'r';
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f203 63e3 	addw	r3, r3, #1763	; 0x6e3
 8000e54:	2272      	movs	r2, #114	; 0x72
 8000e56:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 4] = 'e';
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8000e5e:	2265      	movs	r2, #101	; 0x65
 8000e60:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 6] = ':';
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f203 63e6 	addw	r3, r3, #1766	; 0x6e6
 8000e68:	223a      	movs	r2, #58	; 0x3a
 8000e6a:	701a      	strb	r2, [r3, #0]
	int i1 = score%10;
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <scene_setScore+0xf4>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <scene_setScore+0xf8>)
 8000e72:	fb83 1302 	smull	r1, r3, r3, r2
 8000e76:	1099      	asrs	r1, r3, #2
 8000e78:	17d3      	asrs	r3, r2, #31
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	440b      	add	r3, r1
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
	int i2 = (score%100) / 10;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <scene_setScore+0xf4>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <scene_setScore+0xfc>)
 8000e8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e92:	1159      	asrs	r1, r3, #5
 8000e94:	17d3      	asrs	r3, r2, #31
 8000e96:	1acb      	subs	r3, r1, r3
 8000e98:	2164      	movs	r1, #100	; 0x64
 8000e9a:	fb01 f303 	mul.w	r3, r1, r3
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <scene_setScore+0xf8>)
 8000ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea6:	1092      	asrs	r2, r2, #2
 8000ea8:	17db      	asrs	r3, r3, #31
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	613b      	str	r3, [r7, #16]
	int i3 = (score%1000) / 100;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <scene_setScore+0xf4>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <scene_setScore+0x100>)
 8000eb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb8:	1199      	asrs	r1, r3, #6
 8000eba:	17d3      	asrs	r3, r2, #31
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <scene_setScore+0xfc>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	1152      	asrs	r2, r2, #5
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	60fb      	str	r3, [r7, #12]
	if (score < 0) snake_gameOver(scene);
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <scene_setScore+0xf4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da02      	bge.n	8000ee4 <scene_setScore+0xbc>
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fa40 	bl	8001364 <snake_gameOver>

	scene[80*22 + 10] = intTOchar(i1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f203 64ea 	addw	r4, r3, #1770	; 0x6ea
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f000 fc26 	bl	800173c <intTOchar>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 9] = intTOchar(i2);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f203 64e9 	addw	r4, r3, #1769	; 0x6e9
 8000efa:	6938      	ldr	r0, [r7, #16]
 8000efc:	f000 fc1e 	bl	800173c <intTOchar>
 8000f00:	4603      	mov	r3, r0
 8000f02:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 8] = intTOchar(i3);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f503 64dd 	add.w	r4, r3, #1768	; 0x6e8
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f000 fc16 	bl	800173c <intTOchar>
 8000f10:	4603      	mov	r3, r0
 8000f12:	7023      	strb	r3, [r4, #0]
}
 8000f14:	bf00      	nop
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	200000ac 	.word	0x200000ac
 8000f20:	66666667 	.word	0x66666667
 8000f24:	51eb851f 	.word	0x51eb851f
 8000f28:	10624dd3 	.word	0x10624dd3

08000f2c <snake_setDirection>:

void snake_setDirection(int direction) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    switch(direction) {
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d82b      	bhi.n	8000f94 <snake_setDirection+0x68>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <snake_setDirection+0x18>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f75 	.word	0x08000f75
 8000f48:	08000f65 	.word	0x08000f65
 8000f4c:	08000f85 	.word	0x08000f85
 8000f50:	08000f55 	.word	0x08000f55
    case LEFT :
        if(snake_direction != RIGHT) {
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <snake_setDirection+0x88>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d01d      	beq.n	8000f98 <snake_setDirection+0x6c>
            snake_direction = LEFT;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <snake_setDirection+0x88>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f62:	e019      	b.n	8000f98 <snake_setDirection+0x6c>

    case RIGHT :
        if(snake_direction != LEFT) {
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <snake_setDirection+0x88>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d017      	beq.n	8000f9c <snake_setDirection+0x70>
            snake_direction = RIGHT;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <snake_setDirection+0x88>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f72:	e013      	b.n	8000f9c <snake_setDirection+0x70>

    case UP :
        if(snake_direction != DOWN) {
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <snake_setDirection+0x88>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d011      	beq.n	8000fa0 <snake_setDirection+0x74>
            snake_direction = UP;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <snake_setDirection+0x88>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f82:	e00d      	b.n	8000fa0 <snake_setDirection+0x74>

    case DOWN :
        if(snake_direction != UP) {
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <snake_setDirection+0x88>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d00b      	beq.n	8000fa4 <snake_setDirection+0x78>
            snake_direction = DOWN;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <snake_setDirection+0x88>)
 8000f8e:	2203      	movs	r2, #3
 8000f90:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f92:	e007      	b.n	8000fa4 <snake_setDirection+0x78>
    default :
        break;
 8000f94:	bf00      	nop
 8000f96:	e006      	b.n	8000fa6 <snake_setDirection+0x7a>
        break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <snake_setDirection+0x7a>
        break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <snake_setDirection+0x7a>
        break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <snake_setDirection+0x7a>
        break;
 8000fa4:	bf00      	nop
    }

}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000a0 	.word	0x200000a0

08000fb8 <snake_move>:

void snake_move(char scene[1920]) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

    /* Based on the snake direction, move head one coordinate*/
	int head_x = snake_head_x;
 8000fc0:	4b54      	ldr	r3, [pc, #336]	; (8001114 <snake_move+0x15c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	617b      	str	r3, [r7, #20]
	int head_y = snake_head_y;
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <snake_move+0x160>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
	int foodScore;

    switch(snake_direction) {
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <snake_move+0x164>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	f200 8098 	bhi.w	8001108 <snake_move+0x150>
 8000fd8:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <snake_move+0x28>)
 8000fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fde:	bf00      	nop
 8000fe0:	08000ff1 	.word	0x08000ff1
 8000fe4:	080010c3 	.word	0x080010c3
 8000fe8:	08001037 	.word	0x08001037
 8000fec:	0800107d 	.word	0x0800107d
    case UP :
    	foodScore = snake_foodScore(head_x, head_y - 1, scene);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6978      	ldr	r0, [r7, #20]
 8000ffa:	f000 f891 	bl	8001120 <snake_foodScore>
 8000ffe:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y - 1, scene);
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	3b01      	subs	r3, #1
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4619      	mov	r1, r3
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	f7ff fe6f 	bl	8000cec <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <snake_move+0x64>
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fec3 	bl	8000da0 <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 800101a:	e076      	b.n	800110a <snake_move+0x152>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001022:	d103      	bne.n	800102c <snake_move+0x74>
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f99d 	bl	8001364 <snake_gameOver>
        break;
 800102a:	e06e      	b.n	800110a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f8b6 	bl	80011a0 <snake_feed>
        break;
 8001034:	e069      	b.n	800110a <snake_move+0x152>
    case DOWN :
    	foodScore = snake_foodScore(head_x, head_y + 1, scene);
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	3301      	adds	r3, #1
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4619      	mov	r1, r3
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f000 f86e 	bl	8001120 <snake_foodScore>
 8001044:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y+1, scene);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	3301      	adds	r3, #1
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4619      	mov	r1, r3
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff fe4c 	bl	8000cec <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d103      	bne.n	8001062 <snake_move+0xaa>
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fea0 	bl	8000da0 <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8001060:	e053      	b.n	800110a <snake_move+0x152>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001068:	d103      	bne.n	8001072 <snake_move+0xba>
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f97a 	bl	8001364 <snake_gameOver>
        break;
 8001070:	e04b      	b.n	800110a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f000 f893 	bl	80011a0 <snake_feed>
        break;
 800107a:	e046      	b.n	800110a <snake_move+0x152>
    case LEFT :
    	foodScore = snake_foodScore(head_x - 1, head_y, scene);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3b01      	subs	r3, #1
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f84b 	bl	8001120 <snake_foodScore>
 800108a:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x-1, head_y, scene);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3b01      	subs	r3, #1
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6939      	ldr	r1, [r7, #16]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe29 	bl	8000cec <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <snake_move+0xf0>
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe7d 	bl	8000da0 <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 80010a6:	e030      	b.n	800110a <snake_move+0x152>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80010ae:	d103      	bne.n	80010b8 <snake_move+0x100>
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f957 	bl	8001364 <snake_gameOver>
        break;
 80010b6:	e028      	b.n	800110a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f870 	bl	80011a0 <snake_feed>
        break;
 80010c0:	e023      	b.n	800110a <snake_move+0x152>
    case RIGHT :
    	foodScore = snake_foodScore(head_x + 1, head_y, scene);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6939      	ldr	r1, [r7, #16]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f828 	bl	8001120 <snake_foodScore>
 80010d0:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x+1, head_y, scene);
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fe06 	bl	8000cec <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d103      	bne.n	80010ee <snake_move+0x136>
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe5a 	bl	8000da0 <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 80010ec:	e00d      	b.n	800110a <snake_move+0x152>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80010f4:	d103      	bne.n	80010fe <snake_move+0x146>
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f934 	bl	8001364 <snake_gameOver>
        break;
 80010fc:	e005      	b.n	800110a <snake_move+0x152>
    	else snake_feed(foodScore, scene);
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f84d 	bl	80011a0 <snake_feed>
        break;
 8001106:	e000      	b.n	800110a <snake_move+0x152>
    default :
        break;
 8001108:	bf00      	nop
    }
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000b0 	.word	0x200000b0
 8001118:	200000b4 	.word	0x200000b4
 800111c:	200000a0 	.word	0x200000a0

08001120 <snake_foodScore>:

int snake_foodScore(int x, int y, char scene[1920]){
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	/* This function checks what the next pixel is ?
	 * if next pixel is food. return score of that food
	 * if next pixel is snake. return -1 -> game over
	 * else return 0 mean next pixel is free space.
	 */
	if ( scene[80 * y + x] == 'O' ) return 1;
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	461a      	mov	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b4f      	cmp	r3, #79	; 0x4f
 8001146:	d101      	bne.n	800114c <snake_foodScore+0x2c>
 8001148:	2301      	movs	r3, #1
 800114a:	e022      	b.n	8001192 <snake_foodScore+0x72>
	else if ( scene[80 * y + x] == '#'  ) return -1;
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b23      	cmp	r3, #35	; 0x23
 8001166:	d102      	bne.n	800116e <snake_foodScore+0x4e>
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	e011      	b.n	8001192 <snake_foodScore+0x72>
	else if ( scene[80 * y + x] == '@' ) return -99;
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b40      	cmp	r3, #64	; 0x40
 8001188:	d102      	bne.n	8001190 <snake_foodScore+0x70>
 800118a:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800118e:	e000      	b.n	8001192 <snake_foodScore+0x72>
	return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <snake_feed>:

void snake_feed(int foodScore, char scene[1920]){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	score += foodScore;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <snake_feed+0x24>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <snake_feed+0x24>)
 80011b4:	6013      	str	r3, [r2, #0]
	scene_setScore(scene);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff fe36 	bl	8000e28 <scene_setScore>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000ac 	.word	0x200000ac

080011c8 <snake_newFood>:

void snake_newFood(char scene[1920]){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if ( isPlay == 1) {
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <snake_newFood+0xc8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d156      	bne.n	8001286 <snake_newFood+0xbe>
		food_time ++;
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <snake_newFood+0xcc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3301      	adds	r3, #1
 80011de:	4a2d      	ldr	r2, [pc, #180]	; (8001294 <snake_newFood+0xcc>)
 80011e0:	6013      	str	r3, [r2, #0]
		int x = rand() % 80;
 80011e2:	f002 ffa3 	bl	800412c <rand>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b2b      	ldr	r3, [pc, #172]	; (8001298 <snake_newFood+0xd0>)
 80011ea:	fb83 1302 	smull	r1, r3, r3, r2
 80011ee:	1159      	asrs	r1, r3, #5
 80011f0:	17d3      	asrs	r3, r2, #31
 80011f2:	1ac9      	subs	r1, r1, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	60fb      	str	r3, [r7, #12]
		int y = rand() % 24;
 8001200:	f002 ff94 	bl	800412c <rand>
 8001204:	4602      	mov	r2, r0
 8001206:	4b25      	ldr	r3, [pc, #148]	; (800129c <snake_newFood+0xd4>)
 8001208:	fb83 1302 	smull	r1, r3, r3, r2
 800120c:	1099      	asrs	r1, r3, #2
 800120e:	17d3      	asrs	r3, r2, #31
 8001210:	1ac9      	subs	r1, r1, r3
 8001212:	460b      	mov	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	440b      	add	r3, r1
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	60bb      	str	r3, [r7, #8]
		if ( (scene[80 * y + x] == ' ' || scene[80 * y + x] == '#') && food_time % food_constant == 0) scene[80 * y + x] = 'O';
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b20      	cmp	r3, #32
 8001238:	d00d      	beq.n	8001256 <snake_newFood+0x8e>
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	461a      	mov	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b23      	cmp	r3, #35	; 0x23
 8001254:	d117      	bne.n	8001286 <snake_newFood+0xbe>
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <snake_newFood+0xcc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <snake_newFood+0xd8>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001262:	fb02 f201 	mul.w	r2, r2, r1
 8001266:	1a9b      	subs	r3, r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10c      	bne.n	8001286 <snake_newFood+0xbe>
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	224f      	movs	r2, #79	; 0x4f
 8001284:	701a      	strb	r2, [r3, #0]
	}
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000d0 	.word	0x200000d0
 8001294:	200000c4 	.word	0x200000c4
 8001298:	66666667 	.word	0x66666667
 800129c:	2aaaaaab 	.word	0x2aaaaaab
 80012a0:	200000c0 	.word	0x200000c0

080012a4 <snake_newObstacle>:

void snake_newObstacle(char scene[1920]){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if ( isPlay == 1) {
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <snake_newObstacle+0xac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d148      	bne.n	8001346 <snake_newObstacle+0xa2>
		obstacle_time ++;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <snake_newObstacle+0xb0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <snake_newObstacle+0xb0>)
 80012bc:	6013      	str	r3, [r2, #0]
		int x = rand() % 80;
 80012be:	f002 ff35 	bl	800412c <rand>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <snake_newObstacle+0xb4>)
 80012c6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ca:	1159      	asrs	r1, r3, #5
 80012cc:	17d3      	asrs	r3, r2, #31
 80012ce:	1ac9      	subs	r1, r1, r3
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	011b      	lsls	r3, r3, #4
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	60fb      	str	r3, [r7, #12]
		int y = rand() % 24;
 80012dc:	f002 ff26 	bl	800412c <rand>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <snake_newObstacle+0xb8>)
 80012e4:	fb83 1302 	smull	r1, r3, r3, r2
 80012e8:	1099      	asrs	r1, r3, #2
 80012ea:	17d3      	asrs	r3, r2, #31
 80012ec:	1ac9      	subs	r1, r1, r3
 80012ee:	460b      	mov	r3, r1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	440b      	add	r3, r1
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	60bb      	str	r3, [r7, #8]
		if ( scene[80 * y + x] == ' ' && obstacle_time % obstacle_constant == 0) scene[80 * y + x] = '#';
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b20      	cmp	r3, #32
 8001314:	d117      	bne.n	8001346 <snake_newObstacle+0xa2>
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <snake_newObstacle+0xb0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a11      	ldr	r2, [pc, #68]	; (8001360 <snake_newObstacle+0xbc>)
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001322:	fb02 f201 	mul.w	r2, r2, r1
 8001326:	1a9b      	subs	r3, r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <snake_newObstacle+0xa2>
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	2223      	movs	r2, #35	; 0x23
 8001344:	701a      	strb	r2, [r3, #0]
	}
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000d0 	.word	0x200000d0
 8001354:	200000cc 	.word	0x200000cc
 8001358:	66666667 	.word	0x66666667
 800135c:	2aaaaaab 	.word	0x2aaaaaab
 8001360:	200000c8 	.word	0x200000c8

08001364 <snake_gameOver>:

void snake_gameOver(char scene[1920]){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af02      	add	r7, sp, #8
 800136a:	6078      	str	r0, [r7, #4]
	while ( !isEmpty( snake_x) )  { snake_dequeue(scene); }
 800136c:	e002      	b.n	8001374 <snake_gameOver+0x10>
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd16 	bl	8000da0 <snake_dequeue>
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <snake_gameOver+0x50>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fb69 	bl	8000a50 <isEmpty>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f4      	beq.n	800136e <snake_gameOver+0xa>
	scene_setPixelX(35, 44, 10, scene, "Game  Over", 10);
 8001384:	230a      	movs	r3, #10
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <snake_gameOver+0x54>)
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	220a      	movs	r2, #10
 8001390:	212c      	movs	r1, #44	; 0x2c
 8001392:	2023      	movs	r0, #35	; 0x23
 8001394:	f000 f8da 	bl	800154c <scene_setPixelX>
	scene_setPixelX(28, 52, 11, scene, "Press 'K' to start again.", 25);
 8001398:	2319      	movs	r3, #25
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <snake_gameOver+0x58>)
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	220b      	movs	r2, #11
 80013a4:	2134      	movs	r1, #52	; 0x34
 80013a6:	201c      	movs	r0, #28
 80013a8:	f000 f8d0 	bl	800154c <scene_setPixelX>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000900 	.word	0x20000900
 80013b8:	080041d0 	.word	0x080041d0
 80013bc:	080041dc 	.word	0x080041dc

080013c0 <snake_levelUp>:

void snake_levelUp(int timeX, char scene[1920]){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	if (level == 1 && timeX % 50 == 0) { obstacle_constant = 50; level++; scene_setLevel(scene); }
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <snake_levelUp+0x13c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d118      	bne.n	8001404 <snake_levelUp+0x44>
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <snake_levelUp+0x140>)
 80013d6:	fb83 1302 	smull	r1, r3, r3, r2
 80013da:	1119      	asrs	r1, r3, #4
 80013dc:	17d3      	asrs	r3, r2, #31
 80013de:	1acb      	subs	r3, r1, r3
 80013e0:	2132      	movs	r1, #50	; 0x32
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10b      	bne.n	8001404 <snake_levelUp+0x44>
 80013ec:	4b45      	ldr	r3, [pc, #276]	; (8001504 <snake_levelUp+0x144>)
 80013ee:	2232      	movs	r2, #50	; 0x32
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <snake_levelUp+0x13c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a40      	ldr	r2, [pc, #256]	; (80014fc <snake_levelUp+0x13c>)
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 f885 	bl	800150c <scene_setLevel>
 8001402:	e076      	b.n	80014f2 <snake_levelUp+0x132>
	else if (level == 2 && timeX % 150 == 0) { obstacle_constant = 40; level++; scene_setLevel(scene); }
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <snake_levelUp+0x13c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d118      	bne.n	800143e <snake_levelUp+0x7e>
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <snake_levelUp+0x148>)
 8001410:	fb83 1302 	smull	r1, r3, r3, r2
 8001414:	1119      	asrs	r1, r3, #4
 8001416:	17d3      	asrs	r3, r2, #31
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	2196      	movs	r1, #150	; 0x96
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10b      	bne.n	800143e <snake_levelUp+0x7e>
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <snake_levelUp+0x144>)
 8001428:	2228      	movs	r2, #40	; 0x28
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <snake_levelUp+0x13c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a32      	ldr	r2, [pc, #200]	; (80014fc <snake_levelUp+0x13c>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f000 f868 	bl	800150c <scene_setLevel>
 800143c:	e059      	b.n	80014f2 <snake_levelUp+0x132>
	else if (level == 3 && timeX % 300 == 0) { obstacle_constant = 30; level++; scene_setLevel(scene); }
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <snake_levelUp+0x13c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d119      	bne.n	800147a <snake_levelUp+0xba>
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <snake_levelUp+0x148>)
 800144a:	fb83 1302 	smull	r1, r3, r3, r2
 800144e:	1159      	asrs	r1, r3, #5
 8001450:	17d3      	asrs	r3, r2, #31
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001458:	fb01 f303 	mul.w	r3, r1, r3
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10b      	bne.n	800147a <snake_levelUp+0xba>
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <snake_levelUp+0x144>)
 8001464:	221e      	movs	r2, #30
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <snake_levelUp+0x13c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a23      	ldr	r2, [pc, #140]	; (80014fc <snake_levelUp+0x13c>)
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f000 f84a 	bl	800150c <scene_setLevel>
 8001478:	e03b      	b.n	80014f2 <snake_levelUp+0x132>
	else if (level == 4 && timeX % 600 == 0) { obstacle_constant = 20; level++; scene_setLevel(scene); }
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <snake_levelUp+0x13c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d119      	bne.n	80014b6 <snake_levelUp+0xf6>
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <snake_levelUp+0x148>)
 8001486:	fb83 1302 	smull	r1, r3, r3, r2
 800148a:	1199      	asrs	r1, r3, #6
 800148c:	17d3      	asrs	r3, r2, #31
 800148e:	1acb      	subs	r3, r1, r3
 8001490:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001494:	fb01 f303 	mul.w	r3, r1, r3
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10b      	bne.n	80014b6 <snake_levelUp+0xf6>
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <snake_levelUp+0x144>)
 80014a0:	2214      	movs	r2, #20
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <snake_levelUp+0x13c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <snake_levelUp+0x13c>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	6838      	ldr	r0, [r7, #0]
 80014b0:	f000 f82c 	bl	800150c <scene_setLevel>
 80014b4:	e01d      	b.n	80014f2 <snake_levelUp+0x132>
	else if (level == 5 && timeX % 1200 == 0) { obstacle_constant = 10; level++; scene_setLevel(scene); }
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <snake_levelUp+0x13c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d119      	bne.n	80014f2 <snake_levelUp+0x132>
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <snake_levelUp+0x148>)
 80014c2:	fb83 1302 	smull	r1, r3, r3, r2
 80014c6:	11d9      	asrs	r1, r3, #7
 80014c8:	17d3      	asrs	r3, r2, #31
 80014ca:	1acb      	subs	r3, r1, r3
 80014cc:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10b      	bne.n	80014f2 <snake_levelUp+0x132>
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <snake_levelUp+0x144>)
 80014dc:	220a      	movs	r2, #10
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <snake_levelUp+0x13c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <snake_levelUp+0x13c>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f000 f80e 	bl	800150c <scene_setLevel>
}
 80014f0:	e7ff      	b.n	80014f2 <snake_levelUp+0x132>
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000d4 	.word	0x200000d4
 8001500:	51eb851f 	.word	0x51eb851f
 8001504:	200000c8 	.word	0x200000c8
 8001508:	1b4e81b5 	.word	0x1b4e81b5

0800150c <scene_setLevel>:

void scene_setLevel(char scene[1920]){
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af02      	add	r7, sp, #8
 8001512:	6078      	str	r0, [r7, #4]
	scene_setPixelX(0, 7, 23, scene, "level : ", 8);
 8001514:	2308      	movs	r3, #8
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <scene_setLevel+0x38>)
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2217      	movs	r2, #23
 8001520:	2107      	movs	r1, #7
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f812 	bl	800154c <scene_setPixelX>
	scene[80 * 23 + 8] = intTOchar(level);
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <scene_setLevel+0x3c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f503 64e7 	add.w	r4, r3, #1848	; 0x738
 8001532:	4610      	mov	r0, r2
 8001534:	f000 f902 	bl	800173c <intTOchar>
 8001538:	4603      	mov	r3, r0
 800153a:	7023      	strb	r3, [r4, #0]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	080041f8 	.word	0x080041f8
 8001548:	200000d4 	.word	0x200000d4

0800154c <scene_setPixelX>:


void scene_setPixelX(int x1, int x2, int y, char scene[1920], char text[], int size){
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
	if (x1 > x2) { scene_setPixelX(x2, x1, y, scene, text, size); }
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	429a      	cmp	r2, r3
 8001560:	dd0a      	ble.n	8001578 <scene_setPixelX+0x2c>
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	68b8      	ldr	r0, [r7, #8]
 8001572:	f7ff ffeb 	bl	800154c <scene_setPixelX>
 8001576:	e024      	b.n	80015c2 <scene_setPixelX+0x76>
	else {
		int indeX = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	e019      	b.n	80015b6 <scene_setPixelX+0x6a>
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	6a3a      	ldr	r2, [r7, #32]
 8001586:	18d1      	adds	r1, r2, r3
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	461a      	mov	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	461a      	mov	r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	780a      	ldrb	r2, [r1, #0]
 80015a0:	701a      	strb	r2, [r3, #0]
		indeX++;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
		if (indeX >= size) return ;
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	429a      	cmp	r2, r3
 80015ae:	da07      	bge.n	80015c0 <scene_setPixelX+0x74>
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dde1      	ble.n	8001582 <scene_setPixelX+0x36>
 80015be:	e000      	b.n	80015c2 <scene_setPixelX+0x76>
		if (indeX >= size) return ;
 80015c0:	bf00      	nop
		}
	}
}
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <scene_setPixelY>:

void scene_setPixelY(int x, int y1, int y2, char scene[1920], char text[], int size){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
	if (y1 > y2) { scene_setPixelX(x, y1, y2, scene, text, size); }
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd0a      	ble.n	80015f4 <scene_setPixelY+0x2c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f7ff ffad 	bl	800154c <scene_setPixelX>
 80015f2:	e024      	b.n	800163e <scene_setPixelY+0x76>
	else {
		int indeX = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
		for (int i=y1; i<=y2; i++) { scene[80 * i + x] = text[indeX];
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	e019      	b.n	8001632 <scene_setPixelY+0x6a>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	18d1      	adds	r1, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	780a      	ldrb	r2, [r1, #0]
 800161c:	701a      	strb	r2, [r3, #0]
		indeX++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
		if (indeX >= size) return ;
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	429a      	cmp	r2, r3
 800162a:	da07      	bge.n	800163c <scene_setPixelY+0x74>
		for (int i=y1; i<=y2; i++) { scene[80 * i + x] = text[indeX];
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	3301      	adds	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	dde1      	ble.n	80015fe <scene_setPixelY+0x36>
 800163a:	e000      	b.n	800163e <scene_setPixelY+0x76>
		if (indeX >= size) return ;
 800163c:	bf00      	nop
		}
	}
}
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <scene_mainmenu>:

void scene_mainmenu(char scene[1920]){
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
	/* For observing the beginning of a pixel */
	scene_setPixelX(0, 4, 0, scene, "START", 5);
 800164c:	2305      	movs	r3, #5
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <scene_mainmenu+0xa4>)
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	2104      	movs	r1, #4
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ff76 	bl	800154c <scene_setPixelX>
	scene_setPixelX(36, 44, 10, scene, "SNAKE  GO", 9);
 8001660:	2309      	movs	r3, #9
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <scene_mainmenu+0xa8>)
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	220a      	movs	r2, #10
 800166c:	212c      	movs	r1, #44	; 0x2c
 800166e:	2024      	movs	r0, #36	; 0x24
 8001670:	f7ff ff6c 	bl	800154c <scene_setPixelX>
	scene_setPixelX(25, 52, 11, scene, "Press 'K' to start the game.", 28);
 8001674:	231c      	movs	r3, #28
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <scene_mainmenu+0xac>)
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	220b      	movs	r2, #11
 8001680:	2134      	movs	r1, #52	; 0x34
 8001682:	2019      	movs	r0, #25
 8001684:	f7ff ff62 	bl	800154c <scene_setPixelX>
	scene_setPixelX(0, 79, 0, scene, "________________________________________________________________________________", 80);
 8001688:	2350      	movs	r3, #80	; 0x50
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <scene_mainmenu+0xb0>)
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	214f      	movs	r1, #79	; 0x4f
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff ff58 	bl	800154c <scene_setPixelX>
	scene_setPixelX(0, 79, 22, scene, "________________________________________________________________________________", 80);
 800169c:	2350      	movs	r3, #80	; 0x50
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <scene_mainmenu+0xb0>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2216      	movs	r2, #22
 80016a8:	214f      	movs	r1, #79	; 0x4f
 80016aa:	2000      	movs	r0, #0
 80016ac:	f7ff ff4e 	bl	800154c <scene_setPixelX>
	scene_setPixelY(0, 1, 22, scene, "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 80);
 80016b0:	2350      	movs	r3, #80	; 0x50
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <scene_mainmenu+0xb4>)
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2216      	movs	r2, #22
 80016bc:	2101      	movs	r1, #1
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff ff82 	bl	80015c8 <scene_setPixelY>
	scene_setPixelY(79, 1, 22, scene, "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 80);
 80016c4:	2350      	movs	r3, #80	; 0x50
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <scene_mainmenu+0xb4>)
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2216      	movs	r2, #22
 80016d0:	2101      	movs	r1, #1
 80016d2:	204f      	movs	r0, #79	; 0x4f
 80016d4:	f7ff ff78 	bl	80015c8 <scene_setPixelY>
	isPlay = 0;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <scene_mainmenu+0xb8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08004204 	.word	0x08004204
 80016ec:	0800420c 	.word	0x0800420c
 80016f0:	08004218 	.word	0x08004218
 80016f4:	08004238 	.word	0x08004238
 80016f8:	0800428c 	.word	0x0800428c
 80016fc:	200000d0 	.word	0x200000d0

08001700 <scene_clear>:

void scene_clear(char scene[1920]){
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	for(int i=0;i<1920; i++) scene[i] = ' ';
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e007      	b.n	800171e <scene_clear+0x1e>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	2220      	movs	r2, #32
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8001724:	dbf3      	blt.n	800170e <scene_clear+0xe>
	isPlay = 0;
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <scene_clear+0x38>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	200000d0 	.word	0x200000d0

0800173c <intTOchar>:

char intTOchar(int integers){
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if (integers == 1) return '1';
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <intTOchar+0x12>
 800174a:	2331      	movs	r3, #49	; 0x31
 800174c:	e028      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 2) return '2';
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d101      	bne.n	8001758 <intTOchar+0x1c>
 8001754:	2332      	movs	r3, #50	; 0x32
 8001756:	e023      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 3) return '3';
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d101      	bne.n	8001762 <intTOchar+0x26>
 800175e:	2333      	movs	r3, #51	; 0x33
 8001760:	e01e      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 4) return '4';
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d101      	bne.n	800176c <intTOchar+0x30>
 8001768:	2334      	movs	r3, #52	; 0x34
 800176a:	e019      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 5) return '5';
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d101      	bne.n	8001776 <intTOchar+0x3a>
 8001772:	2335      	movs	r3, #53	; 0x35
 8001774:	e014      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 6) return '6';
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b06      	cmp	r3, #6
 800177a:	d101      	bne.n	8001780 <intTOchar+0x44>
 800177c:	2336      	movs	r3, #54	; 0x36
 800177e:	e00f      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 7) return '7';
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b07      	cmp	r3, #7
 8001784:	d101      	bne.n	800178a <intTOchar+0x4e>
 8001786:	2337      	movs	r3, #55	; 0x37
 8001788:	e00a      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 8) return '8';
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d101      	bne.n	8001794 <intTOchar+0x58>
 8001790:	2338      	movs	r3, #56	; 0x38
 8001792:	e005      	b.n	80017a0 <intTOchar+0x64>
	else if (integers == 9) return '9';
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b09      	cmp	r3, #9
 8001798:	d101      	bne.n	800179e <intTOchar+0x62>
 800179a:	2339      	movs	r3, #57	; 0x39
 800179c:	e000      	b.n	80017a0 <intTOchar+0x64>
	else return '0';
 800179e:	2330      	movs	r3, #48	; 0x30
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 fa8e 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d115      	bne.n	800183a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_TIM_Base_MspInit+0x48>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	201c      	movs	r0, #28
 8001830:	f000 fa77 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001834:	201c      	movs	r0, #28
 8001836:	f000 fa90 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_UART_MspInit+0x94>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d133      	bne.n	80018d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_UART_MspInit+0x98>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_UART_MspInit+0x98>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_UART_MspInit+0x98>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_UART_MspInit+0x98>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_UART_MspInit+0x98>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_UART_MspInit+0x98>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018a2:	230c      	movs	r3, #12
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b2:	2307      	movs	r3, #7
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4809      	ldr	r0, [pc, #36]	; (80018e4 <HAL_UART_MspInit+0x9c>)
 80018be:	f000 fa89 	bl	8001dd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2026      	movs	r0, #38	; 0x26
 80018c8:	f000 fa2b 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018cc:	2026      	movs	r0, #38	; 0x26
 80018ce:	f000 fa44 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f8d4 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM2_IRQHandler+0x10>)
 800194a:	f001 f8aa 	bl	8002aa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200000ec 	.word	0x200000ec

08001958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <USART2_IRQHandler+0x10>)
 800195e:	f001 fd5f 	bl	8003420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000012c 	.word	0x2000012c

0800196c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <_sbrk+0x50>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x16>
		heap_end = &end;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <_sbrk+0x50>)
 800197e:	4a10      	ldr	r2, [pc, #64]	; (80019c0 <_sbrk+0x54>)
 8001980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <_sbrk+0x50>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <_sbrk+0x50>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	466a      	mov	r2, sp
 8001992:	4293      	cmp	r3, r2
 8001994:	d907      	bls.n	80019a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001996:	f002 fb35 	bl	8004004 <__errno>
 800199a:	4602      	mov	r2, r0
 800199c:	230c      	movs	r3, #12
 800199e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
 80019a4:	e006      	b.n	80019b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <_sbrk+0x50>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a03      	ldr	r2, [pc, #12]	; (80019bc <_sbrk+0x50>)
 80019b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200000dc 	.word	0x200000dc
 80019c0:	20000910 	.word	0x20000910

080019c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <SystemInit+0x28>)
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ce:	4a07      	ldr	r2, [pc, #28]	; (80019ec <SystemInit+0x28>)
 80019d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SystemInit+0x28>)
 80019da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019de:	609a      	str	r2, [r3, #8]
#endif
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019f6:	e003      	b.n	8001a00 <LoopCopyDataInit>

080019f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019fe:	3104      	adds	r1, #4

08001a00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a08:	d3f6      	bcc.n	80019f8 <CopyDataInit>
  ldr  r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a0c:	e002      	b.n	8001a14 <LoopFillZerobss>

08001a0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a10:	f842 3b04 	str.w	r3, [r2], #4

08001a14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a18:	d3f9      	bcc.n	8001a0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff ffd3 	bl	80019c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f002 faf7 	bl	8004010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7fe fd59 	bl	80004d8 <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a2c:	08004308 	.word	0x08004308
  ldr  r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a34:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001a38:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001a3c:	2000090c 	.word	0x2000090c

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f94d 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fe98 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f965 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f92d 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	20000018 	.word	0x20000018
 8001ae4:	20000014 	.word	0x20000014

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	20000904 	.word	0x20000904

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000904 	.word	0x20000904

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_Delay+0x40>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }


  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000018 	.word	0x20000018

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d004      	beq.n	8001dac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e00c      	b.n	8001dc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2205      	movs	r2, #5
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e159      	b.n	80020a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8148 	bne.w	800209e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d00b      	beq.n	8001e2e <HAL_GPIO_Init+0x5a>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e22:	2b11      	cmp	r3, #17
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0xfc>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d123      	bne.n	8001f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	08da      	lsrs	r2, r3, #3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3208      	adds	r2, #8
 8001ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 80a2 	beq.w	800209e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	4b56      	ldr	r3, [pc, #344]	; (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a55      	ldr	r2, [pc, #340]	; (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_GPIO_Init+0x2e4>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f76:	4a51      	ldr	r2, [pc, #324]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <HAL_GPIO_Init+0x2ec>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d019      	beq.n	8001fd6 <HAL_GPIO_Init+0x202>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a47      	ldr	r2, [pc, #284]	; (80020c4 <HAL_GPIO_Init+0x2f0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d013      	beq.n	8001fd2 <HAL_GPIO_Init+0x1fe>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <HAL_GPIO_Init+0x2f4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00d      	beq.n	8001fce <HAL_GPIO_Init+0x1fa>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a45      	ldr	r2, [pc, #276]	; (80020cc <HAL_GPIO_Init+0x2f8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d007      	beq.n	8001fca <HAL_GPIO_Init+0x1f6>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a44      	ldr	r2, [pc, #272]	; (80020d0 <HAL_GPIO_Init+0x2fc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_GPIO_Init+0x1f2>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e008      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e004      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e002      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_GPIO_Init+0x204>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f002 0203 	and.w	r2, r2, #3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	4093      	lsls	r3, r2
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fe8:	4934      	ldr	r1, [pc, #208]	; (80020bc <HAL_GPIO_Init+0x2e8>)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	3302      	adds	r3, #2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201a:	4a2e      	ldr	r2, [pc, #184]	; (80020d4 <HAL_GPIO_Init+0x300>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002020:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_GPIO_Init+0x300>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_GPIO_Init+0x300>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002098:	4a0e      	ldr	r2, [pc, #56]	; (80020d4 <HAL_GPIO_Init+0x300>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2b0f      	cmp	r3, #15
 80020a8:	f67f aea2 	bls.w	8001df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020ac:	bf00      	nop
 80020ae:	3724      	adds	r7, #36	; 0x24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	40020000 	.word	0x40020000
 80020c4:	40020400 	.word	0x40020400
 80020c8:	40020800 	.word	0x40020800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
 80020e4:	4613      	mov	r3, r2
 80020e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e8:	787b      	ldrb	r3, [r7, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ee:	887a      	ldrh	r2, [r7, #2]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f4:	e003      	b.n	80020fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	041a      	lsls	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	401a      	ands	r2, r3
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	429a      	cmp	r2, r3
 8002122:	d104      	bne.n	800212e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002124:	887b      	ldrh	r3, [r7, #2]
 8002126:	041a      	lsls	r2, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800212c:	e002      	b.n	8002134 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e25b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d075      	beq.n	800224a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	4ba3      	ldr	r3, [pc, #652]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b04      	cmp	r3, #4
 8002168:	d00c      	beq.n	8002184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4ba0      	ldr	r3, [pc, #640]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002172:	2b08      	cmp	r3, #8
 8002174:	d112      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002176:	4b9d      	ldr	r3, [pc, #628]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002182:	d10b      	bne.n	800219c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4b99      	ldr	r3, [pc, #612]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d05b      	beq.n	8002248 <HAL_RCC_OscConfig+0x108>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d157      	bne.n	8002248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e236      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d106      	bne.n	80021b4 <HAL_RCC_OscConfig+0x74>
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a90      	ldr	r2, [pc, #576]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x98>
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a8a      	ldr	r2, [pc, #552]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xb0>
 80021d8:	4b84      	ldr	r3, [pc, #528]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a83      	ldr	r2, [pc, #524]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b81      	ldr	r3, [pc, #516]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fc8a 	bl	8001b10 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fc86 	bl	8001b10 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fb      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xc0>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fc76 	bl	8001b10 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fc72 	bl	8001b10 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e7      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b6c      	ldr	r3, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0xe8>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	4b65      	ldr	r3, [pc, #404]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b62      	ldr	r3, [pc, #392]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226e:	4b5f      	ldr	r3, [pc, #380]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b5c      	ldr	r3, [pc, #368]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1bb      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b56      	ldr	r3, [pc, #344]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4952      	ldr	r1, [pc, #328]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_RCC_OscConfig+0x2b0>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff fc2b 	bl	8001b10 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fc27 	bl	8001b10 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19c      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b46      	ldr	r3, [pc, #280]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b43      	ldr	r3, [pc, #268]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4940      	ldr	r1, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <HAL_RCC_OscConfig+0x2b0>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc0a 	bl	8001b10 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fc06 	bl	8001b10 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d030      	beq.n	800238c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x2b4>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff fbea 	bl	8001b10 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fbe6 	bl	8001b10 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15b      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x200>
 800235e:	e015      	b.n	800238c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x2b4>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff fbd3 	bl	8001b10 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff fbcf 	bl	8001b10 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e144      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a0 	beq.w	80024da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d121      	bne.n	800241a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <HAL_RCC_OscConfig+0x2b8>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fb95 	bl	8001b10 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e011      	b.n	800240e <HAL_RCC_OscConfig+0x2ce>
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	42470000 	.word	0x42470000
 80023f4:	42470e80 	.word	0x42470e80
 80023f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fc:	f7ff fb88 	bl	8001b10 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0fd      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4d4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d106      	bne.n	8002430 <HAL_RCC_OscConfig+0x2f0>
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6713      	str	r3, [r2, #112]	; 0x70
 800242e:	e01c      	b.n	800246a <HAL_RCC_OscConfig+0x32a>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d10c      	bne.n	8002452 <HAL_RCC_OscConfig+0x312>
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	4b74      	ldr	r3, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a73      	ldr	r2, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
 8002450:	e00b      	b.n	800246a <HAL_RCC_OscConfig+0x32a>
 8002452:	4b71      	ldr	r3, [pc, #452]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a70      	ldr	r2, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a6d      	ldr	r2, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d015      	beq.n	800249e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7ff fb4d 	bl	8001b10 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fb49 	bl	8001b10 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0bc      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0ee      	beq.n	800247a <HAL_RCC_OscConfig+0x33a>
 800249c:	e014      	b.n	80024c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb37 	bl	8001b10 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7ff fb33 	bl	8001b10 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0a6      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4b52      	ldr	r3, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8092 	beq.w	8002608 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d05c      	beq.n	80025aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d141      	bne.n	800257c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff fb07 	bl	8001b10 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002506:	f7ff fb03 	bl	8001b10 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e078      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f0      	bne.n	8002506 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	3b01      	subs	r3, #1
 800253e:	041b      	lsls	r3, r3, #16
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	4933      	ldr	r1, [pc, #204]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fadc 	bl	8001b10 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff fad8 	bl	8001b10 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04d      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x41c>
 800257a:	e045      	b.n	8002608 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x4dc>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7ff fac5 	bl	8001b10 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258a:	f7ff fac1 	bl	8001b10 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e036      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x44a>
 80025a8:	e02e      	b.n	8002608 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e029      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11c      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d115      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10d      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40007000 	.word	0x40007000
 8002618:	40023800 	.word	0x40023800
 800261c:	42470060 	.word	0x42470060

08002620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cc      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d90c      	bls.n	800265c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b63      	ldr	r3, [pc, #396]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b8      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d020      	beq.n	80026aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a58      	ldr	r2, [pc, #352]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	494d      	ldr	r1, [pc, #308]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d044      	beq.n	8002740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e07f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d003      	beq.n	80026de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e067      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4934      	ldr	r1, [pc, #208]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7ff f9fe 	bl	8001b10 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7ff f9fa 	bl	8001b10 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04f      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d20c      	bcs.n	8002768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4916      	ldr	r1, [pc, #88]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	490e      	ldr	r1, [pc, #56]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a6:	f000 f821 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	fa21 f303 	lsr.w	r3, r1, r3
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f95e 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00
 80027dc:	40023800 	.word	0x40023800
 80027e0:	080042e0 	.word	0x080042e0
 80027e4:	20000010 	.word	0x20000010
 80027e8:	20000014 	.word	0x20000014

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4b63      	ldr	r3, [pc, #396]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d007      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x32>
 800280e:	2b08      	cmp	r3, #8
 8002810:	d008      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x38>
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80b4 	bne.w	8002980 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800281a:	60bb      	str	r3, [r7, #8]
       break;
 800281c:	e0b3      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281e:	4b5e      	ldr	r3, [pc, #376]	; (8002998 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002820:	60bb      	str	r3, [r7, #8]
      break;
 8002822:	e0b0      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282e:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04a      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283a:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	f04f 0400 	mov.w	r4, #0
 8002844:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	ea03 0501 	and.w	r5, r3, r1
 8002850:	ea04 0602 	and.w	r6, r4, r2
 8002854:	4629      	mov	r1, r5
 8002856:	4632      	mov	r2, r6
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f04f 0400 	mov.w	r4, #0
 8002860:	0154      	lsls	r4, r2, #5
 8002862:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	4619      	mov	r1, r3
 800286a:	4622      	mov	r2, r4
 800286c:	1b49      	subs	r1, r1, r5
 800286e:	eb62 0206 	sbc.w	r2, r2, r6
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	f04f 0400 	mov.w	r4, #0
 800287a:	0194      	lsls	r4, r2, #6
 800287c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002880:	018b      	lsls	r3, r1, #6
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	eb64 0402 	sbc.w	r4, r4, r2
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	00e2      	lsls	r2, r4, #3
 8002892:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002896:	00d9      	lsls	r1, r3, #3
 8002898:	460b      	mov	r3, r1
 800289a:	4614      	mov	r4, r2
 800289c:	195b      	adds	r3, r3, r5
 800289e:	eb44 0406 	adc.w	r4, r4, r6
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	0262      	lsls	r2, r4, #9
 80028ac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028b0:	0259      	lsls	r1, r3, #9
 80028b2:	460b      	mov	r3, r1
 80028b4:	4614      	mov	r4, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	4621      	mov	r1, r4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f04f 0400 	mov.w	r4, #0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	f7fd fc88 	bl	80001d8 <__aeabi_uldivmod>
 80028c8:	4603      	mov	r3, r0
 80028ca:	460c      	mov	r4, r1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e049      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	f04f 0400 	mov.w	r4, #0
 80028da:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	ea03 0501 	and.w	r5, r3, r1
 80028e6:	ea04 0602 	and.w	r6, r4, r2
 80028ea:	4629      	mov	r1, r5
 80028ec:	4632      	mov	r2, r6
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	0154      	lsls	r4, r2, #5
 80028f8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028fc:	014b      	lsls	r3, r1, #5
 80028fe:	4619      	mov	r1, r3
 8002900:	4622      	mov	r2, r4
 8002902:	1b49      	subs	r1, r1, r5
 8002904:	eb62 0206 	sbc.w	r2, r2, r6
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f04f 0400 	mov.w	r4, #0
 8002910:	0194      	lsls	r4, r2, #6
 8002912:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	1a5b      	subs	r3, r3, r1
 800291a:	eb64 0402 	sbc.w	r4, r4, r2
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	00e2      	lsls	r2, r4, #3
 8002928:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800292c:	00d9      	lsls	r1, r3, #3
 800292e:	460b      	mov	r3, r1
 8002930:	4614      	mov	r4, r2
 8002932:	195b      	adds	r3, r3, r5
 8002934:	eb44 0406 	adc.w	r4, r4, r6
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	02a2      	lsls	r2, r4, #10
 8002942:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002946:	0299      	lsls	r1, r3, #10
 8002948:	460b      	mov	r3, r1
 800294a:	4614      	mov	r4, r2
 800294c:	4618      	mov	r0, r3
 800294e:	4621      	mov	r1, r4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f04f 0400 	mov.w	r4, #0
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	f7fd fc3d 	bl	80001d8 <__aeabi_uldivmod>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	60bb      	str	r3, [r7, #8]
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002982:	60bb      	str	r3, [r7, #8]
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	68bb      	ldr	r3, [r7, #8]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	007a1200 	.word	0x007a1200

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000010 	.word	0x20000010

080029b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b8:	f7ff fff0 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029bc:	4601      	mov	r1, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	080042f0 	.word	0x080042f0

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e0:	f7ff ffdc 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80029e4:	4601      	mov	r1, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0b5b      	lsrs	r3, r3, #13
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	080042f0 	.word	0x080042f0

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fee6 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 fa14 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d007      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d122      	bne.n	8002afe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f06f 0202 	mvn.w	r2, #2
 8002ace:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f9a5 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002aea:	e005      	b.n	8002af8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f997 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9a8 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d122      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d11b      	bne.n	8002b52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0204 	mvn.w	r2, #4
 8002b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f97b 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f96d 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f97e 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d122      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0208 	mvn.w	r2, #8
 8002b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f951 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002b92:	e005      	b.n	8002ba0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f943 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f954 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d122      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d11b      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0210 	mvn.w	r2, #16
 8002bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f927 	bl	8002e34 <HAL_TIM_IC_CaptureCallback>
 8002be6:	e005      	b.n	8002bf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f919 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f92a 	bl	8002e48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0201 	mvn.w	r2, #1
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd fdef 	bl	8000804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d10e      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 faa1 	bl	8003194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d10e      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d107      	bne.n	8002c7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f8ef 	bl	8002e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d10e      	bne.n	8002caa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0220 	mvn.w	r2, #32
 8002ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fa6b 	bl	8003180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_TIM_ConfigClockSource+0x18>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e0a6      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x166>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ce8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d067      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x120>
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d80b      	bhi.n	8002d1e <HAL_TIM_ConfigClockSource+0x6c>
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d073      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x140>
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d802      	bhi.n	8002d14 <HAL_TIM_ConfigClockSource+0x62>
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d06f      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d12:	e078      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d06c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x140>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d06a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002d1c:	e073      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d1e:	2b70      	cmp	r3, #112	; 0x70
 8002d20:	d00d      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0x8c>
 8002d22:	2b70      	cmp	r3, #112	; 0x70
 8002d24:	d804      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x7e>
 8002d26:	2b50      	cmp	r3, #80	; 0x50
 8002d28:	d033      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xe0>
 8002d2a:	2b60      	cmp	r3, #96	; 0x60
 8002d2c:	d041      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002d2e:	e06a      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	d066      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0x152>
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d3a:	d017      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002d3c:	e063      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f000 f989 	bl	8003064 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	609a      	str	r2, [r3, #8]
      break;
 8002d6a:	e04c      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f000 f972 	bl	8003064 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e039      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8e6 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	; 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f93f 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002db0:	e029      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 f905 	bl	8002fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	; 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f92f 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e019      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 f8c6 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f91f 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002df0:	e009      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 f916 	bl	800302e <TIM_ITRx_SetConfig>
      break;
 8002e02:	e000      	b.n	8002e06 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002e04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <TIM_Base_SetConfig+0xe4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00f      	beq.n	8002ea8 <TIM_Base_SetConfig+0x38>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0x38>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <TIM_Base_SetConfig+0xe8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0x38>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <TIM_Base_SetConfig+0xec>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0x38>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <TIM_Base_SetConfig+0xf0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d108      	bne.n	8002eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a25      	ldr	r2, [pc, #148]	; (8002f54 <TIM_Base_SetConfig+0xe4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01b      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d017      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <TIM_Base_SetConfig+0xe8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <TIM_Base_SetConfig+0xec>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <TIM_Base_SetConfig+0xf0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	; (8002f64 <TIM_Base_SetConfig+0xf4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <TIM_Base_SetConfig+0xf8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x8a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <TIM_Base_SetConfig+0xfc>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <TIM_Base_SetConfig+0xe4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	615a      	str	r2, [r3, #20]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40014000 	.word	0x40014000
 8002f68:	40014400 	.word	0x40014400
 8002f6c:	40014800 	.word	0x40014800

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0210 	bic.w	r2, r3, #16
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	031b      	lsls	r3, r3, #12
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	f043 0307 	orr.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	431a      	orrs	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4313      	orrs	r3, r2
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e050      	b.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d018      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d013      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00e      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a16      	ldr	r2, [pc, #88]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a13      	ldr	r2, [pc, #76]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10c      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000

08003180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03f      	b.n	800323a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fe fb3a 	bl	8001848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb8d 	bl	800390c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b088      	sub	sp, #32
 8003246:	af02      	add	r7, sp, #8
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b20      	cmp	r3, #32
 8003260:	f040 8083 	bne.w	800336a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_UART_Transmit+0x2e>
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e07b      	b.n	800336c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_UART_Transmit+0x40>
 800327e:	2302      	movs	r3, #2
 8003280:	e074      	b.n	800336c <HAL_UART_Transmit+0x12a>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	; 0x21
 8003294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003298:	f7fe fc3a 	bl	8001b10 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80032b2:	e042      	b.n	800333a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ca:	d122      	bne.n	8003312 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f9ac 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e042      	b.n	800336c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3302      	adds	r3, #2
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	e017      	b.n	800333a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3301      	adds	r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	e013      	b.n	800333a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2200      	movs	r2, #0
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f989 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e01f      	b.n	800336c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	60ba      	str	r2, [r7, #8]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1b7      	bne.n	80032b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2200      	movs	r2, #0
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f970 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e006      	b.n	800336c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
  }
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	d140      	bne.n	8003410 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HAL_UART_Receive_IT+0x26>
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e039      	b.n	8003412 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_UART_Receive_IT+0x38>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e032      	b.n	8003412 <HAL_UART_Receive_IT+0x9e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2222      	movs	r2, #34	; 0x22
 80033d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0220 	orr.w	r2, r2, #32
 800340a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_UART_IRQHandler+0x52>
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f9cc 	bl	8003808 <UART_Receive_IT>
      return;
 8003470:	e0d1      	b.n	8003616 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80b0 	beq.w	80035da <HAL_UART_IRQHandler+0x1ba>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_UART_IRQHandler+0x70>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a5 	beq.w	80035da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_IRQHandler+0x90>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_UART_IRQHandler+0xb0>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f043 0202 	orr.w	r2, r3, #2
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <HAL_UART_IRQHandler+0xd0>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00f      	beq.n	800351a <HAL_UART_IRQHandler+0xfa>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <HAL_UART_IRQHandler+0xee>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d078      	beq.n	8003614 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_UART_IRQHandler+0x11c>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f966 	bl	8003808 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d102      	bne.n	8003564 <HAL_UART_IRQHandler+0x144>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d031      	beq.n	80035c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8af 	bl	80036c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d123      	bne.n	80035c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003586:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	4a21      	ldr	r2, [pc, #132]	; (800361c <HAL_UART_IRQHandler+0x1fc>)
 8003596:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fbf6 	bl	8001d8e <HAL_DMA_Abort_IT>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d016      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035b2:	4610      	mov	r0, r2
 80035b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	e00e      	b.n	80035d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f831 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035be:	e00a      	b.n	80035d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f82d 	bl	8003620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c6:	e006      	b.n	80035d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f829 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035d4:	e01e      	b.n	8003614 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d6:	bf00      	nop
    return;
 80035d8:	e01c      	b.n	8003614 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1d6>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f89c 	bl	800372c <UART_Transmit_IT>
    return;
 80035f4:	e00f      	b.n	8003616 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_UART_IRQHandler+0x1f6>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8e4 	bl	80037d8 <UART_EndTransmit_IT>
    return;
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003614:	bf00      	nop
  }
}
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	08003705 	.word	0x08003705

08003620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003644:	e02c      	b.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d028      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <UART_WaitOnFlagUntilTimeout+0x30>
 8003654:	f7fe fa5c 	bl	8001b10 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d21d      	bcs.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003672:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e00f      	b.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	4013      	ands	r3, r2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d0c3      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ff7e 	bl	8003620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b21      	cmp	r3, #33	; 0x21
 800373e:	d144      	bne.n	80037ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003748:	d11a      	bne.n	8003780 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800375e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]
 8003772:	e00e      	b.n	8003792 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	621a      	str	r2, [r3, #32]
 800377e:	e008      	b.n	8003792 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	1c59      	adds	r1, r3, #1
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6211      	str	r1, [r2, #32]
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4619      	mov	r1, r3
 80037a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10f      	bne.n	80037c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fd f8dd 	bl	80009b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b22      	cmp	r3, #34	; 0x22
 800381a:	d171      	bne.n	8003900 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d123      	bne.n	800386e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10e      	bne.n	8003852 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b29b      	uxth	r3, r3
 800383c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	1c9a      	adds	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
 8003850:	e029      	b.n	80038a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	b29b      	uxth	r3, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
 800386c:	e01b      	b.n	80038a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10a      	bne.n	800388c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6858      	ldr	r0, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	1c59      	adds	r1, r3, #1
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6291      	str	r1, [r2, #40]	; 0x28
 8003886:	b2c2      	uxtb	r2, r0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	e00c      	b.n	80038a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	1c58      	adds	r0, r3, #1
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	6288      	str	r0, [r1, #40]	; 0x28
 800389e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4619      	mov	r1, r3
 80038b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d120      	bne.n	80038fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0220 	bic.w	r2, r2, #32
 80038c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fc ff9c 	bl	8000830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e002      	b.n	8003902 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800394e:	f023 030c 	bic.w	r3, r3, #12
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	430b      	orrs	r3, r1
 800395a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397a:	f040 818b 	bne.w	8003c94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4ac1      	ldr	r2, [pc, #772]	; (8003c88 <UART_SetConfig+0x37c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d005      	beq.n	8003994 <UART_SetConfig+0x88>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4abf      	ldr	r2, [pc, #764]	; (8003c8c <UART_SetConfig+0x380>)
 800398e:	4293      	cmp	r3, r2
 8003990:	f040 80bd 	bne.w	8003b0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7ff f822 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8003998:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	461d      	mov	r5, r3
 800399e:	f04f 0600 	mov.w	r6, #0
 80039a2:	46a8      	mov	r8, r5
 80039a4:	46b1      	mov	r9, r6
 80039a6:	eb18 0308 	adds.w	r3, r8, r8
 80039aa:	eb49 0409 	adc.w	r4, r9, r9
 80039ae:	4698      	mov	r8, r3
 80039b0:	46a1      	mov	r9, r4
 80039b2:	eb18 0805 	adds.w	r8, r8, r5
 80039b6:	eb49 0906 	adc.w	r9, r9, r6
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039ce:	4688      	mov	r8, r1
 80039d0:	4691      	mov	r9, r2
 80039d2:	eb18 0005 	adds.w	r0, r8, r5
 80039d6:	eb49 0106 	adc.w	r1, r9, r6
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	461d      	mov	r5, r3
 80039e0:	f04f 0600 	mov.w	r6, #0
 80039e4:	196b      	adds	r3, r5, r5
 80039e6:	eb46 0406 	adc.w	r4, r6, r6
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7fc fbf3 	bl	80001d8 <__aeabi_uldivmod>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	461a      	mov	r2, r3
 80039f8:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <UART_SetConfig+0x384>)
 80039fa:	fba3 2302 	umull	r2, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	461d      	mov	r5, r3
 8003a08:	f04f 0600 	mov.w	r6, #0
 8003a0c:	46a9      	mov	r9, r5
 8003a0e:	46b2      	mov	sl, r6
 8003a10:	eb19 0309 	adds.w	r3, r9, r9
 8003a14:	eb4a 040a 	adc.w	r4, sl, sl
 8003a18:	4699      	mov	r9, r3
 8003a1a:	46a2      	mov	sl, r4
 8003a1c:	eb19 0905 	adds.w	r9, r9, r5
 8003a20:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a38:	4689      	mov	r9, r1
 8003a3a:	4692      	mov	sl, r2
 8003a3c:	eb19 0005 	adds.w	r0, r9, r5
 8003a40:	eb4a 0106 	adc.w	r1, sl, r6
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	461d      	mov	r5, r3
 8003a4a:	f04f 0600 	mov.w	r6, #0
 8003a4e:	196b      	adds	r3, r5, r5
 8003a50:	eb46 0406 	adc.w	r4, r6, r6
 8003a54:	461a      	mov	r2, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	f7fc fbbe 	bl	80001d8 <__aeabi_uldivmod>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <UART_SetConfig+0x384>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a86      	ldr	r2, [pc, #536]	; (8003c90 <UART_SetConfig+0x384>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a84:	4498      	add	r8, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	461d      	mov	r5, r3
 8003a8a:	f04f 0600 	mov.w	r6, #0
 8003a8e:	46a9      	mov	r9, r5
 8003a90:	46b2      	mov	sl, r6
 8003a92:	eb19 0309 	adds.w	r3, r9, r9
 8003a96:	eb4a 040a 	adc.w	r4, sl, sl
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	46a2      	mov	sl, r4
 8003a9e:	eb19 0905 	adds.w	r9, r9, r5
 8003aa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aba:	4689      	mov	r9, r1
 8003abc:	4692      	mov	sl, r2
 8003abe:	eb19 0005 	adds.w	r0, r9, r5
 8003ac2:	eb4a 0106 	adc.w	r1, sl, r6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	461d      	mov	r5, r3
 8003acc:	f04f 0600 	mov.w	r6, #0
 8003ad0:	196b      	adds	r3, r5, r5
 8003ad2:	eb46 0406 	adc.w	r4, r6, r6
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4623      	mov	r3, r4
 8003ada:	f7fc fb7d 	bl	80001d8 <__aeabi_uldivmod>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <UART_SetConfig+0x384>)
 8003ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2164      	movs	r1, #100	; 0x64
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <UART_SetConfig+0x384>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 0207 	and.w	r2, r3, #7
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4442      	add	r2, r8
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e26f      	b.n	8003fee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b0e:	f7fe ff51 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8003b12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	461d      	mov	r5, r3
 8003b18:	f04f 0600 	mov.w	r6, #0
 8003b1c:	46a8      	mov	r8, r5
 8003b1e:	46b1      	mov	r9, r6
 8003b20:	eb18 0308 	adds.w	r3, r8, r8
 8003b24:	eb49 0409 	adc.w	r4, r9, r9
 8003b28:	4698      	mov	r8, r3
 8003b2a:	46a1      	mov	r9, r4
 8003b2c:	eb18 0805 	adds.w	r8, r8, r5
 8003b30:	eb49 0906 	adc.w	r9, r9, r6
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b48:	4688      	mov	r8, r1
 8003b4a:	4691      	mov	r9, r2
 8003b4c:	eb18 0005 	adds.w	r0, r8, r5
 8003b50:	eb49 0106 	adc.w	r1, r9, r6
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	461d      	mov	r5, r3
 8003b5a:	f04f 0600 	mov.w	r6, #0
 8003b5e:	196b      	adds	r3, r5, r5
 8003b60:	eb46 0406 	adc.w	r4, r6, r6
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	f7fc fb36 	bl	80001d8 <__aeabi_uldivmod>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <UART_SetConfig+0x384>)
 8003b74:	fba3 2302 	umull	r2, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	461d      	mov	r5, r3
 8003b82:	f04f 0600 	mov.w	r6, #0
 8003b86:	46a9      	mov	r9, r5
 8003b88:	46b2      	mov	sl, r6
 8003b8a:	eb19 0309 	adds.w	r3, r9, r9
 8003b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b92:	4699      	mov	r9, r3
 8003b94:	46a2      	mov	sl, r4
 8003b96:	eb19 0905 	adds.w	r9, r9, r5
 8003b9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bb2:	4689      	mov	r9, r1
 8003bb4:	4692      	mov	sl, r2
 8003bb6:	eb19 0005 	adds.w	r0, r9, r5
 8003bba:	eb4a 0106 	adc.w	r1, sl, r6
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	196b      	adds	r3, r5, r5
 8003bca:	eb46 0406 	adc.w	r4, r6, r6
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fc fb01 	bl	80001d8 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <UART_SetConfig+0x384>)
 8003bde:	fba3 1302 	umull	r1, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2164      	movs	r1, #100	; 0x64
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <UART_SetConfig+0x384>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bfe:	4498      	add	r8, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	461d      	mov	r5, r3
 8003c04:	f04f 0600 	mov.w	r6, #0
 8003c08:	46a9      	mov	r9, r5
 8003c0a:	46b2      	mov	sl, r6
 8003c0c:	eb19 0309 	adds.w	r3, r9, r9
 8003c10:	eb4a 040a 	adc.w	r4, sl, sl
 8003c14:	4699      	mov	r9, r3
 8003c16:	46a2      	mov	sl, r4
 8003c18:	eb19 0905 	adds.w	r9, r9, r5
 8003c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c34:	4689      	mov	r9, r1
 8003c36:	4692      	mov	sl, r2
 8003c38:	eb19 0005 	adds.w	r0, r9, r5
 8003c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	461d      	mov	r5, r3
 8003c46:	f04f 0600 	mov.w	r6, #0
 8003c4a:	196b      	adds	r3, r5, r5
 8003c4c:	eb46 0406 	adc.w	r4, r6, r6
 8003c50:	461a      	mov	r2, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	f7fc fac0 	bl	80001d8 <__aeabi_uldivmod>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <UART_SetConfig+0x384>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <UART_SetConfig+0x384>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 0207 	and.w	r2, r3, #7
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4442      	add	r2, r8
 8003c84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c86:	e1b2      	b.n	8003fee <UART_SetConfig+0x6e2>
 8003c88:	40011000 	.word	0x40011000
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4ad7      	ldr	r2, [pc, #860]	; (8003ff8 <UART_SetConfig+0x6ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d005      	beq.n	8003caa <UART_SetConfig+0x39e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4ad6      	ldr	r2, [pc, #856]	; (8003ffc <UART_SetConfig+0x6f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 80d1 	bne.w	8003e4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003caa:	f7fe fe97 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
 8003cae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	469a      	mov	sl, r3
 8003cb4:	f04f 0b00 	mov.w	fp, #0
 8003cb8:	46d0      	mov	r8, sl
 8003cba:	46d9      	mov	r9, fp
 8003cbc:	eb18 0308 	adds.w	r3, r8, r8
 8003cc0:	eb49 0409 	adc.w	r4, r9, r9
 8003cc4:	4698      	mov	r8, r3
 8003cc6:	46a1      	mov	r9, r4
 8003cc8:	eb18 080a 	adds.w	r8, r8, sl
 8003ccc:	eb49 090b 	adc.w	r9, r9, fp
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ce4:	4688      	mov	r8, r1
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	eb1a 0508 	adds.w	r5, sl, r8
 8003cec:	eb4b 0609 	adc.w	r6, fp, r9
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	f04f 0400 	mov.w	r4, #0
 8003d02:	0094      	lsls	r4, r2, #2
 8003d04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d08:	008b      	lsls	r3, r1, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	4631      	mov	r1, r6
 8003d12:	f7fc fa61 	bl	80001d8 <__aeabi_uldivmod>
 8003d16:	4603      	mov	r3, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4bb8      	ldr	r3, [pc, #736]	; (8004000 <UART_SetConfig+0x6f4>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	469b      	mov	fp, r3
 8003d2c:	f04f 0c00 	mov.w	ip, #0
 8003d30:	46d9      	mov	r9, fp
 8003d32:	46e2      	mov	sl, ip
 8003d34:	eb19 0309 	adds.w	r3, r9, r9
 8003d38:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	46a2      	mov	sl, r4
 8003d40:	eb19 090b 	adds.w	r9, r9, fp
 8003d44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	4692      	mov	sl, r2
 8003d60:	eb1b 0509 	adds.w	r5, fp, r9
 8003d64:	eb4c 060a 	adc.w	r6, ip, sl
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	0094      	lsls	r4, r2, #2
 8003d7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	4623      	mov	r3, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	4631      	mov	r1, r6
 8003d8a:	f7fc fa25 	bl	80001d8 <__aeabi_uldivmod>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <UART_SetConfig+0x6f4>)
 8003d96:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	; 0x32
 8003da8:	4a95      	ldr	r2, [pc, #596]	; (8004000 <UART_SetConfig+0x6f4>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db4:	4498      	add	r8, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	469b      	mov	fp, r3
 8003dba:	f04f 0c00 	mov.w	ip, #0
 8003dbe:	46d9      	mov	r9, fp
 8003dc0:	46e2      	mov	sl, ip
 8003dc2:	eb19 0309 	adds.w	r3, r9, r9
 8003dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dca:	4699      	mov	r9, r3
 8003dcc:	46a2      	mov	sl, r4
 8003dce:	eb19 090b 	adds.w	r9, r9, fp
 8003dd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dea:	4689      	mov	r9, r1
 8003dec:	4692      	mov	sl, r2
 8003dee:	eb1b 0509 	adds.w	r5, fp, r9
 8003df2:	eb4c 060a 	adc.w	r6, ip, sl
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	0094      	lsls	r4, r2, #2
 8003e0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e0e:	008b      	lsls	r3, r1, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	4631      	mov	r1, r6
 8003e18:	f7fc f9de 	bl	80001d8 <__aeabi_uldivmod>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b77      	ldr	r3, [pc, #476]	; (8004000 <UART_SetConfig+0x6f4>)
 8003e24:	fba3 1302 	umull	r1, r3, r3, r2
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	2164      	movs	r1, #100	; 0x64
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	3332      	adds	r3, #50	; 0x32
 8003e36:	4a72      	ldr	r2, [pc, #456]	; (8004000 <UART_SetConfig+0x6f4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4442      	add	r2, r8
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	e0d0      	b.n	8003fee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fdb2 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8003e50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	469a      	mov	sl, r3
 8003e56:	f04f 0b00 	mov.w	fp, #0
 8003e5a:	46d0      	mov	r8, sl
 8003e5c:	46d9      	mov	r9, fp
 8003e5e:	eb18 0308 	adds.w	r3, r8, r8
 8003e62:	eb49 0409 	adc.w	r4, r9, r9
 8003e66:	4698      	mov	r8, r3
 8003e68:	46a1      	mov	r9, r4
 8003e6a:	eb18 080a 	adds.w	r8, r8, sl
 8003e6e:	eb49 090b 	adc.w	r9, r9, fp
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e86:	4688      	mov	r8, r1
 8003e88:	4691      	mov	r9, r2
 8003e8a:	eb1a 0508 	adds.w	r5, sl, r8
 8003e8e:	eb4b 0609 	adc.w	r6, fp, r9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4619      	mov	r1, r3
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	f04f 0400 	mov.w	r4, #0
 8003ea4:	0094      	lsls	r4, r2, #2
 8003ea6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	f7fc f990 	bl	80001d8 <__aeabi_uldivmod>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b50      	ldr	r3, [pc, #320]	; (8004000 <UART_SetConfig+0x6f4>)
 8003ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	469b      	mov	fp, r3
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	46d9      	mov	r9, fp
 8003ed4:	46e2      	mov	sl, ip
 8003ed6:	eb19 0309 	adds.w	r3, r9, r9
 8003eda:	eb4a 040a 	adc.w	r4, sl, sl
 8003ede:	4699      	mov	r9, r3
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	eb19 090b 	adds.w	r9, r9, fp
 8003ee6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efe:	4689      	mov	r9, r1
 8003f00:	4692      	mov	sl, r2
 8003f02:	eb1b 0509 	adds.w	r5, fp, r9
 8003f06:	eb4c 060a 	adc.w	r6, ip, sl
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f04f 0400 	mov.w	r4, #0
 8003f1c:	0094      	lsls	r4, r2, #2
 8003f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f22:	008b      	lsls	r3, r1, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	f7fc f954 	bl	80001d8 <__aeabi_uldivmod>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <UART_SetConfig+0x6f4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <UART_SetConfig+0x6f4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f56:	4498      	add	r8, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	469b      	mov	fp, r3
 8003f5c:	f04f 0c00 	mov.w	ip, #0
 8003f60:	46d9      	mov	r9, fp
 8003f62:	46e2      	mov	sl, ip
 8003f64:	eb19 0309 	adds.w	r3, r9, r9
 8003f68:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	eb19 090b 	adds.w	r9, r9, fp
 8003f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	4692      	mov	sl, r2
 8003f90:	eb1b 0509 	adds.w	r5, fp, r9
 8003f94:	eb4c 060a 	adc.w	r6, ip, sl
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	0094      	lsls	r4, r2, #2
 8003fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fb0:	008b      	lsls	r3, r1, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	4631      	mov	r1, r6
 8003fba:	f7fc f90d 	bl	80001d8 <__aeabi_uldivmod>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <UART_SetConfig+0x6f4>)
 8003fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2164      	movs	r1, #100	; 0x64
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	3332      	adds	r3, #50	; 0x32
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <UART_SetConfig+0x6f4>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4442      	add	r2, r8
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	e7ff      	b.n	8003fee <UART_SetConfig+0x6e2>
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	40011000 	.word	0x40011000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	51eb851f 	.word	0x51eb851f

08004004 <__errno>:
 8004004:	4b01      	ldr	r3, [pc, #4]	; (800400c <__errno+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000001c 	.word	0x2000001c

08004010 <__libc_init_array>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	4e0d      	ldr	r6, [pc, #52]	; (8004048 <__libc_init_array+0x38>)
 8004014:	4c0d      	ldr	r4, [pc, #52]	; (800404c <__libc_init_array+0x3c>)
 8004016:	1ba4      	subs	r4, r4, r6
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	2500      	movs	r5, #0
 800401c:	42a5      	cmp	r5, r4
 800401e:	d109      	bne.n	8004034 <__libc_init_array+0x24>
 8004020:	4e0b      	ldr	r6, [pc, #44]	; (8004050 <__libc_init_array+0x40>)
 8004022:	4c0c      	ldr	r4, [pc, #48]	; (8004054 <__libc_init_array+0x44>)
 8004024:	f000 f8c8 	bl	80041b8 <_init>
 8004028:	1ba4      	subs	r4, r4, r6
 800402a:	10a4      	asrs	r4, r4, #2
 800402c:	2500      	movs	r5, #0
 800402e:	42a5      	cmp	r5, r4
 8004030:	d105      	bne.n	800403e <__libc_init_array+0x2e>
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004038:	4798      	blx	r3
 800403a:	3501      	adds	r5, #1
 800403c:	e7ee      	b.n	800401c <__libc_init_array+0xc>
 800403e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004042:	4798      	blx	r3
 8004044:	3501      	adds	r5, #1
 8004046:	e7f2      	b.n	800402e <__libc_init_array+0x1e>
 8004048:	08004300 	.word	0x08004300
 800404c:	08004300 	.word	0x08004300
 8004050:	08004300 	.word	0x08004300
 8004054:	08004304 	.word	0x08004304

08004058 <malloc>:
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <malloc+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f000 b80b 	b.w	8004078 <_malloc_r>
 8004062:	bf00      	nop
 8004064:	2000001c 	.word	0x2000001c

08004068 <memset>:
 8004068:	4402      	add	r2, r0
 800406a:	4603      	mov	r3, r0
 800406c:	4293      	cmp	r3, r2
 800406e:	d100      	bne.n	8004072 <memset+0xa>
 8004070:	4770      	bx	lr
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7f9      	b.n	800406c <memset+0x4>

08004078 <_malloc_r>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	1ccd      	adds	r5, r1, #3
 800407c:	f025 0503 	bic.w	r5, r5, #3
 8004080:	3508      	adds	r5, #8
 8004082:	2d0c      	cmp	r5, #12
 8004084:	bf38      	it	cc
 8004086:	250c      	movcc	r5, #12
 8004088:	2d00      	cmp	r5, #0
 800408a:	4606      	mov	r6, r0
 800408c:	db01      	blt.n	8004092 <_malloc_r+0x1a>
 800408e:	42a9      	cmp	r1, r5
 8004090:	d903      	bls.n	800409a <_malloc_r+0x22>
 8004092:	230c      	movs	r3, #12
 8004094:	6033      	str	r3, [r6, #0]
 8004096:	2000      	movs	r0, #0
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	f000 f88b 	bl	80041b4 <__malloc_lock>
 800409e:	4a21      	ldr	r2, [pc, #132]	; (8004124 <_malloc_r+0xac>)
 80040a0:	6814      	ldr	r4, [r2, #0]
 80040a2:	4621      	mov	r1, r4
 80040a4:	b991      	cbnz	r1, 80040cc <_malloc_r+0x54>
 80040a6:	4c20      	ldr	r4, [pc, #128]	; (8004128 <_malloc_r+0xb0>)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	b91b      	cbnz	r3, 80040b4 <_malloc_r+0x3c>
 80040ac:	4630      	mov	r0, r6
 80040ae:	f000 f871 	bl	8004194 <_sbrk_r>
 80040b2:	6020      	str	r0, [r4, #0]
 80040b4:	4629      	mov	r1, r5
 80040b6:	4630      	mov	r0, r6
 80040b8:	f000 f86c 	bl	8004194 <_sbrk_r>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d124      	bne.n	800410a <_malloc_r+0x92>
 80040c0:	230c      	movs	r3, #12
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	4630      	mov	r0, r6
 80040c6:	f000 f876 	bl	80041b6 <__malloc_unlock>
 80040ca:	e7e4      	b.n	8004096 <_malloc_r+0x1e>
 80040cc:	680b      	ldr	r3, [r1, #0]
 80040ce:	1b5b      	subs	r3, r3, r5
 80040d0:	d418      	bmi.n	8004104 <_malloc_r+0x8c>
 80040d2:	2b0b      	cmp	r3, #11
 80040d4:	d90f      	bls.n	80040f6 <_malloc_r+0x7e>
 80040d6:	600b      	str	r3, [r1, #0]
 80040d8:	50cd      	str	r5, [r1, r3]
 80040da:	18cc      	adds	r4, r1, r3
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f86a 	bl	80041b6 <__malloc_unlock>
 80040e2:	f104 000b 	add.w	r0, r4, #11
 80040e6:	1d23      	adds	r3, r4, #4
 80040e8:	f020 0007 	bic.w	r0, r0, #7
 80040ec:	1ac3      	subs	r3, r0, r3
 80040ee:	d0d3      	beq.n	8004098 <_malloc_r+0x20>
 80040f0:	425a      	negs	r2, r3
 80040f2:	50e2      	str	r2, [r4, r3]
 80040f4:	e7d0      	b.n	8004098 <_malloc_r+0x20>
 80040f6:	428c      	cmp	r4, r1
 80040f8:	684b      	ldr	r3, [r1, #4]
 80040fa:	bf16      	itet	ne
 80040fc:	6063      	strne	r3, [r4, #4]
 80040fe:	6013      	streq	r3, [r2, #0]
 8004100:	460c      	movne	r4, r1
 8004102:	e7eb      	b.n	80040dc <_malloc_r+0x64>
 8004104:	460c      	mov	r4, r1
 8004106:	6849      	ldr	r1, [r1, #4]
 8004108:	e7cc      	b.n	80040a4 <_malloc_r+0x2c>
 800410a:	1cc4      	adds	r4, r0, #3
 800410c:	f024 0403 	bic.w	r4, r4, #3
 8004110:	42a0      	cmp	r0, r4
 8004112:	d005      	beq.n	8004120 <_malloc_r+0xa8>
 8004114:	1a21      	subs	r1, r4, r0
 8004116:	4630      	mov	r0, r6
 8004118:	f000 f83c 	bl	8004194 <_sbrk_r>
 800411c:	3001      	adds	r0, #1
 800411e:	d0cf      	beq.n	80040c0 <_malloc_r+0x48>
 8004120:	6025      	str	r5, [r4, #0]
 8004122:	e7db      	b.n	80040dc <_malloc_r+0x64>
 8004124:	200000e0 	.word	0x200000e0
 8004128:	200000e4 	.word	0x200000e4

0800412c <rand>:
 800412c:	b538      	push	{r3, r4, r5, lr}
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <rand+0x50>)
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004134:	b97b      	cbnz	r3, 8004156 <rand+0x2a>
 8004136:	2018      	movs	r0, #24
 8004138:	f7ff ff8e 	bl	8004058 <malloc>
 800413c:	4a10      	ldr	r2, [pc, #64]	; (8004180 <rand+0x54>)
 800413e:	4b11      	ldr	r3, [pc, #68]	; (8004184 <rand+0x58>)
 8004140:	63a0      	str	r0, [r4, #56]	; 0x38
 8004142:	e9c0 2300 	strd	r2, r3, [r0]
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <rand+0x5c>)
 8004148:	6083      	str	r3, [r0, #8]
 800414a:	230b      	movs	r3, #11
 800414c:	8183      	strh	r3, [r0, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	2300      	movs	r3, #0
 8004152:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004156:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <rand+0x60>)
 800415a:	690a      	ldr	r2, [r1, #16]
 800415c:	694b      	ldr	r3, [r1, #20]
 800415e:	4c0c      	ldr	r4, [pc, #48]	; (8004190 <rand+0x64>)
 8004160:	4350      	muls	r0, r2
 8004162:	fb04 0003 	mla	r0, r4, r3, r0
 8004166:	fba2 2304 	umull	r2, r3, r2, r4
 800416a:	4403      	add	r3, r0
 800416c:	1c54      	adds	r4, r2, #1
 800416e:	f143 0500 	adc.w	r5, r3, #0
 8004172:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004176:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	2000001c 	.word	0x2000001c
 8004180:	abcd330e 	.word	0xabcd330e
 8004184:	e66d1234 	.word	0xe66d1234
 8004188:	0005deec 	.word	0x0005deec
 800418c:	5851f42d 	.word	0x5851f42d
 8004190:	4c957f2d 	.word	0x4c957f2d

08004194 <_sbrk_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4c06      	ldr	r4, [pc, #24]	; (80041b0 <_sbrk_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4605      	mov	r5, r0
 800419c:	4608      	mov	r0, r1
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	f7fd fbe4 	bl	800196c <_sbrk>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_sbrk_r+0x1a>
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_sbrk_r+0x1a>
 80041ac:	602b      	str	r3, [r5, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20000908 	.word	0x20000908

080041b4 <__malloc_lock>:
 80041b4:	4770      	bx	lr

080041b6 <__malloc_unlock>:
 80041b6:	4770      	bx	lr

080041b8 <_init>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr

080041c4 <_fini>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr
