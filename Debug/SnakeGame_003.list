
SnakeGame_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f54  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a0  080042a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080042a0  080042a0  000142a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a8  080042a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080042b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000080  08004330  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08004330  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfe2  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f1e  00000000  00000000  0002e092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  00030c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174ff  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c1a  00000000  00000000  00048d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d29c  00000000  00000000  00052941  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfbdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000dfc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040d4 	.word	0x080040d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080040d4 	.word	0x080040d4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f001 fa7c 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f840 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f91c 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f8f0 	bl	80006cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8a2 	bl	8000634 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004f0:	4815      	ldr	r0, [pc, #84]	; (8000548 <main+0x70>)
 80004f2:	f002 fa40 	bl	8002976 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT( &huart2, buffer, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4914      	ldr	r1, [pc, #80]	; (800054c <main+0x74>)
 80004fa:	4815      	ldr	r0, [pc, #84]	; (8000550 <main+0x78>)
 80004fc:	f002 fec8 	bl	8003290 <HAL_UART_Receive_IT>
  scene_clear(scene);
 8000500:	4814      	ldr	r0, [pc, #80]	; (8000554 <main+0x7c>)
 8000502:	f001 f8c7 	bl	8001694 <scene_clear>
  scene_mainmenu(scene);
 8000506:	4813      	ldr	r0, [pc, #76]	; (8000554 <main+0x7c>)
 8000508:	f001 f81e 	bl	8001548 <scene_mainmenu>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if (update == 1){
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <main+0x80>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d1fb      	bne.n	800050c <main+0x34>
			HAL_UART_Transmit( &huart2, clearSceen_code, 13, 100000);
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <main+0x84>)
 8000516:	220d      	movs	r2, #13
 8000518:	4911      	ldr	r1, [pc, #68]	; (8000560 <main+0x88>)
 800051a:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x78>)
 800051c:	f002 fe1f 	bl	800315e <HAL_UART_Transmit>
			snake_move(scene);
 8000520:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x7c>)
 8000522:	f000 fd13 	bl	8000f4c <snake_move>
			snake_newFood(scene);
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x7c>)
 8000528:	f000 fe1e 	bl	8001168 <snake_newFood>
			snake_newObstacle(scene);
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x7c>)
 800052e:	f000 fe8b 	bl	8001248 <snake_newObstacle>
			HAL_UART_Transmit( &huart2, scene, 1920, 100000);
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <main+0x84>)
 8000534:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <main+0x7c>)
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <main+0x78>)
 800053c:	f002 fe0f 	bl	800315e <HAL_UART_Transmit>
			update = 0;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <main+0x80>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	  if (update == 1){
 8000546:	e7e1      	b.n	800050c <main+0x34>
 8000548:	200000e0 	.word	0x200000e0
 800054c:	200000dc 	.word	0x200000dc
 8000550:	20000120 	.word	0x20000120
 8000554:	20000160 	.word	0x20000160
 8000558:	2000009c 	.word	0x2000009c
 800055c:	000186a0 	.word	0x000186a0
 8000560:	20000000 	.word	0x20000000

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fd06 	bl	8003f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xc8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xcc>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005d8:	2340      	movs	r3, #64	; 0x40
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fd37 	bl	800205c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f9e2 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 ff91 	bl	800253c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000620:	f000 f9cc 	bl	80009bc <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_TIM2_Init+0x94>)
 800065a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800065e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000668:	2264      	movs	r2, #100	; 0x64
 800066a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_TIM2_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_TIM2_Init+0x94>)
 800067a:	f002 f951 	bl	8002920 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000684:	f000 f99a 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4619      	mov	r1, r3
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_TIM2_Init+0x94>)
 8000696:	f002 fa9a 	bl	8002bce <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a0:	f000 f98c 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_TIM2_Init+0x94>)
 80006b2:	f002 fc85 	bl	8002fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 f97e 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000e0 	.word	0x200000e0

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f002 fcde 	bl	80030c4 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f955 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000120 	.word	0x20000120
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0xd4>)
 80007ac:	f001 fc3c 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0xd8>)
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_GPIO_Init+0xdc>)
 80007c6:	f001 faad 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ca:	2320      	movs	r3, #32
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xd4>)
 80007e2:	f001 fa9f 	bl	8001d24 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	10210000 	.word	0x10210000
 80007fc:	40020800 	.word	0x40020800

08000800 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	update = 1;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	2000009c 	.word	0x2000009c

08000820 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    /* Get character from UART. Note that does not read two byte characters like arrows. */
    switch(buffer[0]) {
 8000828:	4b5c      	ldr	r3, [pc, #368]	; (800099c <HAL_UART_RxCpltCallback+0x17c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	3b41      	subs	r3, #65	; 0x41
 800082e:	2b36      	cmp	r3, #54	; 0x36
 8000830:	f200 80aa 	bhi.w	8000988 <HAL_UART_RxCpltCallback+0x168>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <HAL_UART_RxCpltCallback+0x1c>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	08000941 	.word	0x08000941
 8000840:	08000989 	.word	0x08000989
 8000844:	08000989 	.word	0x08000989
 8000848:	08000951 	.word	0x08000951
 800084c:	08000989 	.word	0x08000989
 8000850:	0800097f 	.word	0x0800097f
 8000854:	08000989 	.word	0x08000989
 8000858:	08000989 	.word	0x08000989
 800085c:	08000989 	.word	0x08000989
 8000860:	08000989 	.word	0x08000989
 8000864:	08000959 	.word	0x08000959
 8000868:	08000989 	.word	0x08000989
 800086c:	08000989 	.word	0x08000989
 8000870:	08000989 	.word	0x08000989
 8000874:	08000989 	.word	0x08000989
 8000878:	08000989 	.word	0x08000989
 800087c:	08000989 	.word	0x08000989
 8000880:	08000989 	.word	0x08000989
 8000884:	08000931 	.word	0x08000931
 8000888:	08000989 	.word	0x08000989
 800088c:	08000989 	.word	0x08000989
 8000890:	08000989 	.word	0x08000989
 8000894:	08000921 	.word	0x08000921
 8000898:	08000989 	.word	0x08000989
 800089c:	08000989 	.word	0x08000989
 80008a0:	08000989 	.word	0x08000989
 80008a4:	08000989 	.word	0x08000989
 80008a8:	08000989 	.word	0x08000989
 80008ac:	08000989 	.word	0x08000989
 80008b0:	08000989 	.word	0x08000989
 80008b4:	08000989 	.word	0x08000989
 80008b8:	08000989 	.word	0x08000989
 80008bc:	08000939 	.word	0x08000939
 80008c0:	08000989 	.word	0x08000989
 80008c4:	08000989 	.word	0x08000989
 80008c8:	08000949 	.word	0x08000949
 80008cc:	08000989 	.word	0x08000989
 80008d0:	08000975 	.word	0x08000975
 80008d4:	08000989 	.word	0x08000989
 80008d8:	08000989 	.word	0x08000989
 80008dc:	08000989 	.word	0x08000989
 80008e0:	08000989 	.word	0x08000989
 80008e4:	08000967 	.word	0x08000967
 80008e8:	08000989 	.word	0x08000989
 80008ec:	08000989 	.word	0x08000989
 80008f0:	08000989 	.word	0x08000989
 80008f4:	08000989 	.word	0x08000989
 80008f8:	08000989 	.word	0x08000989
 80008fc:	08000989 	.word	0x08000989
 8000900:	08000989 	.word	0x08000989
 8000904:	08000929 	.word	0x08000929
 8000908:	08000989 	.word	0x08000989
 800090c:	08000989 	.word	0x08000989
 8000910:	08000989 	.word	0x08000989
 8000914:	08000919 	.word	0x08000919
    case 'w' :
        snake_setDirection(UP);
 8000918:	2001      	movs	r0, #1
 800091a:	f000 fad1 	bl	8000ec0 <snake_setDirection>
        break;
 800091e:	e034      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'W' :
        snake_setDirection(UP);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 facd 	bl	8000ec0 <snake_setDirection>
        break;
 8000926:	e030      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in DOWN direction if allowed */
    case 's' :
        snake_setDirection(DOWN);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 fac9 	bl	8000ec0 <snake_setDirection>
        break;
 800092e:	e02c      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'S' :
        snake_setDirection(DOWN);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 fac5 	bl	8000ec0 <snake_setDirection>
        break;
 8000936:	e028      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in LEFT direction if allowed */
    case 'a' :
        snake_setDirection(LEFT);
 8000938:	2004      	movs	r0, #4
 800093a:	f000 fac1 	bl	8000ec0 <snake_setDirection>
        break;
 800093e:	e024      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'A' :
        snake_setDirection(LEFT);
 8000940:	2004      	movs	r0, #4
 8000942:	f000 fabd 	bl	8000ec0 <snake_setDirection>
        break;
 8000946:	e020      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
        /* Move snake in RIGHT direction if allowed */
    case 'd' :
        snake_setDirection(RIGHT);
 8000948:	2002      	movs	r0, #2
 800094a:	f000 fab9 	bl	8000ec0 <snake_setDirection>
        break;
 800094e:	e01c      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'D' :
        snake_setDirection(RIGHT);
 8000950:	2002      	movs	r0, #2
 8000952:	f000 fab5 	bl	8000ec0 <snake_setDirection>
        break;
 8000956:	e018      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'K' :
    	scene_clear(scene);
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 800095a:	f000 fe9b 	bl	8001694 <scene_clear>
    	snake_init(scene);
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 8000960:	f000 f908 	bl	8000b74 <snake_init>
    	break;
 8000964:	e011      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'k' :
    	scene_clear(scene);
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 8000968:	f000 fe94 	bl	8001694 <scene_clear>
        snake_init(scene);
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 800096e:	f000 f901 	bl	8000b74 <snake_init>
        break;
 8000972:	e00a      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    /* press 'f' for test only */
    case 'f' :
    	snake_feed(1, scene);
 8000974:	490a      	ldr	r1, [pc, #40]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 8000976:	2001      	movs	r0, #1
 8000978:	f000 fbe2 	bl	8001140 <snake_feed>
    	break ;
 800097c:	e005      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    case 'F' :
        snake_feed(1, scene);
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <HAL_UART_RxCpltCallback+0x180>)
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fbdd 	bl	8001140 <snake_feed>
        break ;
 8000986:	e000      	b.n	800098a <HAL_UART_RxCpltCallback+0x16a>
    default :
        break;
 8000988:	bf00      	nop
    }
    /* Restart the interrupt reception mode */
    HAL_UART_Receive_IT( &huart2, buffer, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	4903      	ldr	r1, [pc, #12]	; (800099c <HAL_UART_RxCpltCallback+0x17c>)
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <HAL_UART_RxCpltCallback+0x184>)
 8000990:	f002 fc7e 	bl	8003290 <HAL_UART_Receive_IT>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000dc 	.word	0x200000dc
 80009a0:	20000160 	.word	0x20000160
 80009a4:	20000120 	.word	0x20000120

080009a8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <createQueue>:
// C program for array implementation of queue
#include "queue.h"

// function to create a queue of given capacity.
// It initializes size of queue as 0
struct Queue* createQueue(unsigned capacity){
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
    struct Queue* queue = (struct Queue*) malloc(sizeof(struct Queue));
 80009d2:	2014      	movs	r0, #20
 80009d4:	f003 face 	bl	8003f74 <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	60fb      	str	r3, [r7, #12]
    queue->capacity = capacity;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	60da      	str	r2, [r3, #12]
    queue->front = queue->size = 0;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	601a      	str	r2, [r3, #0]
    queue->rear = capacity - 1;  // This is important, see the enqueue
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	605a      	str	r2, [r3, #4]
    queue->array = (int*) malloc(queue->capacity * sizeof(int));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fab7 	bl	8003f74 <malloc>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
    return queue;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <isFull>:

// Queue is full when size becomes equal to the capacity
int isFull(struct Queue* queue)
{  return (queue->size == queue->capacity);  }
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	461a      	mov	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <isEmpty>:

// Queue is empty when size is 0
int isEmpty(struct Queue* queue)
{  return (queue->size == 0); }
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	bf0c      	ite	eq
 8000a50:	2301      	moveq	r3, #1
 8000a52:	2300      	movne	r3, #0
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <enqueue>:

// Function to add an item to the queue.
// It changes rear and size
void enqueue(struct Queue* queue, int item)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
    if (isFull(queue))
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ffd3 	bl	8000a18 <isFull>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d11b      	bne.n	8000ab0 <enqueue+0x4e>
        return;
    queue->rear = (queue->rear + 1)%queue->capacity;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a88:	fb03 f301 	mul.w	r3, r3, r1
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	605a      	str	r2, [r3, #4]
    queue->array[queue->rear] = item;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	601a      	str	r2, [r3, #0]
    queue->size = queue->size + 1;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	e000      	b.n	8000ab2 <enqueue+0x50>
        return;
 8000ab0:	bf00      	nop
}
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <dequeue>:

// Function to remove an item from queue.
// It changes front and size
int dequeue(struct Queue* queue)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ffbd 	bl	8000a40 <isEmpty>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <dequeue+0x1a>
        return INT_MIN;
 8000acc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ad0:	e01b      	b.n	8000b0a <dequeue+0x52>
    int item = queue->array[queue->front];
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	691a      	ldr	r2, [r3, #16]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
    queue->front = (queue->front + 1)%queue->capacity;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	fbb2 f1f3 	udiv	r1, r2, r3
 8000af2:	fb03 f301 	mul.w	r3, r3, r1
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
    queue->size = queue->size - 1;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	609a      	str	r2, [r3, #8]
    return item;
 8000b08:	68fb      	ldr	r3, [r7, #12]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <front>:

// Function to get front of queue
int front(struct Queue* queue)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff90 	bl	8000a40 <isEmpty>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <front+0x1a>
        return INT_MIN;
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b2a:	e006      	b.n	8000b3a <front+0x28>
    return queue->array[queue->front];
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4413      	add	r3, r2
 8000b38:	681b      	ldr	r3, [r3, #0]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <rear>:

// Function to get rear of queue
int rear(struct Queue* queue)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
    if (isEmpty(queue))
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff78 	bl	8000a40 <isEmpty>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <rear+0x1a>
        return INT_MIN;
 8000b56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000b5a:	e006      	b.n	8000b6a <rear+0x28>
    return queue->array[queue->rear];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	691a      	ldr	r2, [r3, #16]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	681b      	ldr	r3, [r3, #0]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <snake_init>:
static int isPlay;
static int level;
static volatile int score; /* Current score of game */


void snake_init(char scene[1920]){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/* Initiate my snake */
	snake_x = createQueue(300); snake_y = createQueue(300);
 8000b7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b80:	f7ff ff23 	bl	80009ca <createQueue>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b2e      	ldr	r3, [pc, #184]	; (8000c40 <snake_init+0xcc>)
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b8e:	f7ff ff1c 	bl	80009ca <createQueue>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <snake_init+0xd0>)
 8000b96:	601a      	str	r2, [r3, #0]
	snake_direction = RIGHT;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <snake_init+0xd4>)
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	601a      	str	r2, [r3, #0]
	for (int x = 0; x < 5; ++x) { snake_enqueue(x, 0, scene); }
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e007      	b.n	8000bb4 <snake_init+0x40>
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f865 	bl	8000c78 <snake_enqueue>
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	ddf4      	ble.n	8000ba4 <snake_init+0x30>
	snake_head_x = rear(snake_x); snake_head_y = rear(snake_y);
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <snake_init+0xcc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffbf 	bl	8000b42 <rear>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <snake_init+0xd8>)
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <snake_init+0xd0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ffb7 	bl	8000b42 <rear>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <snake_init+0xdc>)
 8000bd8:	601a      	str	r2, [r3, #0]
	snake_tail_x = front(snake_x); snake_tail_y = front(snake_y);
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <snake_init+0xcc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff97 	bl	8000b12 <front>
 8000be4:	4602      	mov	r2, r0
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <snake_init+0xe0>)
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <snake_init+0xd0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff8f 	bl	8000b12 <front>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <snake_init+0xe4>)
 8000bf8:	601a      	str	r2, [r3, #0]

	/* Initiate game constant */
	scene_setScore(scene);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f8da 	bl	8000db4 <scene_setScore>
	scene_setLevel(scene);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 fc05 	bl	8001410 <scene_setLevel>
	score = 0; food_time = 0; food_constant = 20; isPlay = 1;
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <snake_init+0xe8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <snake_init+0xec>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <snake_init+0xf0>)
 8000c14:	2214      	movs	r2, #20
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <snake_init+0xf4>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
	obstacle_time = 0; obstacle_constant = 100;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <snake_init+0xf8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <snake_init+0xfc>)
 8000c26:	2264      	movs	r2, #100	; 0x64
 8000c28:	601a      	str	r2, [r3, #0]
	level = 1; scene_setLevel(scene);
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <snake_init+0x100>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 fbed 	bl	8001410 <scene_setLevel>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200008e4 	.word	0x200008e4
 8000c44:	200008e0 	.word	0x200008e0
 8000c48:	200000a0 	.word	0x200000a0
 8000c4c:	200000a4 	.word	0x200000a4
 8000c50:	200000a8 	.word	0x200000a8
 8000c54:	200000ac 	.word	0x200000ac
 8000c58:	200000b0 	.word	0x200000b0
 8000c5c:	200000cc 	.word	0x200000cc
 8000c60:	200000b8 	.word	0x200000b8
 8000c64:	200000b4 	.word	0x200000b4
 8000c68:	200000c4 	.word	0x200000c4
 8000c6c:	200000c0 	.word	0x200000c0
 8000c70:	200000bc 	.word	0x200000bc
 8000c74:	200000c8 	.word	0x200000c8

08000c78 <snake_enqueue>:

void snake_enqueue(int x, int y, char scene[1920]){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
	if ((80*y + x) >= 1760) { x = 0; y = 0;}
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8000c98:	db04      	blt.n	8000ca4 <snake_enqueue+0x2c>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	e00d      	b.n	8000cc0 <snake_enqueue+0x48>
	else if ((80*y + x) < 0) { x = 0; y = 0;}
 8000ca4:	68ba      	ldr	r2, [r7, #8]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da03      	bge.n	8000cc0 <snake_enqueue+0x48>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
	enqueue(snake_x, x);
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <snake_enqueue+0xa4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68f9      	ldr	r1, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fecb 	bl	8000a62 <enqueue>
	enqueue(snake_y, y);
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <snake_enqueue+0xa8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fec5 	bl	8000a62 <enqueue>
	snake_head_x = rear(snake_x);
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <snake_enqueue+0xa4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff30 	bl	8000b42 <rear>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <snake_enqueue+0xac>)
 8000ce6:	601a      	str	r2, [r3, #0]
	snake_head_y = rear(snake_y);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <snake_enqueue+0xa8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff28 	bl	8000b42 <rear>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <snake_enqueue+0xb0>)
 8000cf6:	601a      	str	r2, [r3, #0]
	scene[80 * y + x] = '@';
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2240      	movs	r2, #64	; 0x40
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200008e4 	.word	0x200008e4
 8000d20:	200008e0 	.word	0x200008e0
 8000d24:	200000a4 	.word	0x200000a4
 8000d28:	200000a8 	.word	0x200000a8

08000d2c <snake_dequeue>:

void snake_dequeue(char scene[1920]){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	int x = front(snake_x); dequeue(snake_x);
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <snake_dequeue+0x78>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff feea 	bl	8000b12 <front>
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <snake_dequeue+0x78>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff feb7 	bl	8000ab8 <dequeue>
	int y = front(snake_y); dequeue(snake_y);
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <snake_dequeue+0x7c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fedf 	bl	8000b12 <front>
 8000d54:	60b8      	str	r0, [r7, #8]
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <snake_dequeue+0x7c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff feac 	bl	8000ab8 <dequeue>
	snake_tail_x = front(snake_x);
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <snake_dequeue+0x78>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fed4 	bl	8000b12 <front>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <snake_dequeue+0x80>)
 8000d6e:	601a      	str	r2, [r3, #0]
	snake_tail_y = front(snake_y);
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <snake_dequeue+0x7c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fecc 	bl	8000b12 <front>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <snake_dequeue+0x84>)
 8000d7e:	601a      	str	r2, [r3, #0]
	scene[80*y + x] = ' ';
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	2220      	movs	r2, #32
 8000d98:	701a      	strb	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200008e4 	.word	0x200008e4
 8000da8:	200008e0 	.word	0x200008e0
 8000dac:	200000ac 	.word	0x200000ac
 8000db0:	200000b0 	.word	0x200000b0

08000db4 <scene_setScore>:

void scene_setScore(char scene[1920]){
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	scene[80*22 + 0] = 'S';
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 8000dc2:	2253      	movs	r2, #83	; 0x53
 8000dc4:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 1] = 'c';
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f203 63e1 	addw	r3, r3, #1761	; 0x6e1
 8000dcc:	2263      	movs	r2, #99	; 0x63
 8000dce:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 2] = 'o';
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f203 63e2 	addw	r3, r3, #1762	; 0x6e2
 8000dd6:	226f      	movs	r2, #111	; 0x6f
 8000dd8:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 3] = 'r';
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f203 63e3 	addw	r3, r3, #1763	; 0x6e3
 8000de0:	2272      	movs	r2, #114	; 0x72
 8000de2:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 4] = 'e';
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f203 63e4 	addw	r3, r3, #1764	; 0x6e4
 8000dea:	2265      	movs	r2, #101	; 0x65
 8000dec:	701a      	strb	r2, [r3, #0]
	scene[80*22 + 6] = ':';
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f203 63e6 	addw	r3, r3, #1766	; 0x6e6
 8000df4:	223a      	movs	r2, #58	; 0x3a
 8000df6:	701a      	strb	r2, [r3, #0]
	int i1 = score%10;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <scene_setScore+0xfc>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <scene_setScore+0x100>)
 8000dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000e02:	1099      	asrs	r1, r3, #2
 8000e04:	17d3      	asrs	r3, r2, #31
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	460b      	mov	r3, r1
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	617b      	str	r3, [r7, #20]
	int i2 = (score%100) / 10;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <scene_setScore+0xfc>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <scene_setScore+0x104>)
 8000e1a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e1e:	1159      	asrs	r1, r3, #5
 8000e20:	17d3      	asrs	r3, r2, #31
 8000e22:	1acb      	subs	r3, r1, r3
 8000e24:	2164      	movs	r1, #100	; 0x64
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4a21      	ldr	r2, [pc, #132]	; (8000eb4 <scene_setScore+0x100>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1092      	asrs	r2, r2, #2
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	613b      	str	r3, [r7, #16]
	int i3 = (score%1000) / 100;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <scene_setScore+0xfc>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <scene_setScore+0x108>)
 8000e40:	fb83 1302 	smull	r1, r3, r3, r2
 8000e44:	1199      	asrs	r1, r3, #6
 8000e46:	17d3      	asrs	r3, r2, #31
 8000e48:	1acb      	subs	r3, r1, r3
 8000e4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <scene_setScore+0x104>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1152      	asrs	r2, r2, #5
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	60fb      	str	r3, [r7, #12]
	if (score < 0) snake_gameOver(scene);
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <scene_setScore+0xfc>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da02      	bge.n	8000e70 <scene_setScore+0xbc>
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fa4e 	bl	800130c <snake_gameOver>
	snake_levelUp(scene);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 fa79 	bl	8001368 <snake_levelUp>

	scene[80*22 + 10] = intTOchar(i1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f203 64ea 	addw	r4, r3, #1770	; 0x6ea
 8000e7c:	6978      	ldr	r0, [r7, #20]
 8000e7e:	f000 fc27 	bl	80016d0 <intTOchar>
 8000e82:	4603      	mov	r3, r0
 8000e84:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 9] = intTOchar(i2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f203 64e9 	addw	r4, r3, #1769	; 0x6e9
 8000e8c:	6938      	ldr	r0, [r7, #16]
 8000e8e:	f000 fc1f 	bl	80016d0 <intTOchar>
 8000e92:	4603      	mov	r3, r0
 8000e94:	7023      	strb	r3, [r4, #0]
	scene[80*22 + 8] = intTOchar(i3);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 64dd 	add.w	r4, r3, #1768	; 0x6e8
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f000 fc17 	bl	80016d0 <intTOchar>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	7023      	strb	r3, [r4, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000cc 	.word	0x200000cc
 8000eb4:	66666667 	.word	0x66666667
 8000eb8:	51eb851f 	.word	0x51eb851f
 8000ebc:	10624dd3 	.word	0x10624dd3

08000ec0 <snake_setDirection>:

void snake_setDirection(int direction) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    switch(direction) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d82b      	bhi.n	8000f28 <snake_setDirection+0x68>
 8000ed0:	a201      	add	r2, pc, #4	; (adr r2, 8000ed8 <snake_setDirection+0x18>)
 8000ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed6:	bf00      	nop
 8000ed8:	08000f09 	.word	0x08000f09
 8000edc:	08000ef9 	.word	0x08000ef9
 8000ee0:	08000f19 	.word	0x08000f19
 8000ee4:	08000ee9 	.word	0x08000ee9
    case LEFT :
        if(snake_direction != RIGHT) {
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <snake_setDirection+0x88>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d01d      	beq.n	8000f2c <snake_setDirection+0x6c>
            snake_direction = LEFT;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <snake_setDirection+0x88>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	601a      	str	r2, [r3, #0]
        }
        break;
 8000ef6:	e019      	b.n	8000f2c <snake_setDirection+0x6c>

    case RIGHT :
        if(snake_direction != LEFT) {
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <snake_setDirection+0x88>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d017      	beq.n	8000f30 <snake_setDirection+0x70>
            snake_direction = RIGHT;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <snake_setDirection+0x88>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f06:	e013      	b.n	8000f30 <snake_setDirection+0x70>

    case UP :
        if(snake_direction != DOWN) {
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <snake_setDirection+0x88>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d011      	beq.n	8000f34 <snake_setDirection+0x74>
            snake_direction = UP;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <snake_setDirection+0x88>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f16:	e00d      	b.n	8000f34 <snake_setDirection+0x74>

    case DOWN :
        if(snake_direction != UP) {
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <snake_setDirection+0x88>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d00b      	beq.n	8000f38 <snake_setDirection+0x78>
            snake_direction = DOWN;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <snake_setDirection+0x88>)
 8000f22:	2203      	movs	r2, #3
 8000f24:	601a      	str	r2, [r3, #0]
        }
        break;
 8000f26:	e007      	b.n	8000f38 <snake_setDirection+0x78>
    default :
        break;
 8000f28:	bf00      	nop
 8000f2a:	e006      	b.n	8000f3a <snake_setDirection+0x7a>
        break;
 8000f2c:	bf00      	nop
 8000f2e:	e004      	b.n	8000f3a <snake_setDirection+0x7a>
        break;
 8000f30:	bf00      	nop
 8000f32:	e002      	b.n	8000f3a <snake_setDirection+0x7a>
        break;
 8000f34:	bf00      	nop
 8000f36:	e000      	b.n	8000f3a <snake_setDirection+0x7a>
        break;
 8000f38:	bf00      	nop
    }

}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200000a0 	.word	0x200000a0

08000f4c <snake_move>:

void snake_move(char scene[1920]) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

    /* Based on the snake direction, move head one coordinate*/
	if (isPlay != 1) return ;
 8000f54:	4b56      	ldr	r3, [pc, #344]	; (80010b0 <snake_move+0x164>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f040 80a3 	bne.w	80010a4 <snake_move+0x158>
	int head_x = snake_head_x;
 8000f5e:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <snake_move+0x168>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	617b      	str	r3, [r7, #20]
	int head_y = snake_head_y;
 8000f64:	4b54      	ldr	r3, [pc, #336]	; (80010b8 <snake_move+0x16c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	613b      	str	r3, [r7, #16]
	int foodScore;

    switch(snake_direction) {
 8000f6a:	4b54      	ldr	r3, [pc, #336]	; (80010bc <snake_move+0x170>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	f200 8099 	bhi.w	80010a8 <snake_move+0x15c>
 8000f76:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <snake_move+0x30>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	0800105f 	.word	0x0800105f
 8000f84:	08000fd3 	.word	0x08000fd3
 8000f88:	08001019 	.word	0x08001019
    case UP :
    	foodScore = snake_foodScore(head_x, head_y - 1, scene);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4619      	mov	r1, r3
 8000f94:	6978      	ldr	r0, [r7, #20]
 8000f96:	f000 f893 	bl	80010c0 <snake_foodScore>
 8000f9a:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y - 1, scene);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	f7ff fe67 	bl	8000c78 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <snake_move+0x6c>
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff febb 	bl	8000d2c <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000fb6:	e078      	b.n	80010aa <snake_move+0x15e>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000fbe:	d103      	bne.n	8000fc8 <snake_move+0x7c>
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f9a3 	bl	800130c <snake_gameOver>
        break;
 8000fc6:	e070      	b.n	80010aa <snake_move+0x15e>
    	else snake_feed(foodScore, scene);
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f8b8 	bl	8001140 <snake_feed>
        break;
 8000fd0:	e06b      	b.n	80010aa <snake_move+0x15e>
    case DOWN :
    	foodScore = snake_foodScore(head_x, head_y + 1, scene);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f000 f870 	bl	80010c0 <snake_foodScore>
 8000fe0:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x, head_y+1, scene);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff fe44 	bl	8000c78 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <snake_move+0xb2>
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fe98 	bl	8000d2c <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8000ffc:	e055      	b.n	80010aa <snake_move+0x15e>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001004:	d103      	bne.n	800100e <snake_move+0xc2>
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f980 	bl	800130c <snake_gameOver>
        break;
 800100c:	e04d      	b.n	80010aa <snake_move+0x15e>
    	else snake_feed(foodScore, scene);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 f895 	bl	8001140 <snake_feed>
        break;
 8001016:	e048      	b.n	80010aa <snake_move+0x15e>
    case LEFT :
    	foodScore = snake_foodScore(head_x - 1, head_y, scene);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3b01      	subs	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f84d 	bl	80010c0 <snake_foodScore>
 8001026:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x-1, head_y, scene);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3b01      	subs	r3, #1
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fe21 	bl	8000c78 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d103      	bne.n	8001044 <snake_move+0xf8>
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff fe75 	bl	8000d2c <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8001042:	e032      	b.n	80010aa <snake_move+0x15e>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800104a:	d103      	bne.n	8001054 <snake_move+0x108>
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f95d 	bl	800130c <snake_gameOver>
        break;
 8001052:	e02a      	b.n	80010aa <snake_move+0x15e>
    	else snake_feed(foodScore, scene);
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f872 	bl	8001140 <snake_feed>
        break;
 800105c:	e025      	b.n	80010aa <snake_move+0x15e>
    case RIGHT :
    	foodScore = snake_foodScore(head_x + 1, head_y, scene);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f82a 	bl	80010c0 <snake_foodScore>
 800106c:	60f8      	str	r0, [r7, #12]
    	snake_enqueue(head_x+1, head_y, scene);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6939      	ldr	r1, [r7, #16]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fdfe 	bl	8000c78 <snake_enqueue>
    	if ( foodScore == 0 )  snake_dequeue(scene);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <snake_move+0x13e>
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fe52 	bl	8000d2c <snake_dequeue>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
    	else snake_feed(foodScore, scene);
        break;
 8001088:	e00f      	b.n	80010aa <snake_move+0x15e>
    	else if ( foodScore == -99 ) snake_gameOver(scene);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8001090:	d103      	bne.n	800109a <snake_move+0x14e>
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f93a 	bl	800130c <snake_gameOver>
        break;
 8001098:	e007      	b.n	80010aa <snake_move+0x15e>
    	else snake_feed(foodScore, scene);
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 f84f 	bl	8001140 <snake_feed>
        break;
 80010a2:	e002      	b.n	80010aa <snake_move+0x15e>
	if (isPlay != 1) return ;
 80010a4:	bf00      	nop
 80010a6:	e000      	b.n	80010aa <snake_move+0x15e>
    default :
        break;
 80010a8:	bf00      	nop
    }
}
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000c4 	.word	0x200000c4
 80010b4:	200000a4 	.word	0x200000a4
 80010b8:	200000a8 	.word	0x200000a8
 80010bc:	200000a0 	.word	0x200000a0

080010c0 <snake_foodScore>:

int snake_foodScore(int x, int y, char scene[1920]){
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
	/* This function checks what the next pixel is ?
	 * if next pixel is food. return score of that food
	 * if next pixel is snake. return -1 -> game over
	 * else return 0 mean next pixel is free space.
	 */
	if ( scene[80 * y + x] == 'O' ) return 1;
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b4f      	cmp	r3, #79	; 0x4f
 80010e6:	d101      	bne.n	80010ec <snake_foodScore+0x2c>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e022      	b.n	8001132 <snake_foodScore+0x72>
	else if ( scene[80 * y + x] == '#'  ) return -1;
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	461a      	mov	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b23      	cmp	r3, #35	; 0x23
 8001106:	d102      	bne.n	800110e <snake_foodScore+0x4e>
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	e011      	b.n	8001132 <snake_foodScore+0x72>
	else if ( scene[80 * y + x] == '@' ) return -99;
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	461a      	mov	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b40      	cmp	r3, #64	; 0x40
 8001128:	d102      	bne.n	8001130 <snake_foodScore+0x70>
 800112a:	f06f 0362 	mvn.w	r3, #98	; 0x62
 800112e:	e000      	b.n	8001132 <snake_foodScore+0x72>
	return 0;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <snake_feed>:

void snake_feed(int foodScore, char scene[1920]){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	score += foodScore;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <snake_feed+0x24>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <snake_feed+0x24>)
 8001154:	6013      	str	r3, [r2, #0]
	scene_setScore(scene);
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f7ff fe2c 	bl	8000db4 <scene_setScore>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000cc 	.word	0x200000cc

08001168 <snake_newFood>:

void snake_newFood(char scene[1920]){
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if ( isPlay == 1) {
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <snake_newFood+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d159      	bne.n	800122c <snake_newFood+0xc4>
		food_time ++;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <snake_newFood+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <snake_newFood+0xd0>)
 8001180:	6013      	str	r3, [r2, #0]
		int x = rand() % 80;
 8001182:	f002 ff61 	bl	8004048 <rand>
 8001186:	4602      	mov	r2, r0
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <snake_newFood+0xd4>)
 800118a:	fb83 1302 	smull	r1, r3, r3, r2
 800118e:	1159      	asrs	r1, r3, #5
 8001190:	17d3      	asrs	r3, r2, #31
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	60fb      	str	r3, [r7, #12]
		int y = rand() % 24;
 80011a0:	f002 ff52 	bl	8004048 <rand>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <snake_newFood+0xd8>)
 80011a8:	fb83 1302 	smull	r1, r3, r3, r2
 80011ac:	1099      	asrs	r1, r3, #2
 80011ae:	17d3      	asrs	r3, r2, #31
 80011b0:	1ac9      	subs	r1, r1, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	440b      	add	r3, r1
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	60bb      	str	r3, [r7, #8]
		if ( (scene[80 * y + x] == ' ' || scene[80 * y + x] == '#') && food_time % food_constant == 0) {
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	d00d      	beq.n	80011f6 <snake_newFood+0x8e>
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	461a      	mov	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b23      	cmp	r3, #35	; 0x23
 80011f4:	d11a      	bne.n	800122c <snake_newFood+0xc4>
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <snake_newFood+0xd0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <snake_newFood+0xdc>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001202:	fb02 f201 	mul.w	r2, r2, r1
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10f      	bne.n	800122c <snake_newFood+0xc4>
			scene[80 * y + x] = 'O';
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	224f      	movs	r2, #79	; 0x4f
 8001224:	701a      	strb	r2, [r3, #0]
			food_time = 0;
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <snake_newFood+0xd0>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000c4 	.word	0x200000c4
 8001238:	200000b8 	.word	0x200000b8
 800123c:	66666667 	.word	0x66666667
 8001240:	2aaaaaab 	.word	0x2aaaaaab
 8001244:	200000b4 	.word	0x200000b4

08001248 <snake_newObstacle>:

void snake_newObstacle(char scene[1920]){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if ( isPlay == 1) {
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <snake_newObstacle+0xb0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d14b      	bne.n	80012f0 <snake_newObstacle+0xa8>
		obstacle_time ++;
 8001258:	4b28      	ldr	r3, [pc, #160]	; (80012fc <snake_newObstacle+0xb4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a27      	ldr	r2, [pc, #156]	; (80012fc <snake_newObstacle+0xb4>)
 8001260:	6013      	str	r3, [r2, #0]
		if ( obstacle_time % obstacle_constant == 0 ){
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <snake_newObstacle+0xb4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <snake_newObstacle+0xb8>)
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	fb93 f1f2 	sdiv	r1, r3, r2
 800126e:	fb02 f201 	mul.w	r2, r2, r1
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d13b      	bne.n	80012f0 <snake_newObstacle+0xa8>
			obstacle_time = 0;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <snake_newObstacle+0xb4>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
			int x = rand() % 80;
 800127e:	f002 fee3 	bl	8004048 <rand>
 8001282:	4602      	mov	r2, r0
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <snake_newObstacle+0xbc>)
 8001286:	fb83 1302 	smull	r1, r3, r3, r2
 800128a:	1159      	asrs	r1, r3, #5
 800128c:	17d3      	asrs	r3, r2, #31
 800128e:	1ac9      	subs	r1, r1, r3
 8001290:	460b      	mov	r3, r1
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	60fb      	str	r3, [r7, #12]
			int y = rand() % 24;
 800129c:	f002 fed4 	bl	8004048 <rand>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <snake_newObstacle+0xc0>)
 80012a4:	fb83 1302 	smull	r1, r3, r3, r2
 80012a8:	1099      	asrs	r1, r3, #2
 80012aa:	17d3      	asrs	r3, r2, #31
 80012ac:	1ac9      	subs	r1, r1, r3
 80012ae:	460b      	mov	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	440b      	add	r3, r1
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	60bb      	str	r3, [r7, #8]
			if ( scene[80 * y + x] == ' ' ) scene[80 * y + x] = '#';
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d10c      	bne.n	80012f0 <snake_newObstacle+0xa8>
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	2223      	movs	r2, #35	; 0x23
 80012ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000c4 	.word	0x200000c4
 80012fc:	200000c0 	.word	0x200000c0
 8001300:	200000bc 	.word	0x200000bc
 8001304:	66666667 	.word	0x66666667
 8001308:	2aaaaaab 	.word	0x2aaaaaab

0800130c <snake_gameOver>:

void snake_gameOver(char scene[1920]){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
	while ( !isEmpty( snake_x) )  { snake_dequeue(scene); }
 8001314:	e002      	b.n	800131c <snake_gameOver+0x10>
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd08 	bl	8000d2c <snake_dequeue>
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <snake_gameOver+0x50>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fb8d 	bl	8000a40 <isEmpty>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f4      	beq.n	8001316 <snake_gameOver+0xa>
	scene_setPixelX(35, 44, 10, scene, "Game  Over", 10);
 800132c:	230a      	movs	r3, #10
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <snake_gameOver+0x54>)
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	220a      	movs	r2, #10
 8001338:	212c      	movs	r1, #44	; 0x2c
 800133a:	2023      	movs	r0, #35	; 0x23
 800133c:	f000 f888 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(28, 52, 11, scene, "Press 'K' to start again.", 25);
 8001340:	2319      	movs	r3, #25
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <snake_gameOver+0x58>)
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	220b      	movs	r2, #11
 800134c:	2134      	movs	r1, #52	; 0x34
 800134e:	201c      	movs	r0, #28
 8001350:	f000 f87e 	bl	8001450 <scene_setPixelX>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200008e4 	.word	0x200008e4
 8001360:	080040ec 	.word	0x080040ec
 8001364:	080040f8 	.word	0x080040f8

08001368 <snake_levelUp>:

void snake_levelUp(char scene[1920]){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if (score == 10) {level = 2; obstacle_constant = 100; scene_setLevel(scene); }
 8001370:	4b24      	ldr	r3, [pc, #144]	; (8001404 <snake_levelUp+0x9c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b0a      	cmp	r3, #10
 8001376:	d109      	bne.n	800138c <snake_levelUp+0x24>
 8001378:	4b23      	ldr	r3, [pc, #140]	; (8001408 <snake_levelUp+0xa0>)
 800137a:	2202      	movs	r2, #2
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <snake_levelUp+0xa4>)
 8001380:	2264      	movs	r2, #100	; 0x64
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f843 	bl	8001410 <scene_setLevel>
	else if (score == 30) { level = 3 ;obstacle_constant = 80; scene_setLevel(scene); }
	else if (score == 50) { level = 4; obstacle_constant = 60; scene_setLevel(scene); }
	else if (score == 100) { level = 5 ; obstacle_constant = 40; scene_setLevel(scene); }
	else if (score == 150) { level = 6 ; obstacle_constant = 20; scene_setLevel(scene); }
}
 800138a:	e036      	b.n	80013fa <snake_levelUp+0x92>
	else if (score == 30) { level = 3 ;obstacle_constant = 80; scene_setLevel(scene); }
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <snake_levelUp+0x9c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b1e      	cmp	r3, #30
 8001392:	d109      	bne.n	80013a8 <snake_levelUp+0x40>
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <snake_levelUp+0xa0>)
 8001396:	2203      	movs	r2, #3
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <snake_levelUp+0xa4>)
 800139c:	2250      	movs	r2, #80	; 0x50
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f835 	bl	8001410 <scene_setLevel>
}
 80013a6:	e028      	b.n	80013fa <snake_levelUp+0x92>
	else if (score == 50) { level = 4; obstacle_constant = 60; scene_setLevel(scene); }
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <snake_levelUp+0x9c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b32      	cmp	r3, #50	; 0x32
 80013ae:	d109      	bne.n	80013c4 <snake_levelUp+0x5c>
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <snake_levelUp+0xa0>)
 80013b2:	2204      	movs	r2, #4
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <snake_levelUp+0xa4>)
 80013b8:	223c      	movs	r2, #60	; 0x3c
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f827 	bl	8001410 <scene_setLevel>
}
 80013c2:	e01a      	b.n	80013fa <snake_levelUp+0x92>
	else if (score == 100) { level = 5 ; obstacle_constant = 40; scene_setLevel(scene); }
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <snake_levelUp+0x9c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b64      	cmp	r3, #100	; 0x64
 80013ca:	d109      	bne.n	80013e0 <snake_levelUp+0x78>
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <snake_levelUp+0xa0>)
 80013ce:	2205      	movs	r2, #5
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <snake_levelUp+0xa4>)
 80013d4:	2228      	movs	r2, #40	; 0x28
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f819 	bl	8001410 <scene_setLevel>
}
 80013de:	e00c      	b.n	80013fa <snake_levelUp+0x92>
	else if (score == 150) { level = 6 ; obstacle_constant = 20; scene_setLevel(scene); }
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <snake_levelUp+0x9c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b96      	cmp	r3, #150	; 0x96
 80013e6:	d108      	bne.n	80013fa <snake_levelUp+0x92>
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <snake_levelUp+0xa0>)
 80013ea:	2206      	movs	r2, #6
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <snake_levelUp+0xa4>)
 80013f0:	2214      	movs	r2, #20
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f80b 	bl	8001410 <scene_setLevel>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000cc 	.word	0x200000cc
 8001408:	200000c8 	.word	0x200000c8
 800140c:	200000bc 	.word	0x200000bc

08001410 <scene_setLevel>:

void scene_setLevel(char scene[1920]){
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b085      	sub	sp, #20
 8001414:	af02      	add	r7, sp, #8
 8001416:	6078      	str	r0, [r7, #4]
	scene_setPixelX(0, 7, 23, scene, "level : ", 8);
 8001418:	2308      	movs	r3, #8
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <scene_setLevel+0x38>)
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2217      	movs	r2, #23
 8001424:	2107      	movs	r1, #7
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f812 	bl	8001450 <scene_setPixelX>
	scene[80 * 23 + 8] = intTOchar(level);
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <scene_setLevel+0x3c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 64e7 	add.w	r4, r3, #1848	; 0x738
 8001436:	4610      	mov	r0, r2
 8001438:	f000 f94a 	bl	80016d0 <intTOchar>
 800143c:	4603      	mov	r3, r0
 800143e:	7023      	strb	r3, [r4, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	08004114 	.word	0x08004114
 800144c:	200000c8 	.word	0x200000c8

08001450 <scene_setPixelX>:


void scene_setPixelX(int x1, int x2, int y, char scene[1920], char text[], int size){
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
	if (x1 > x2) { scene_setPixelX(x2, x1, y, scene, text, size); }
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	429a      	cmp	r2, r3
 8001464:	dd0a      	ble.n	800147c <scene_setPixelX+0x2c>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f7ff ffeb 	bl	8001450 <scene_setPixelX>
 800147a:	e024      	b.n	80014c6 <scene_setPixelX+0x76>
	else {
		int indeX = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	e019      	b.n	80014ba <scene_setPixelX+0x6a>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	18d1      	adds	r1, r2, r3
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	461a      	mov	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4413      	add	r3, r2
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	780a      	ldrb	r2, [r1, #0]
 80014a4:	701a      	strb	r2, [r3, #0]
		indeX++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
		if (indeX >= size) return ;
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	429a      	cmp	r2, r3
 80014b2:	da07      	bge.n	80014c4 <scene_setPixelX+0x74>
		for (int i=x1; i<=x2; i++) { scene[80 * y + i] = text[indeX];
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	3301      	adds	r3, #1
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dde1      	ble.n	8001486 <scene_setPixelX+0x36>
 80014c2:	e000      	b.n	80014c6 <scene_setPixelX+0x76>
		if (indeX >= size) return ;
 80014c4:	bf00      	nop
		}
	}
}
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <scene_setPixelY>:

void scene_setPixelY(int x, int y1, int y2, char scene[1920], char text[], int size){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af02      	add	r7, sp, #8
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
	if (y1 > y2) { scene_setPixelX(x, y1, y2, scene, text, size); }
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dd0a      	ble.n	80014f8 <scene_setPixelY+0x2c>
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff ffad 	bl	8001450 <scene_setPixelX>
 80014f6:	e024      	b.n	8001542 <scene_setPixelY+0x76>
	else {
		int indeX = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
		for (int i=y1; i<=y2; i++) { scene[80 * i + x] = text[indeX];
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	e019      	b.n	8001536 <scene_setPixelY+0x6a>
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	18d1      	adds	r1, r2, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	461a      	mov	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	780a      	ldrb	r2, [r1, #0]
 8001520:	701a      	strb	r2, [r3, #0]
		indeX++;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
		if (indeX >= size) return ;
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	da07      	bge.n	8001540 <scene_setPixelY+0x74>
		for (int i=y1; i<=y2; i++) { scene[80 * i + x] = text[indeX];
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	3301      	adds	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dde1      	ble.n	8001502 <scene_setPixelY+0x36>
 800153e:	e000      	b.n	8001542 <scene_setPixelY+0x76>
		if (indeX >= size) return ;
 8001540:	bf00      	nop
		}
	}
}
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <scene_mainmenu>:

void scene_mainmenu(char scene[1920]){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af02      	add	r7, sp, #8
 800154e:	6078      	str	r0, [r7, #4]
	/* For observing the beginning of a pixel */
	scene_setPixelX(36, 44, 7, scene, "SNAKE  GO", 9);
 8001550:	2309      	movs	r3, #9
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	4b43      	ldr	r3, [pc, #268]	; (8001664 <scene_mainmenu+0x11c>)
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2207      	movs	r2, #7
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	2024      	movs	r0, #36	; 0x24
 8001560:	f7ff ff76 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(25, 52, 8, scene, "Press 'K' to start the game.", 28);
 8001564:	231c      	movs	r3, #28
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <scene_mainmenu+0x120>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2208      	movs	r2, #8
 8001570:	2134      	movs	r1, #52	; 0x34
 8001572:	2019      	movs	r0, #25
 8001574:	f7ff ff6c 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(34, 45, 10, scene, "How to play.", 12);
 8001578:	230c      	movs	r3, #12
 800157a:	9301      	str	r3, [sp, #4]
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <scene_mainmenu+0x124>)
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	220a      	movs	r2, #10
 8001584:	212d      	movs	r1, #45	; 0x2d
 8001586:	2022      	movs	r0, #34	; 0x22
 8001588:	f7ff ff62 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(20, 40, 11, scene, "Press 'W' for move up", 21);
 800158c:	2315      	movs	r3, #21
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <scene_mainmenu+0x128>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	220b      	movs	r2, #11
 8001598:	2128      	movs	r1, #40	; 0x28
 800159a:	2014      	movs	r0, #20
 800159c:	f7ff ff58 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(20, 43, 12, scene, "Press 'D' for move right", 24);
 80015a0:	2318      	movs	r3, #24
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <scene_mainmenu+0x12c>)
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	220c      	movs	r2, #12
 80015ac:	212b      	movs	r1, #43	; 0x2b
 80015ae:	2014      	movs	r0, #20
 80015b0:	f7ff ff4e 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(20, 42, 13, scene, "Press 'S' for move down", 23);
 80015b4:	2317      	movs	r3, #23
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <scene_mainmenu+0x130>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	220d      	movs	r2, #13
 80015c0:	212a      	movs	r1, #42	; 0x2a
 80015c2:	2014      	movs	r0, #20
 80015c4:	f7ff ff44 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(20, 42, 14, scene, "Press 'A' for move left", 23);
 80015c8:	2317      	movs	r3, #23
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <scene_mainmenu+0x134>)
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	220e      	movs	r2, #14
 80015d4:	212a      	movs	r1, #42	; 0x2a
 80015d6:	2014      	movs	r0, #20
 80015d8:	f7ff ff3a 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(25, 37, 15, scene, "O  : +1 score", 13);
 80015dc:	230d      	movs	r3, #13
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <scene_mainmenu+0x138>)
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	220f      	movs	r2, #15
 80015e8:	2125      	movs	r1, #37	; 0x25
 80015ea:	2019      	movs	r0, #25
 80015ec:	f7ff ff30 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(25, 37, 16, scene, "#  : -1 score", 13);
 80015f0:	230d      	movs	r3, #13
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <scene_mainmenu+0x13c>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2210      	movs	r2, #16
 80015fc:	2125      	movs	r1, #37	; 0x25
 80015fe:	2019      	movs	r0, #25
 8001600:	f7ff ff26 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(0, 79, 0, scene, "________________________________________________________________________________", 80);
 8001604:	2350      	movs	r3, #80	; 0x50
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <scene_mainmenu+0x140>)
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	214f      	movs	r1, #79	; 0x4f
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff ff1c 	bl	8001450 <scene_setPixelX>
	scene_setPixelX(0, 79, 22, scene, "________________________________________________________________________________", 80);
 8001618:	2350      	movs	r3, #80	; 0x50
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <scene_mainmenu+0x140>)
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2216      	movs	r2, #22
 8001624:	214f      	movs	r1, #79	; 0x4f
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff ff12 	bl	8001450 <scene_setPixelX>
	scene_setPixelY(0, 1, 22, scene, "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 80);
 800162c:	2350      	movs	r3, #80	; 0x50
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <scene_mainmenu+0x144>)
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2216      	movs	r2, #22
 8001638:	2101      	movs	r1, #1
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ff46 	bl	80014cc <scene_setPixelY>
	scene_setPixelY(79, 1, 22, scene, "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", 80);
 8001640:	2350      	movs	r3, #80	; 0x50
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <scene_mainmenu+0x144>)
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2216      	movs	r2, #22
 800164c:	2101      	movs	r1, #1
 800164e:	204f      	movs	r0, #79	; 0x4f
 8001650:	f7ff ff3c 	bl	80014cc <scene_setPixelY>
	isPlay = 0;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <scene_mainmenu+0x148>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	08004120 	.word	0x08004120
 8001668:	0800412c 	.word	0x0800412c
 800166c:	0800414c 	.word	0x0800414c
 8001670:	0800415c 	.word	0x0800415c
 8001674:	08004174 	.word	0x08004174
 8001678:	08004190 	.word	0x08004190
 800167c:	080041a8 	.word	0x080041a8
 8001680:	080041c0 	.word	0x080041c0
 8001684:	080041d0 	.word	0x080041d0
 8001688:	080041e0 	.word	0x080041e0
 800168c:	08004234 	.word	0x08004234
 8001690:	200000c4 	.word	0x200000c4

08001694 <scene_clear>:

void scene_clear(char scene[1920]){
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<1920; i++) scene[i] = ' ';
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	e007      	b.n	80016b2 <scene_clear+0x1e>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	2220      	movs	r2, #32
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80016b8:	dbf3      	blt.n	80016a2 <scene_clear+0xe>
	isPlay = 0;
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <scene_clear+0x38>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	200000c4 	.word	0x200000c4

080016d0 <intTOchar>:

char intTOchar(int integers){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if (integers == 1) return '1';
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <intTOchar+0x12>
 80016de:	2331      	movs	r3, #49	; 0x31
 80016e0:	e028      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 2) return '2';
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d101      	bne.n	80016ec <intTOchar+0x1c>
 80016e8:	2332      	movs	r3, #50	; 0x32
 80016ea:	e023      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 3) return '3';
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d101      	bne.n	80016f6 <intTOchar+0x26>
 80016f2:	2333      	movs	r3, #51	; 0x33
 80016f4:	e01e      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 4) return '4';
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d101      	bne.n	8001700 <intTOchar+0x30>
 80016fc:	2334      	movs	r3, #52	; 0x34
 80016fe:	e019      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 5) return '5';
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d101      	bne.n	800170a <intTOchar+0x3a>
 8001706:	2335      	movs	r3, #53	; 0x35
 8001708:	e014      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 6) return '6';
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b06      	cmp	r3, #6
 800170e:	d101      	bne.n	8001714 <intTOchar+0x44>
 8001710:	2336      	movs	r3, #54	; 0x36
 8001712:	e00f      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 7) return '7';
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b07      	cmp	r3, #7
 8001718:	d101      	bne.n	800171e <intTOchar+0x4e>
 800171a:	2337      	movs	r3, #55	; 0x37
 800171c:	e00a      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 8) return '8';
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d101      	bne.n	8001728 <intTOchar+0x58>
 8001724:	2338      	movs	r3, #56	; 0x38
 8001726:	e005      	b.n	8001734 <intTOchar+0x64>
	else if (integers == 9) return '9';
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b09      	cmp	r3, #9
 800172c:	d101      	bne.n	8001732 <intTOchar+0x62>
 800172e:	2339      	movs	r3, #57	; 0x39
 8001730:	e000      	b.n	8001734 <intTOchar+0x64>
	else return '0';
 8001732:	2330      	movs	r3, #48	; 0x30
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800177e:	2007      	movs	r0, #7
 8001780:	f000 fa6c 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d115      	bne.n	80017ce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	201c      	movs	r0, #28
 80017c4:	f000 fa55 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017c8:	201c      	movs	r0, #28
 80017ca:	f000 fa6e 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_UART_MspInit+0x94>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d133      	bne.n	8001866 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_UART_MspInit+0x98>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <HAL_UART_MspInit+0x98>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_UART_MspInit+0x98>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_UART_MspInit+0x98>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <HAL_UART_MspInit+0x98>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <HAL_UART_MspInit+0x9c>)
 8001852:	f000 fa67 	bl	8001d24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2026      	movs	r0, #38	; 0x26
 800185c:	f000 fa09 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001860:	2026      	movs	r0, #38	; 0x26
 8001862:	f000 fa22 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	; 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40004400 	.word	0x40004400
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <MemManage_Handler+0x4>

08001896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d0:	f000 f8d4 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM2_IRQHandler+0x10>)
 80018de:	f001 f86e 	bl	80029be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000e0 	.word	0x200000e0

080018ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <USART2_IRQHandler+0x10>)
 80018f2:	f001 fd23 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000120 	.word	0x20000120

08001900 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x50>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x16>
		heap_end = &end;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <_sbrk+0x50>)
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <_sbrk+0x54>)
 8001914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <_sbrk+0x50>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <_sbrk+0x50>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	466a      	mov	r2, sp
 8001926:	4293      	cmp	r3, r2
 8001928:	d907      	bls.n	800193a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800192a:	f002 faf9 	bl	8003f20 <__errno>
 800192e:	4602      	mov	r2, r0
 8001930:	230c      	movs	r3, #12
 8001932:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	e006      	b.n	8001948 <_sbrk+0x48>
	}

	heap_end += incr;
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <_sbrk+0x50>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a03      	ldr	r2, [pc, #12]	; (8001950 <_sbrk+0x50>)
 8001944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000d0 	.word	0x200000d0
 8001954:	200008f0 	.word	0x200008f0

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <SystemInit+0x28>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <SystemInit+0x28>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0x28>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800198a:	e003      	b.n	8001994 <LoopCopyDataInit>

0800198c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001992:	3104      	adds	r1, #4

08001994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800199a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800199c:	d3f6      	bcc.n	800198c <CopyDataInit>
  ldr  r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a0:	e002      	b.n	80019a8 <LoopFillZerobss>

080019a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a4:	f842 3b04 	str.w	r3, [r2], #4

080019a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019ac:	d3f9      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ae:	f7ff ffd3 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f002 fabb 	bl	8003f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7fe fd8f 	bl	80004d8 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019c0:	080042b0 	.word	0x080042b0
  ldr  r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80019cc:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80019d0:	200008f0 	.word	0x200008f0

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <HAL_Init+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <HAL_Init+0x40>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_Init+0x40>)
 80019ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <HAL_Init+0x40>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a00:	2003      	movs	r0, #3
 8001a02:	f000 f92b 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f808 	bl	8001a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0c:	f7ff fe98 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_InitTick+0x54>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x58>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f943 	bl	8001cc6 <HAL_SYSTICK_Config>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00e      	b.n	8001a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d80a      	bhi.n	8001a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f000 f90b 	bl	8001c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <HAL_InitTick+0x5c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000010 	.word	0x20000010
 8001a74:	20000018 	.word	0x20000018
 8001a78:	20000014 	.word	0x20000014

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000018 	.word	0x20000018
 8001aa0:	200008e8 	.word	0x200008e8

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200008e8 	.word	0x200008e8

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	f003 021f 	and.w	r2, r3, #31
 8001b38:	4907      	ldr	r1, [pc, #28]	; (8001b58 <__NVIC_EnableIRQ+0x38>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	2001      	movs	r0, #1
 8001b42:	fa00 f202 	lsl.w	r2, r0, r2
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c28:	d301      	bcc.n	8001c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00f      	b.n	8001c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <SysTick_Config+0x40>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c36:	210f      	movs	r1, #15
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f7ff ff8e 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <SysTick_Config+0x40>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c46:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <SysTick_Config+0x40>)
 8001c48:	2207      	movs	r2, #7
 8001c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	e000e010 	.word	0xe000e010

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff29 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff3e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff8e 	bl	8001bb0 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff31 	bl	8001b20 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa2 	bl	8001c18 <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e00c      	b.n	8001d16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	e159      	b.n	8001ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 8148 	bne.w	8001fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d00b      	beq.n	8001d7e <HAL_GPIO_Init+0x5a>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d72:	2b11      	cmp	r3, #17
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d130      	bne.n	8001de0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db4:	2201      	movs	r2, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 0201 	and.w	r2, r3, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0xfc>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d123      	bne.n	8001e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	08da      	lsrs	r2, r3, #3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3208      	adds	r2, #8
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3208      	adds	r2, #8
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a2 	beq.w	8001fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b56      	ldr	r3, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a55      	ldr	r2, [pc, #340]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_GPIO_Init+0x2e4>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec6:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	089b      	lsrs	r3, r3, #2
 8001ecc:	3302      	adds	r3, #2
 8001ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2ec>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d019      	beq.n	8001f26 <HAL_GPIO_Init+0x202>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_GPIO_Init+0x2f0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_GPIO_Init+0x1fe>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a46      	ldr	r2, [pc, #280]	; (8002018 <HAL_GPIO_Init+0x2f4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00d      	beq.n	8001f1e <HAL_GPIO_Init+0x1fa>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a45      	ldr	r2, [pc, #276]	; (800201c <HAL_GPIO_Init+0x2f8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <HAL_GPIO_Init+0x1f6>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_GPIO_Init+0x2fc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_GPIO_Init+0x1f2>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f16:	2307      	movs	r3, #7
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x204>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f38:	4934      	ldr	r1, [pc, #208]	; (800200c <HAL_GPIO_Init+0x2e8>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f46:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f6a:	4a2e      	ldr	r2, [pc, #184]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f94:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fbe:	4a19      	ldr	r2, [pc, #100]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_GPIO_Init+0x300>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f aea2 	bls.w	8001d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3724      	adds	r7, #36	; 0x24
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e25b      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d075      	beq.n	8002166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207a:	4ba3      	ldr	r3, [pc, #652]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b04      	cmp	r3, #4
 8002084:	d00c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002086:	4ba0      	ldr	r3, [pc, #640]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d112      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002092:	4b9d      	ldr	r3, [pc, #628]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800209e:	d10b      	bne.n	80020b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	4b99      	ldr	r3, [pc, #612]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d05b      	beq.n	8002164 <HAL_RCC_OscConfig+0x108>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d157      	bne.n	8002164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e236      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d106      	bne.n	80020d0 <HAL_RCC_OscConfig+0x74>
 80020c2:	4b91      	ldr	r3, [pc, #580]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a90      	ldr	r2, [pc, #576]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e01d      	b.n	800210c <HAL_RCC_OscConfig+0xb0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e00b      	b.n	800210c <HAL_RCC_OscConfig+0xb0>
 80020f4:	4b84      	ldr	r3, [pc, #528]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a83      	ldr	r2, [pc, #524]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a80      	ldr	r2, [pc, #512]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fcc6 	bl	8001aa4 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fcc2 	bl	8001aa4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1fb      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0xc0>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fcb2 	bl	8001aa4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fcae 	bl	8001aa4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1e7      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0xe8>
 8002162:	e000      	b.n	8002166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d063      	beq.n	800223a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002186:	2b08      	cmp	r3, #8
 8002188:	d11c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d116      	bne.n	80021c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x152>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e1bb      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4952      	ldr	r1, [pc, #328]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	e03a      	b.n	800223a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	4b4f      	ldr	r3, [pc, #316]	; (800230c <HAL_RCC_OscConfig+0x2b0>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7ff fc67 	bl	8001aa4 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021da:	f7ff fc63 	bl	8001aa4 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e19c      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4940      	ldr	r1, [pc, #256]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x2b0>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff fc46 	bl	8001aa4 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221c:	f7ff fc42 	bl	8001aa4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e17b      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d030      	beq.n	80022a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x2b4>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002254:	f7ff fc26 	bl	8001aa4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225c:	f7ff fc22 	bl	8001aa4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e15b      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x200>
 800227a:	e015      	b.n	80022a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x2b4>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fc0f 	bl	8001aa4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228a:	f7ff fc0b 	bl	8001aa4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e144      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f0      	bne.n	800228a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a0 	beq.w	80023f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x2b8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d121      	bne.n	8002336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_OscConfig+0x2b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_RCC_OscConfig+0x2b8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fbd1 	bl	8001aa4 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e011      	b.n	800232a <HAL_RCC_OscConfig+0x2ce>
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	42470000 	.word	0x42470000
 8002310:	42470e80 	.word	0x42470e80
 8002314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7ff fbc4 	bl	8001aa4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0fd      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b81      	ldr	r3, [pc, #516]	; (8002530 <HAL_RCC_OscConfig+0x4d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x2f0>
 800233e:	4b7d      	ldr	r3, [pc, #500]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a7c      	ldr	r2, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	e01c      	b.n	8002386 <HAL_RCC_OscConfig+0x32a>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b05      	cmp	r3, #5
 8002352:	d10c      	bne.n	800236e <HAL_RCC_OscConfig+0x312>
 8002354:	4b77      	ldr	r3, [pc, #476]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	4a76      	ldr	r2, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 800235a:	f043 0304 	orr.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	; 0x70
 8002360:	4b74      	ldr	r3, [pc, #464]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a73      	ldr	r2, [pc, #460]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e00b      	b.n	8002386 <HAL_RCC_OscConfig+0x32a>
 800236e:	4b71      	ldr	r3, [pc, #452]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a70      	ldr	r2, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
 800237a:	4b6e      	ldr	r3, [pc, #440]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a6d      	ldr	r2, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d015      	beq.n	80023ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff fb89 	bl	8001aa4 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7ff fb85 	bl	8001aa4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0bc      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ac:	4b61      	ldr	r3, [pc, #388]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ee      	beq.n	8002396 <HAL_RCC_OscConfig+0x33a>
 80023b8:	e014      	b.n	80023e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fb73 	bl	8001aa4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7ff fb6f 	bl	8001aa4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0a6      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8092 	beq.w	8002524 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002400:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d05c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d141      	bne.n	8002498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002414:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCC_OscConfig+0x4dc>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fb43 	bl	8001aa4 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fb3f 	bl	8001aa4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e078      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	019b      	lsls	r3, r3, #6
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	061b      	lsls	r3, r3, #24
 8002464:	4933      	ldr	r1, [pc, #204]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_OscConfig+0x4dc>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff fb18 	bl	8001aa4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff fb14 	bl	8001aa4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e04d      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x41c>
 8002496:	e045      	b.n	8002524 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x4dc>)
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7ff fb01 	bl	8001aa4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a6:	f7ff fafd 	bl	8001aa4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e036      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x44a>
 80024c4:	e02e      	b.n	8002524 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e029      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_RCC_OscConfig+0x4d8>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d115      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40007000 	.word	0x40007000
 8002534:	40023800 	.word	0x40023800
 8002538:	42470060 	.word	0x42470060

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0cc      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d90c      	bls.n	8002578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b8      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800259a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	494d      	ldr	r1, [pc, #308]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d044      	beq.n	800265c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d119      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e07f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e067      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4934      	ldr	r1, [pc, #208]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7ff fa3a 	bl	8001aa4 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7ff fa36 	bl	8001aa4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20c      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e032      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4916      	ldr	r1, [pc, #88]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	490e      	ldr	r1, [pc, #56]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c2:	f000 f821 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c6:	4601      	mov	r1, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	fa21 f303 	lsr.w	r3, r1, r3
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f99a 	bl	8001a1c <HAL_InitTick>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08004288 	.word	0x08004288
 8002700:	20000010 	.word	0x20000010
 8002704:	20000014 	.word	0x20000014

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	2300      	movs	r3, #0
 8002718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b04      	cmp	r3, #4
 8002728:	d007      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x32>
 800272a:	2b08      	cmp	r3, #8
 800272c:	d008      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x38>
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80b4 	bne.w	800289c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b5e      	ldr	r3, [pc, #376]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002736:	60bb      	str	r3, [r7, #8]
       break;
 8002738:	e0b3      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800273a:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800273c:	60bb      	str	r3, [r7, #8]
      break;
 800273e:	e0b0      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002748:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274a:	4b58      	ldr	r3, [pc, #352]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04a      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002756:	4b55      	ldr	r3, [pc, #340]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	f04f 0400 	mov.w	r4, #0
 8002760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	ea03 0501 	and.w	r5, r3, r1
 800276c:	ea04 0602 	and.w	r6, r4, r2
 8002770:	4629      	mov	r1, r5
 8002772:	4632      	mov	r2, r6
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	f04f 0400 	mov.w	r4, #0
 800277c:	0154      	lsls	r4, r2, #5
 800277e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002782:	014b      	lsls	r3, r1, #5
 8002784:	4619      	mov	r1, r3
 8002786:	4622      	mov	r2, r4
 8002788:	1b49      	subs	r1, r1, r5
 800278a:	eb62 0206 	sbc.w	r2, r2, r6
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	f04f 0400 	mov.w	r4, #0
 8002796:	0194      	lsls	r4, r2, #6
 8002798:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800279c:	018b      	lsls	r3, r1, #6
 800279e:	1a5b      	subs	r3, r3, r1
 80027a0:	eb64 0402 	sbc.w	r4, r4, r2
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	00e2      	lsls	r2, r4, #3
 80027ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027b2:	00d9      	lsls	r1, r3, #3
 80027b4:	460b      	mov	r3, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	195b      	adds	r3, r3, r5
 80027ba:	eb44 0406 	adc.w	r4, r4, r6
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	0262      	lsls	r2, r4, #9
 80027c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027cc:	0259      	lsls	r1, r3, #9
 80027ce:	460b      	mov	r3, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	4621      	mov	r1, r4
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 0400 	mov.w	r4, #0
 80027dc:	461a      	mov	r2, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	f7fd fcfa 	bl	80001d8 <__aeabi_uldivmod>
 80027e4:	4603      	mov	r3, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	e049      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	ea03 0501 	and.w	r5, r3, r1
 8002802:	ea04 0602 	and.w	r6, r4, r2
 8002806:	4629      	mov	r1, r5
 8002808:	4632      	mov	r2, r6
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	f04f 0400 	mov.w	r4, #0
 8002812:	0154      	lsls	r4, r2, #5
 8002814:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002818:	014b      	lsls	r3, r1, #5
 800281a:	4619      	mov	r1, r3
 800281c:	4622      	mov	r2, r4
 800281e:	1b49      	subs	r1, r1, r5
 8002820:	eb62 0206 	sbc.w	r2, r2, r6
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f04f 0400 	mov.w	r4, #0
 800282c:	0194      	lsls	r4, r2, #6
 800282e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002832:	018b      	lsls	r3, r1, #6
 8002834:	1a5b      	subs	r3, r3, r1
 8002836:	eb64 0402 	sbc.w	r4, r4, r2
 800283a:	f04f 0100 	mov.w	r1, #0
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	00e2      	lsls	r2, r4, #3
 8002844:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002848:	00d9      	lsls	r1, r3, #3
 800284a:	460b      	mov	r3, r1
 800284c:	4614      	mov	r4, r2
 800284e:	195b      	adds	r3, r3, r5
 8002850:	eb44 0406 	adc.w	r4, r4, r6
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	02a2      	lsls	r2, r4, #10
 800285e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002862:	0299      	lsls	r1, r3, #10
 8002864:	460b      	mov	r3, r1
 8002866:	4614      	mov	r4, r2
 8002868:	4618      	mov	r0, r3
 800286a:	4621      	mov	r1, r4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0400 	mov.w	r4, #0
 8002872:	461a      	mov	r2, r3
 8002874:	4623      	mov	r3, r4
 8002876:	f7fd fcaf 	bl	80001d8 <__aeabi_uldivmod>
 800287a:	4603      	mov	r3, r0
 800287c:	460c      	mov	r4, r1
 800287e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	60bb      	str	r3, [r7, #8]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800289e:	60bb      	str	r3, [r7, #8]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	68bb      	ldr	r3, [r7, #8]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	00f42400 	.word	0x00f42400
 80028b4:	007a1200 	.word	0x007a1200

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_GetHCLKFreq+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000010 	.word	0x20000010

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d4:	f7ff fff0 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028d8:	4601      	mov	r1, r0
 80028da:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0a9b      	lsrs	r3, r3, #10
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40023800 	.word	0x40023800
 80028f4:	08004298 	.word	0x08004298

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028fc:	f7ff ffdc 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 8002900:	4601      	mov	r1, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0b5b      	lsrs	r3, r3, #13
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4a03      	ldr	r2, [pc, #12]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	08004298 	.word	0x08004298

08002920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01d      	b.n	800296e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe ff22 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 fa14 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f042 0201 	orr.w	r2, r2, #1
 800298c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d007      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d122      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d11b      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f06f 0202 	mvn.w	r2, #2
 80029ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f9a5 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a06:	e005      	b.n	8002a14 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f997 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f9a8 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d122      	bne.n	8002a6e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d11b      	bne.n	8002a6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0204 	mvn.w	r2, #4
 8002a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f97b 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a5a:	e005      	b.n	8002a68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f96d 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f97e 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d122      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d11b      	bne.n	8002ac2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0208 	mvn.w	r2, #8
 8002a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f951 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002aae:	e005      	b.n	8002abc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f943 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f954 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d122      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d11b      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f06f 0210 	mvn.w	r2, #16
 8002ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2208      	movs	r2, #8
 8002aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f927 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002b02:	e005      	b.n	8002b10 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f919 	bl	8002d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92a 	bl	8002d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10e      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d107      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f06f 0201 	mvn.w	r2, #1
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fd fe5f 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d10e      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d107      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 faa1 	bl	80030b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8ef 	bl	8002d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d10e      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d107      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0220 	mvn.w	r2, #32
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fa6b 	bl	800309c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_TIM_ConfigClockSource+0x18>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0a6      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x166>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c04:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c0c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d067      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x120>
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d80b      	bhi.n	8002c3a <HAL_TIM_ConfigClockSource+0x6c>
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d073      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x140>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d802      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x62>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06f      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c2e:	e078      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d06c      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x140>
 8002c34:	2b30      	cmp	r3, #48	; 0x30
 8002c36:	d06a      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c38:	e073      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c3a:	2b70      	cmp	r3, #112	; 0x70
 8002c3c:	d00d      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0x8c>
 8002c3e:	2b70      	cmp	r3, #112	; 0x70
 8002c40:	d804      	bhi.n	8002c4c <HAL_TIM_ConfigClockSource+0x7e>
 8002c42:	2b50      	cmp	r3, #80	; 0x50
 8002c44:	d033      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xe0>
 8002c46:	2b60      	cmp	r3, #96	; 0x60
 8002c48:	d041      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c4a:	e06a      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d066      	beq.n	8002d20 <HAL_TIM_ConfigClockSource+0x152>
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c56:	d017      	beq.n	8002c88 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c58:	e063      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f000 f989 	bl	8002f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
      break;
 8002c86:	e04c      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f000 f972 	bl	8002f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002caa:	609a      	str	r2, [r3, #8]
      break;
 8002cac:	e039      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f000 f8e6 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2150      	movs	r1, #80	; 0x50
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f93f 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002ccc:	e029      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f905 	bl	8002eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2160      	movs	r1, #96	; 0x60
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f92f 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002cec:	e019      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8c6 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2140      	movs	r1, #64	; 0x40
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f91f 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e009      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 f916 	bl	8002f4a <TIM_ITRx_SetConfig>
      break;
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a34      	ldr	r2, [pc, #208]	; (8002e70 <TIM_Base_SetConfig+0xe4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00f      	beq.n	8002dc4 <TIM_Base_SetConfig+0x38>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d00b      	beq.n	8002dc4 <TIM_Base_SetConfig+0x38>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <TIM_Base_SetConfig+0xe8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_Base_SetConfig+0x38>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <TIM_Base_SetConfig+0xec>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0x38>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <TIM_Base_SetConfig+0xf0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <TIM_Base_SetConfig+0xe4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01b      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d017      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <TIM_Base_SetConfig+0xe8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a21      	ldr	r2, [pc, #132]	; (8002e78 <TIM_Base_SetConfig+0xec>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00f      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <TIM_Base_SetConfig+0xf0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00b      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <TIM_Base_SetConfig+0xf4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <TIM_Base_SetConfig+0xf8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <TIM_Base_SetConfig+0x8a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <TIM_Base_SetConfig+0xfc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d108      	bne.n	8002e28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <TIM_Base_SetConfig+0xe4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d103      	bne.n	8002e5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	615a      	str	r2, [r3, #20]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40014000 	.word	0x40014000
 8002e84:	40014400 	.word	0x40014400
 8002e88:	40014800 	.word	0x40014800

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0210 	bic.w	r2, r3, #16
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	621a      	str	r2, [r3, #32]
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f043 0307 	orr.w	r3, r3, #7
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e050      	b.n	800307a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003024:	d013      	beq.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a13      	ldr	r2, [pc, #76]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10c      	bne.n	8003068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	4313      	orrs	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40010000 	.word	0x40010000
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40014000 	.word	0x40014000

0800309c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e03f      	b.n	8003156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fb76 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fb8d 	bl	8003828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800313c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b088      	sub	sp, #32
 8003162:	af02      	add	r7, sp, #8
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b20      	cmp	r3, #32
 800317c:	f040 8083 	bne.w	8003286 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_UART_Transmit+0x2e>
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e07b      	b.n	8003288 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_UART_Transmit+0x40>
 800319a:	2302      	movs	r3, #2
 800319c:	e074      	b.n	8003288 <HAL_UART_Transmit+0x12a>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	; 0x21
 80031b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031b4:	f7fe fc76 	bl	8001aa4 <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	88fa      	ldrh	r2, [r7, #6]
 80031be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	88fa      	ldrh	r2, [r7, #6]
 80031c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80031ce:	e042      	b.n	8003256 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e6:	d122      	bne.n	800322e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f9ac 	bl	8003550 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e042      	b.n	8003288 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003214:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3302      	adds	r3, #2
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	e017      	b.n	8003256 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3301      	adds	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	e013      	b.n	8003256 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f989 	bl	8003550 <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e01f      	b.n	8003288 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	60ba      	str	r2, [r7, #8]
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1b7      	bne.n	80031d0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	2140      	movs	r1, #64	; 0x40
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f970 	bl	8003550 <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d140      	bne.n	800332c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_UART_Receive_IT+0x26>
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e039      	b.n	800332e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Receive_IT+0x38>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e032      	b.n	800332e <HAL_UART_Receive_IT+0x9e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	88fa      	ldrh	r2, [r7, #6]
 80032da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2222      	movs	r2, #34	; 0x22
 80032ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003306:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0220 	orr.w	r2, r2, #32
 8003326:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_UART_IRQHandler+0x52>
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f9cc 	bl	8003724 <UART_Receive_IT>
      return;
 800338c:	e0d1      	b.n	8003532 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80b0 	beq.w	80034f6 <HAL_UART_IRQHandler+0x1ba>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_UART_IRQHandler+0x70>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80a5 	beq.w	80034f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_UART_IRQHandler+0x90>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <HAL_UART_IRQHandler+0xb0>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	f043 0202 	orr.w	r2, r3, #2
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_UART_IRQHandler+0xd0>
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00f      	beq.n	8003436 <HAL_UART_IRQHandler+0xfa>
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d104      	bne.n	800342a <HAL_UART_IRQHandler+0xee>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	f043 0208 	orr.w	r2, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d078      	beq.n	8003530 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f966 	bl	8003724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_UART_IRQHandler+0x144>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d031      	beq.n	80034e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8af 	bl	80035e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d123      	bne.n	80034dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b0:	4a21      	ldr	r2, [pc, #132]	; (8003538 <HAL_UART_IRQHandler+0x1fc>)
 80034b2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fc10 	bl	8001cde <HAL_DMA_Abort_IT>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034ce:	4610      	mov	r0, r2
 80034d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d2:	e00e      	b.n	80034f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f831 	bl	800353c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034da:	e00a      	b.n	80034f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f82d 	bl	800353c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e2:	e006      	b.n	80034f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f829 	bl	800353c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034f0:	e01e      	b.n	8003530 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f2:	bf00      	nop
    return;
 80034f4:	e01c      	b.n	8003530 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_UART_IRQHandler+0x1d6>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f89c 	bl	8003648 <UART_Transmit_IT>
    return;
 8003510:	e00f      	b.n	8003532 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_UART_IRQHandler+0x1f6>
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8e4 	bl	80036f4 <UART_EndTransmit_IT>
    return;
 800352c:	bf00      	nop
 800352e:	e000      	b.n	8003532 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003530:	bf00      	nop
  }
}
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	08003621 	.word	0x08003621

0800353c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	e02c      	b.n	80035bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d028      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x30>
 8003570:	f7fe fa98 	bl	8001aa4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	d21d      	bcs.n	80035bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800358e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e00f      	b.n	80035dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	461a      	mov	r2, r3
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d0c3      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff ff7e 	bl	800353c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b21      	cmp	r3, #33	; 0x21
 800365a:	d144      	bne.n	80036e6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d11a      	bne.n	800369c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800367a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d105      	bne.n	8003690 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	621a      	str	r2, [r3, #32]
 800368e:	e00e      	b.n	80036ae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]
 800369a:	e008      	b.n	80036ae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	1c59      	adds	r1, r3, #1
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6211      	str	r1, [r2, #32]
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fd f947 	bl	80009a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b22      	cmp	r3, #34	; 0x22
 8003736:	d171      	bne.n	800381c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d123      	bne.n	800378a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10e      	bne.n	800376e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	1c9a      	adds	r2, r3, #2
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
 800376c:	e029      	b.n	80037c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	b29b      	uxth	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
 8003788:	e01b      	b.n	80037c2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6858      	ldr	r0, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	1c59      	adds	r1, r3, #1
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6291      	str	r1, [r2, #40]	; 0x28
 80037a2:	b2c2      	uxtb	r2, r0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e00c      	b.n	80037c2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	1c58      	adds	r0, r3, #1
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	6288      	str	r0, [r1, #40]	; 0x28
 80037ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	4619      	mov	r1, r3
 80037d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d120      	bne.n	8003818 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0220 	bic.w	r2, r2, #32
 80037e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd f806 	bl	8000820 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e002      	b.n	800381e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003896:	f040 818b 	bne.w	8003bb0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4ac1      	ldr	r2, [pc, #772]	; (8003ba4 <UART_SetConfig+0x37c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d005      	beq.n	80038b0 <UART_SetConfig+0x88>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4abf      	ldr	r2, [pc, #764]	; (8003ba8 <UART_SetConfig+0x380>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	f040 80bd 	bne.w	8003a2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7ff f822 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 80038b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	461d      	mov	r5, r3
 80038ba:	f04f 0600 	mov.w	r6, #0
 80038be:	46a8      	mov	r8, r5
 80038c0:	46b1      	mov	r9, r6
 80038c2:	eb18 0308 	adds.w	r3, r8, r8
 80038c6:	eb49 0409 	adc.w	r4, r9, r9
 80038ca:	4698      	mov	r8, r3
 80038cc:	46a1      	mov	r9, r4
 80038ce:	eb18 0805 	adds.w	r8, r8, r5
 80038d2:	eb49 0906 	adc.w	r9, r9, r6
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038ea:	4688      	mov	r8, r1
 80038ec:	4691      	mov	r9, r2
 80038ee:	eb18 0005 	adds.w	r0, r8, r5
 80038f2:	eb49 0106 	adc.w	r1, r9, r6
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	461d      	mov	r5, r3
 80038fc:	f04f 0600 	mov.w	r6, #0
 8003900:	196b      	adds	r3, r5, r5
 8003902:	eb46 0406 	adc.w	r4, r6, r6
 8003906:	461a      	mov	r2, r3
 8003908:	4623      	mov	r3, r4
 800390a:	f7fc fc65 	bl	80001d8 <__aeabi_uldivmod>
 800390e:	4603      	mov	r3, r0
 8003910:	460c      	mov	r4, r1
 8003912:	461a      	mov	r2, r3
 8003914:	4ba5      	ldr	r3, [pc, #660]	; (8003bac <UART_SetConfig+0x384>)
 8003916:	fba3 2302 	umull	r2, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	461d      	mov	r5, r3
 8003924:	f04f 0600 	mov.w	r6, #0
 8003928:	46a9      	mov	r9, r5
 800392a:	46b2      	mov	sl, r6
 800392c:	eb19 0309 	adds.w	r3, r9, r9
 8003930:	eb4a 040a 	adc.w	r4, sl, sl
 8003934:	4699      	mov	r9, r3
 8003936:	46a2      	mov	sl, r4
 8003938:	eb19 0905 	adds.w	r9, r9, r5
 800393c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003954:	4689      	mov	r9, r1
 8003956:	4692      	mov	sl, r2
 8003958:	eb19 0005 	adds.w	r0, r9, r5
 800395c:	eb4a 0106 	adc.w	r1, sl, r6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	461d      	mov	r5, r3
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	196b      	adds	r3, r5, r5
 800396c:	eb46 0406 	adc.w	r4, r6, r6
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	f7fc fc30 	bl	80001d8 <__aeabi_uldivmod>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	461a      	mov	r2, r3
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <UART_SetConfig+0x384>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a86      	ldr	r2, [pc, #536]	; (8003bac <UART_SetConfig+0x384>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039a0:	4498      	add	r8, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	461d      	mov	r5, r3
 80039a6:	f04f 0600 	mov.w	r6, #0
 80039aa:	46a9      	mov	r9, r5
 80039ac:	46b2      	mov	sl, r6
 80039ae:	eb19 0309 	adds.w	r3, r9, r9
 80039b2:	eb4a 040a 	adc.w	r4, sl, sl
 80039b6:	4699      	mov	r9, r3
 80039b8:	46a2      	mov	sl, r4
 80039ba:	eb19 0905 	adds.w	r9, r9, r5
 80039be:	eb4a 0a06 	adc.w	sl, sl, r6
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039d6:	4689      	mov	r9, r1
 80039d8:	4692      	mov	sl, r2
 80039da:	eb19 0005 	adds.w	r0, r9, r5
 80039de:	eb4a 0106 	adc.w	r1, sl, r6
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	461d      	mov	r5, r3
 80039e8:	f04f 0600 	mov.w	r6, #0
 80039ec:	196b      	adds	r3, r5, r5
 80039ee:	eb46 0406 	adc.w	r4, r6, r6
 80039f2:	461a      	mov	r2, r3
 80039f4:	4623      	mov	r3, r4
 80039f6:	f7fc fbef 	bl	80001d8 <__aeabi_uldivmod>
 80039fa:	4603      	mov	r3, r0
 80039fc:	460c      	mov	r4, r1
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <UART_SetConfig+0x384>)
 8003a02:	fba3 1302 	umull	r1, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2164      	movs	r1, #100	; 0x64
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <UART_SetConfig+0x384>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 0207 	and.w	r2, r3, #7
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4442      	add	r2, r8
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	e26f      	b.n	8003f0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a2a:	f7fe ff51 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8003a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	461d      	mov	r5, r3
 8003a34:	f04f 0600 	mov.w	r6, #0
 8003a38:	46a8      	mov	r8, r5
 8003a3a:	46b1      	mov	r9, r6
 8003a3c:	eb18 0308 	adds.w	r3, r8, r8
 8003a40:	eb49 0409 	adc.w	r4, r9, r9
 8003a44:	4698      	mov	r8, r3
 8003a46:	46a1      	mov	r9, r4
 8003a48:	eb18 0805 	adds.w	r8, r8, r5
 8003a4c:	eb49 0906 	adc.w	r9, r9, r6
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a64:	4688      	mov	r8, r1
 8003a66:	4691      	mov	r9, r2
 8003a68:	eb18 0005 	adds.w	r0, r8, r5
 8003a6c:	eb49 0106 	adc.w	r1, r9, r6
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	461d      	mov	r5, r3
 8003a76:	f04f 0600 	mov.w	r6, #0
 8003a7a:	196b      	adds	r3, r5, r5
 8003a7c:	eb46 0406 	adc.w	r4, r6, r6
 8003a80:	461a      	mov	r2, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	f7fc fba8 	bl	80001d8 <__aeabi_uldivmod>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <UART_SetConfig+0x384>)
 8003a90:	fba3 2302 	umull	r2, r3, r3, r2
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	f04f 0600 	mov.w	r6, #0
 8003aa2:	46a9      	mov	r9, r5
 8003aa4:	46b2      	mov	sl, r6
 8003aa6:	eb19 0309 	adds.w	r3, r9, r9
 8003aaa:	eb4a 040a 	adc.w	r4, sl, sl
 8003aae:	4699      	mov	r9, r3
 8003ab0:	46a2      	mov	sl, r4
 8003ab2:	eb19 0905 	adds.w	r9, r9, r5
 8003ab6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ace:	4689      	mov	r9, r1
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	eb19 0005 	adds.w	r0, r9, r5
 8003ad6:	eb4a 0106 	adc.w	r1, sl, r6
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	461d      	mov	r5, r3
 8003ae0:	f04f 0600 	mov.w	r6, #0
 8003ae4:	196b      	adds	r3, r5, r5
 8003ae6:	eb46 0406 	adc.w	r4, r6, r6
 8003aea:	461a      	mov	r2, r3
 8003aec:	4623      	mov	r3, r4
 8003aee:	f7fc fb73 	bl	80001d8 <__aeabi_uldivmod>
 8003af2:	4603      	mov	r3, r0
 8003af4:	460c      	mov	r4, r1
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b2c      	ldr	r3, [pc, #176]	; (8003bac <UART_SetConfig+0x384>)
 8003afa:	fba3 1302 	umull	r1, r3, r3, r2
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2164      	movs	r1, #100	; 0x64
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	3332      	adds	r3, #50	; 0x32
 8003b0c:	4a27      	ldr	r2, [pc, #156]	; (8003bac <UART_SetConfig+0x384>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b1a:	4498      	add	r8, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	461d      	mov	r5, r3
 8003b20:	f04f 0600 	mov.w	r6, #0
 8003b24:	46a9      	mov	r9, r5
 8003b26:	46b2      	mov	sl, r6
 8003b28:	eb19 0309 	adds.w	r3, r9, r9
 8003b2c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b30:	4699      	mov	r9, r3
 8003b32:	46a2      	mov	sl, r4
 8003b34:	eb19 0905 	adds.w	r9, r9, r5
 8003b38:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b3c:	f04f 0100 	mov.w	r1, #0
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b50:	4689      	mov	r9, r1
 8003b52:	4692      	mov	sl, r2
 8003b54:	eb19 0005 	adds.w	r0, r9, r5
 8003b58:	eb4a 0106 	adc.w	r1, sl, r6
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	461d      	mov	r5, r3
 8003b62:	f04f 0600 	mov.w	r6, #0
 8003b66:	196b      	adds	r3, r5, r5
 8003b68:	eb46 0406 	adc.w	r4, r6, r6
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4623      	mov	r3, r4
 8003b70:	f7fc fb32 	bl	80001d8 <__aeabi_uldivmod>
 8003b74:	4603      	mov	r3, r0
 8003b76:	460c      	mov	r4, r1
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <UART_SetConfig+0x384>)
 8003b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a07      	ldr	r2, [pc, #28]	; (8003bac <UART_SetConfig+0x384>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4442      	add	r2, r8
 8003ba0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ba2:	e1b2      	b.n	8003f0a <UART_SetConfig+0x6e2>
 8003ba4:	40011000 	.word	0x40011000
 8003ba8:	40011400 	.word	0x40011400
 8003bac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4ad7      	ldr	r2, [pc, #860]	; (8003f14 <UART_SetConfig+0x6ec>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d005      	beq.n	8003bc6 <UART_SetConfig+0x39e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4ad6      	ldr	r2, [pc, #856]	; (8003f18 <UART_SetConfig+0x6f0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f040 80d1 	bne.w	8003d68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc6:	f7fe fe97 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003bca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	469a      	mov	sl, r3
 8003bd0:	f04f 0b00 	mov.w	fp, #0
 8003bd4:	46d0      	mov	r8, sl
 8003bd6:	46d9      	mov	r9, fp
 8003bd8:	eb18 0308 	adds.w	r3, r8, r8
 8003bdc:	eb49 0409 	adc.w	r4, r9, r9
 8003be0:	4698      	mov	r8, r3
 8003be2:	46a1      	mov	r9, r4
 8003be4:	eb18 080a 	adds.w	r8, r8, sl
 8003be8:	eb49 090b 	adc.w	r9, r9, fp
 8003bec:	f04f 0100 	mov.w	r1, #0
 8003bf0:	f04f 0200 	mov.w	r2, #0
 8003bf4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003bf8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003bfc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c00:	4688      	mov	r8, r1
 8003c02:	4691      	mov	r9, r2
 8003c04:	eb1a 0508 	adds.w	r5, sl, r8
 8003c08:	eb4b 0609 	adc.w	r6, fp, r9
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4619      	mov	r1, r3
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	f04f 0400 	mov.w	r4, #0
 8003c1e:	0094      	lsls	r4, r2, #2
 8003c20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c24:	008b      	lsls	r3, r1, #2
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	f7fc fad3 	bl	80001d8 <__aeabi_uldivmod>
 8003c32:	4603      	mov	r3, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	461a      	mov	r2, r3
 8003c38:	4bb8      	ldr	r3, [pc, #736]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	469b      	mov	fp, r3
 8003c48:	f04f 0c00 	mov.w	ip, #0
 8003c4c:	46d9      	mov	r9, fp
 8003c4e:	46e2      	mov	sl, ip
 8003c50:	eb19 0309 	adds.w	r3, r9, r9
 8003c54:	eb4a 040a 	adc.w	r4, sl, sl
 8003c58:	4699      	mov	r9, r3
 8003c5a:	46a2      	mov	sl, r4
 8003c5c:	eb19 090b 	adds.w	r9, r9, fp
 8003c60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c78:	4689      	mov	r9, r1
 8003c7a:	4692      	mov	sl, r2
 8003c7c:	eb1b 0509 	adds.w	r5, fp, r9
 8003c80:	eb4c 060a 	adc.w	r6, ip, sl
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f04f 0400 	mov.w	r4, #0
 8003c96:	0094      	lsls	r4, r2, #2
 8003c98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c9c:	008b      	lsls	r3, r1, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4623      	mov	r3, r4
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	4631      	mov	r1, r6
 8003ca6:	f7fc fa97 	bl	80001d8 <__aeabi_uldivmod>
 8003caa:	4603      	mov	r3, r0
 8003cac:	460c      	mov	r4, r1
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003cb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2164      	movs	r1, #100	; 0x64
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3332      	adds	r3, #50	; 0x32
 8003cc4:	4a95      	ldr	r2, [pc, #596]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd0:	4498      	add	r8, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	469b      	mov	fp, r3
 8003cd6:	f04f 0c00 	mov.w	ip, #0
 8003cda:	46d9      	mov	r9, fp
 8003cdc:	46e2      	mov	sl, ip
 8003cde:	eb19 0309 	adds.w	r3, r9, r9
 8003ce2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	46a2      	mov	sl, r4
 8003cea:	eb19 090b 	adds.w	r9, r9, fp
 8003cee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d06:	4689      	mov	r9, r1
 8003d08:	4692      	mov	sl, r2
 8003d0a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d0e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4619      	mov	r1, r3
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	f04f 0400 	mov.w	r4, #0
 8003d24:	0094      	lsls	r4, r2, #2
 8003d26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d2a:	008b      	lsls	r3, r1, #2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4623      	mov	r3, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	4631      	mov	r1, r6
 8003d34:	f7fc fa50 	bl	80001d8 <__aeabi_uldivmod>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b77      	ldr	r3, [pc, #476]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003d40:	fba3 1302 	umull	r1, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2164      	movs	r1, #100	; 0x64
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	3332      	adds	r3, #50	; 0x32
 8003d52:	4a72      	ldr	r2, [pc, #456]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4442      	add	r2, r8
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	e0d0      	b.n	8003f0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fdb2 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	469a      	mov	sl, r3
 8003d72:	f04f 0b00 	mov.w	fp, #0
 8003d76:	46d0      	mov	r8, sl
 8003d78:	46d9      	mov	r9, fp
 8003d7a:	eb18 0308 	adds.w	r3, r8, r8
 8003d7e:	eb49 0409 	adc.w	r4, r9, r9
 8003d82:	4698      	mov	r8, r3
 8003d84:	46a1      	mov	r9, r4
 8003d86:	eb18 080a 	adds.w	r8, r8, sl
 8003d8a:	eb49 090b 	adc.w	r9, r9, fp
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003da2:	4688      	mov	r8, r1
 8003da4:	4691      	mov	r9, r2
 8003da6:	eb1a 0508 	adds.w	r5, sl, r8
 8003daa:	eb4b 0609 	adc.w	r6, fp, r9
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4619      	mov	r1, r3
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f04f 0400 	mov.w	r4, #0
 8003dc0:	0094      	lsls	r4, r2, #2
 8003dc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	4628      	mov	r0, r5
 8003dce:	4631      	mov	r1, r6
 8003dd0:	f7fc fa02 	bl	80001d8 <__aeabi_uldivmod>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003ddc:	fba3 2302 	umull	r2, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	469b      	mov	fp, r3
 8003dea:	f04f 0c00 	mov.w	ip, #0
 8003dee:	46d9      	mov	r9, fp
 8003df0:	46e2      	mov	sl, ip
 8003df2:	eb19 0309 	adds.w	r3, r9, r9
 8003df6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dfa:	4699      	mov	r9, r3
 8003dfc:	46a2      	mov	sl, r4
 8003dfe:	eb19 090b 	adds.w	r9, r9, fp
 8003e02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e1a:	4689      	mov	r9, r1
 8003e1c:	4692      	mov	sl, r2
 8003e1e:	eb1b 0509 	adds.w	r5, fp, r9
 8003e22:	eb4c 060a 	adc.w	r6, ip, sl
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	0094      	lsls	r4, r2, #2
 8003e3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4623      	mov	r3, r4
 8003e44:	4628      	mov	r0, r5
 8003e46:	4631      	mov	r1, r6
 8003e48:	f7fc f9c6 	bl	80001d8 <__aeabi_uldivmod>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	460c      	mov	r4, r1
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	2164      	movs	r1, #100	; 0x64
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	3332      	adds	r3, #50	; 0x32
 8003e66:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e72:	4498      	add	r8, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	469b      	mov	fp, r3
 8003e78:	f04f 0c00 	mov.w	ip, #0
 8003e7c:	46d9      	mov	r9, fp
 8003e7e:	46e2      	mov	sl, ip
 8003e80:	eb19 0309 	adds.w	r3, r9, r9
 8003e84:	eb4a 040a 	adc.w	r4, sl, sl
 8003e88:	4699      	mov	r9, r3
 8003e8a:	46a2      	mov	sl, r4
 8003e8c:	eb19 090b 	adds.w	r9, r9, fp
 8003e90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ea4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea8:	4689      	mov	r9, r1
 8003eaa:	4692      	mov	sl, r2
 8003eac:	eb1b 0509 	adds.w	r5, fp, r9
 8003eb0:	eb4c 060a 	adc.w	r6, ip, sl
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	f04f 0400 	mov.w	r4, #0
 8003ec6:	0094      	lsls	r4, r2, #2
 8003ec8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ecc:	008b      	lsls	r3, r1, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4623      	mov	r3, r4
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	f7fc f97f 	bl	80001d8 <__aeabi_uldivmod>
 8003eda:	4603      	mov	r3, r0
 8003edc:	460c      	mov	r4, r1
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2164      	movs	r1, #100	; 0x64
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	3332      	adds	r3, #50	; 0x32
 8003ef4:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <UART_SetConfig+0x6f4>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4442      	add	r2, r8
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	e7ff      	b.n	8003f0a <UART_SetConfig+0x6e2>
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <__errno>:
 8003f20:	4b01      	ldr	r3, [pc, #4]	; (8003f28 <__errno+0x8>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2000001c 	.word	0x2000001c

08003f2c <__libc_init_array>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	4e0d      	ldr	r6, [pc, #52]	; (8003f64 <__libc_init_array+0x38>)
 8003f30:	4c0d      	ldr	r4, [pc, #52]	; (8003f68 <__libc_init_array+0x3c>)
 8003f32:	1ba4      	subs	r4, r4, r6
 8003f34:	10a4      	asrs	r4, r4, #2
 8003f36:	2500      	movs	r5, #0
 8003f38:	42a5      	cmp	r5, r4
 8003f3a:	d109      	bne.n	8003f50 <__libc_init_array+0x24>
 8003f3c:	4e0b      	ldr	r6, [pc, #44]	; (8003f6c <__libc_init_array+0x40>)
 8003f3e:	4c0c      	ldr	r4, [pc, #48]	; (8003f70 <__libc_init_array+0x44>)
 8003f40:	f000 f8c8 	bl	80040d4 <_init>
 8003f44:	1ba4      	subs	r4, r4, r6
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	2500      	movs	r5, #0
 8003f4a:	42a5      	cmp	r5, r4
 8003f4c:	d105      	bne.n	8003f5a <__libc_init_array+0x2e>
 8003f4e:	bd70      	pop	{r4, r5, r6, pc}
 8003f50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f54:	4798      	blx	r3
 8003f56:	3501      	adds	r5, #1
 8003f58:	e7ee      	b.n	8003f38 <__libc_init_array+0xc>
 8003f5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f5e:	4798      	blx	r3
 8003f60:	3501      	adds	r5, #1
 8003f62:	e7f2      	b.n	8003f4a <__libc_init_array+0x1e>
 8003f64:	080042a8 	.word	0x080042a8
 8003f68:	080042a8 	.word	0x080042a8
 8003f6c:	080042a8 	.word	0x080042a8
 8003f70:	080042ac 	.word	0x080042ac

08003f74 <malloc>:
 8003f74:	4b02      	ldr	r3, [pc, #8]	; (8003f80 <malloc+0xc>)
 8003f76:	4601      	mov	r1, r0
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	f000 b80b 	b.w	8003f94 <_malloc_r>
 8003f7e:	bf00      	nop
 8003f80:	2000001c 	.word	0x2000001c

08003f84 <memset>:
 8003f84:	4402      	add	r2, r0
 8003f86:	4603      	mov	r3, r0
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d100      	bne.n	8003f8e <memset+0xa>
 8003f8c:	4770      	bx	lr
 8003f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f92:	e7f9      	b.n	8003f88 <memset+0x4>

08003f94 <_malloc_r>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	1ccd      	adds	r5, r1, #3
 8003f98:	f025 0503 	bic.w	r5, r5, #3
 8003f9c:	3508      	adds	r5, #8
 8003f9e:	2d0c      	cmp	r5, #12
 8003fa0:	bf38      	it	cc
 8003fa2:	250c      	movcc	r5, #12
 8003fa4:	2d00      	cmp	r5, #0
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	db01      	blt.n	8003fae <_malloc_r+0x1a>
 8003faa:	42a9      	cmp	r1, r5
 8003fac:	d903      	bls.n	8003fb6 <_malloc_r+0x22>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	6033      	str	r3, [r6, #0]
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	bd70      	pop	{r4, r5, r6, pc}
 8003fb6:	f000 f88b 	bl	80040d0 <__malloc_lock>
 8003fba:	4a21      	ldr	r2, [pc, #132]	; (8004040 <_malloc_r+0xac>)
 8003fbc:	6814      	ldr	r4, [r2, #0]
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	b991      	cbnz	r1, 8003fe8 <_malloc_r+0x54>
 8003fc2:	4c20      	ldr	r4, [pc, #128]	; (8004044 <_malloc_r+0xb0>)
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b91b      	cbnz	r3, 8003fd0 <_malloc_r+0x3c>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f871 	bl	80040b0 <_sbrk_r>
 8003fce:	6020      	str	r0, [r4, #0]
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 f86c 	bl	80040b0 <_sbrk_r>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d124      	bne.n	8004026 <_malloc_r+0x92>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	6033      	str	r3, [r6, #0]
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 f876 	bl	80040d2 <__malloc_unlock>
 8003fe6:	e7e4      	b.n	8003fb2 <_malloc_r+0x1e>
 8003fe8:	680b      	ldr	r3, [r1, #0]
 8003fea:	1b5b      	subs	r3, r3, r5
 8003fec:	d418      	bmi.n	8004020 <_malloc_r+0x8c>
 8003fee:	2b0b      	cmp	r3, #11
 8003ff0:	d90f      	bls.n	8004012 <_malloc_r+0x7e>
 8003ff2:	600b      	str	r3, [r1, #0]
 8003ff4:	50cd      	str	r5, [r1, r3]
 8003ff6:	18cc      	adds	r4, r1, r3
 8003ff8:	4630      	mov	r0, r6
 8003ffa:	f000 f86a 	bl	80040d2 <__malloc_unlock>
 8003ffe:	f104 000b 	add.w	r0, r4, #11
 8004002:	1d23      	adds	r3, r4, #4
 8004004:	f020 0007 	bic.w	r0, r0, #7
 8004008:	1ac3      	subs	r3, r0, r3
 800400a:	d0d3      	beq.n	8003fb4 <_malloc_r+0x20>
 800400c:	425a      	negs	r2, r3
 800400e:	50e2      	str	r2, [r4, r3]
 8004010:	e7d0      	b.n	8003fb4 <_malloc_r+0x20>
 8004012:	428c      	cmp	r4, r1
 8004014:	684b      	ldr	r3, [r1, #4]
 8004016:	bf16      	itet	ne
 8004018:	6063      	strne	r3, [r4, #4]
 800401a:	6013      	streq	r3, [r2, #0]
 800401c:	460c      	movne	r4, r1
 800401e:	e7eb      	b.n	8003ff8 <_malloc_r+0x64>
 8004020:	460c      	mov	r4, r1
 8004022:	6849      	ldr	r1, [r1, #4]
 8004024:	e7cc      	b.n	8003fc0 <_malloc_r+0x2c>
 8004026:	1cc4      	adds	r4, r0, #3
 8004028:	f024 0403 	bic.w	r4, r4, #3
 800402c:	42a0      	cmp	r0, r4
 800402e:	d005      	beq.n	800403c <_malloc_r+0xa8>
 8004030:	1a21      	subs	r1, r4, r0
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f83c 	bl	80040b0 <_sbrk_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d0cf      	beq.n	8003fdc <_malloc_r+0x48>
 800403c:	6025      	str	r5, [r4, #0]
 800403e:	e7db      	b.n	8003ff8 <_malloc_r+0x64>
 8004040:	200000d4 	.word	0x200000d4
 8004044:	200000d8 	.word	0x200000d8

08004048 <rand>:
 8004048:	b538      	push	{r3, r4, r5, lr}
 800404a:	4b13      	ldr	r3, [pc, #76]	; (8004098 <rand+0x50>)
 800404c:	681c      	ldr	r4, [r3, #0]
 800404e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004050:	b97b      	cbnz	r3, 8004072 <rand+0x2a>
 8004052:	2018      	movs	r0, #24
 8004054:	f7ff ff8e 	bl	8003f74 <malloc>
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <rand+0x54>)
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <rand+0x58>)
 800405c:	63a0      	str	r0, [r4, #56]	; 0x38
 800405e:	e9c0 2300 	strd	r2, r3, [r0]
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <rand+0x5c>)
 8004064:	6083      	str	r3, [r0, #8]
 8004066:	230b      	movs	r3, #11
 8004068:	8183      	strh	r3, [r0, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	2300      	movs	r3, #0
 800406e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004072:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <rand+0x60>)
 8004076:	690a      	ldr	r2, [r1, #16]
 8004078:	694b      	ldr	r3, [r1, #20]
 800407a:	4c0c      	ldr	r4, [pc, #48]	; (80040ac <rand+0x64>)
 800407c:	4350      	muls	r0, r2
 800407e:	fb04 0003 	mla	r0, r4, r3, r0
 8004082:	fba2 2304 	umull	r2, r3, r2, r4
 8004086:	4403      	add	r3, r0
 8004088:	1c54      	adds	r4, r2, #1
 800408a:	f143 0500 	adc.w	r5, r3, #0
 800408e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004092:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	2000001c 	.word	0x2000001c
 800409c:	abcd330e 	.word	0xabcd330e
 80040a0:	e66d1234 	.word	0xe66d1234
 80040a4:	0005deec 	.word	0x0005deec
 80040a8:	5851f42d 	.word	0x5851f42d
 80040ac:	4c957f2d 	.word	0x4c957f2d

080040b0 <_sbrk_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4c06      	ldr	r4, [pc, #24]	; (80040cc <_sbrk_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4605      	mov	r5, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	f7fd fc20 	bl	8001900 <_sbrk>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_sbrk_r+0x1a>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_sbrk_r+0x1a>
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	200008ec 	.word	0x200008ec

080040d0 <__malloc_lock>:
 80040d0:	4770      	bx	lr

080040d2 <__malloc_unlock>:
 80040d2:	4770      	bx	lr

080040d4 <_init>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr

080040e0 <_fini>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr
